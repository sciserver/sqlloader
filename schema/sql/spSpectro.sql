--======================================================================
--   spSpectro.sql
--   2004-12-17 Ani Thakar and Alex Szalay
------------------------------------------------------------------------
--  Spectro functions and sps for SkyServer
------------------------------------------------------------------------
-- History:
--* 2004-12-17	Ani: Moved here from SpectroTables.sql.
--* 2010-06-29  Ani/Naren/Vamsi : Added spMakeSpecObjAll stored procedure for loading
--*				Spectrum images on to database. 
--* 2010-12-10  Ani: Removed "dbo." from spMakeSpecObjAll.
--* 2012-05-17  Ani: Excluded run2d from spec img path.
--* 2012-05-17  Ani: Reinstated run2d in img path.
--* 2012-06-01  Ani: Added code to spMakeSpecObjAll to check for 
--*             existence of image file names before ingesting them.
--* 2012-07-31  Ani: Updated fSpecidFromSDSS, fPlate, fMJD, fFiber for
--*             SDSS-III bit encoding schema.
--* 2013-12-02  Ani: Added fGetBlob CLR function from Deoyani.
--* 2013-12-02  Ani: Modified spMakeSpecObjAll to use fGetBlob instead of
--              OPENROWSET.
--* 2013-12-11  Ani: Updated assembly for fGetBlob and added code to set
--*             appropriate DB permissions.
--* 2013-12-13  Ani: Added COALESCE to fGetBlob call in case it returns
--*             NULL.
--* 2013-12-13  Ani: Made perms for GetBlob assembly conditionally set.
--* 2015-03-18  Ani: Added new function fSDSSfromSpecID (PR #2257).
--* 2017-05-12  Ani: Fixed spMakeSpecObjAll to handle plate numbers longer
--*             than 4 digits in PNG file names. Note that up to 4 digits,
--*             the PNG file names are constructed by padding the plate
--*             number with leading zeros, but this convention is broken
--*             for bigger plate numbers (starting with DR14).
--* 2018-08-01	Sue: updated functions to use numeric(20) SpecObjID instead of bigint
--* 2023-01-09  Ani: Updated function fSDSSfromSpecID to return run2d also (DR18).
------------------------------------------------------------------------

-----------------------------------------------------
-- The functions to extracts parts of a specObjID
-----------------------------------------------------

----------------------------------------------------------------------------------------------
-- CREATING THE ASSEMBLY
-----------------------------------------------------------------------------------------------
-- Set trustworthy permissions only if this is not a publish (Best*) db.
-- This is only required in the task db.
DECLARE @dbName VARCHAR(100)
SET @dbName=QUOTENAME(DB_NAME())
IF @dbName NOT LIKE 'Best%'
   BEGIN 
      EXEC('ALTER DATABASE '+@dbName+' SET trustworthy ON')
      -- Create the CLR assembly for fGetBlob function.
      CREATE ASSEMBLY [GetBlob]
      FROM 

      WITH PERMISSION_SET = EXTERNAL_ACCESS
   END
ELSE
   BEGIN
      -- Create the CLR assembly for fGetBlob function with SAFE perms.
      CREATE ASSEMBLY [GetBlob]
      FROM 

      WITH PERMISSION_SET = SAFE
   END
GO



--=============================================================
if exists (select * from dbo.sysobjects 
	where id = object_id(N'[dbo].[fGetBlob]') 
	and xtype in (N'FN', N'IF', N'TF'))
	drop function [dbo].[fGetBlob]
GO
--
CREATE FUNCTION  fGetBlob(@str nvarchar(4000))
RETURNS VARBINARY(max)
AS EXTERNAL NAME [GetBlob].[UserDefinedFunctions].[getBlob]
GO



--=============================================================
if exists (select * from dbo.sysobjects 
	where id = object_id(N'[dbo].[fSpecidFromSDSS]') 
	and xtype in (N'FN', N'IF', N'TF'))
	drop function [dbo].[fSpecidFromSDSS]
GO
--
CREATE FUNCTION fSpecidFromSDSS(@plate int, @mjd int, @fiber int, @run2d varchar(32))
-----------------------------------------------------------------
--/H Computes the long Spec IDs from its individual components.
--
--/T The bit-fields (starting from bit# 63) and their lengths are: <br>
--/T     plate[14] - bits 50-63 for the plate number, <br>
--/T     fiber[12]  - bits 38-49 for (MJD - 50000), <br>
--/T     mjd[14] - bits 24-37 for the fiberid, <br>
--/T     run2d[14] - bits 10-23 for the spec2d rerun, and <br>
--/T     0         - bits 0-9 unused in SpecObj, used for line/redshift/index
--/T                 in other tables. <br>
--/T <samp> select dbo.fSpecidFromSDSS(266,51630,145,26) as specObjID </samp>
-----------------------------------------------------------------
RETURNS numeric(20)
AS BEGIN
	declare @rerun int, @n int, @m int, @p int, @index1 int, @index2 int, @two bigint;
	SET @two = 2;
	IF @run2d like 'v%'
		BEGIN
			SET @index1 = CHARINDEX( '_', @run2d, 1 );
			SET @index2 = CHARINDEX( '_', @run2d, @index1+1 );
			SET @n = CAST( SUBSTRING(@run2d, 2, @index1-2) AS INT);
			SET @m = CAST( SUBSTRING(@run2d, @index1+1, @index2-(@index1+1)) AS INT);
			SET @p = CAST( SUBSTRING(@run2d, @index2+1, LEN(@run2d)-@index2) AS INT);
			SET @rerun = ((@n - 5)*10000) + (@m*100) + @p;
		END
	ELSE
		SET @rerun = @run2d;
    RETURN ( cast(
				(@plate*power(@two,50) + @fiber*power(@two,38) + (@mjd - 50000)*power(@two,24)
				+ @rerun*power(@two,10))
			 as numeric(20)) );
END
GO


--===============================================
IF EXISTS (SELECT name FROM   sysobjects 
	   WHERE  name = N'fSDSSfromSpecID' )
	DROP FUNCTION fSDSSfromSpecID
GO
--
CREATE FUNCTION fSDSSfromSpecID(@specID numeric(20,0))
-------------------------------------------------------------------------------
--/H Returns a table pf the 4-part SDSS numbers from the long specObjID.
--
--/T The returned columns in the output table are: 
--/T	plate, mjd, fiber, run2d<br>
--/T <samp> select * from dbo.fSDSSfromSpecID(865922932356966400)</samp>
-------------------------------------------------------------------------------
RETURNS @sdssSpecID TABLE (
	plate INT,
	mjd INT,
	fiber INT,
	run2d VARCHAR(16)
)
AS BEGIN


	declare @mjd int;
	declare @fiber int;
	declare @s bigint;
	declare @run2dnum int;
	declare @run2d VARCHAR(16) = '';


	DECLARE @sum bigint = 0
	DECLARE @cnt INT = cast(ceiling(log(cast(0x0000003FFFFFFFFF as bigint),2)) as int)
	Declare @max  int = floor(log(@specID,2))
	WHILE @cnt < @max
	BEGIN
		set @sum = @sum + power(cast(2 as bigint), @cnt)
		SET @cnt = @cnt + 1;
	END;

	set @s = @specID - @sum
	set @mjd = cast( (((@s & 0x0000003FFFFFFFFF)/ power(cast(2 as bigint),24)) + 50000) AS INT )


	set @sum = 0
	set @cnt = cast(ceiling(log(cast(0x0003FFFFFFFFFFFF as bigint),2)) as int)
	WHILE @cnt < @max
	BEGIN
		set @sum = @sum + power(cast(2 as bigint), @cnt)
		SET @cnt = @cnt + 1;
	END;

	set @s = @specID - @sum
	set @fiber = cast( (((cast(@s as bigint) & 0x0003FFFFFFFFFFFF)/ power(cast(2 as bigint),38))) AS INT)

	-- bits 10-23 are for run2d
	set @run2dnum = cast( (((cast(@s as bigint) & 0x0000000000FFFC00)/ power(cast(2 as bigint),10))) AS INT)
	IF @run2dnum > 104 
	    BEGIN
			SET @run2d = CONCAT( 'v', cast((@run2dnum/10000)+5 AS VARCHAR),'_', cast(((@run2dnum%10000)/100) as VARCHAR), '_', cast(@run2dnum % 100 AS VARCHAR) );
		END
	ELSE
		SET @run2d = CAST( @run2dnum AS VARCHAR);

    INSERT @sdssSpecID 
	SELECT
	    cast( (@specID / power(cast(2 as bigint),50)) AS INT ) AS plate,
	    @mjd AS mjd,
	    @fiber AS fiber,
		@run2d as run2d
    RETURN
END
GO

--=============================================================
if exists (select * from dbo.sysobjects 
	where id = object_id(N'[dbo].[fPlate]') 
	and xtype in (N'FN', N'IF', N'TF'))
	drop function [dbo].[fPlate]
GO
--
CREATE FUNCTION fPlate(@SpecID numeric(20))
-----------------------------------------------------------------
--/H Extracts plate from an SDSS Spec ID
--
--/T The bit-fields (starting from bit# 63) and their lengths are: <br>
--/T     plate[14] - bits 50-63 for the plate number, <br>
--/T     fiber[12]  - bits 38-49 for (MJD - 50000), <br>
--/T     mjd[14] - bits 24-37 for the fiberid, <br>
--/T     run2d[14] - bits 10-23 for the spec2d rerun, and <br>
--/T     0         - bits 0-9 unused in SpecObj, used for line/redshift/index
--/T                 in other tables. <br>
--/T <samp> select top 10 dbo.fPlate(plateID) as plate from PlateX </samp>
-----------------------------------------------------------------
RETURNS INT
AS BEGIN
	DECLARE @two BIGINT
	SET @two = 2;
	RETURN ( cast( (@SpecID / power(@two,50)) AS INT));
END  
GO


--=============================================================
if exists (select * from dbo.sysobjects 
	where id = object_id(N'[dbo].[fMJD]') 
	and xtype in (N'FN', N'IF', N'TF'))
	drop function [dbo].[fMJD]
GO
--
CREATE FUNCTION fMJD(@SpecID numeric(20))
-----------------------------------------------------------------
--/H Extracts MJD from an SDSS Spec ID
--
--/T The bit-fields (starting from bit# 63) and their lengths are: <br>
--/T     plate[14] - bits 50-63 for the plate number, <br>
--/T     fiber[12]  - bits 38-49 for (MJD - 50000), <br>
--/T     mjd[14] - bits 24-37 for the fiberid, <br>
--/T     run2d[14] - bits 10-23 for the spec2d rerun, and <br>
--/T     0         - bits 0-9 unused in SpecObj, used for line/redshift/index
--/T                 in other tables. <br>
--/T <samp> select top 10 dbo.fMJD(plateID) as plate from PlateX </samp>
-----------------------------------------------------------------
RETURNS INT
AS BEGIN
	--DECLARE @two BIGINT
	--SET @two = 2;
	--RETURN ( cast(((@SpecID & 0x0000003FFFFFFFFF) / power(@two,24)) AS INT) + 50000 );
	declare @mjd int

	select @mjd=mjd from dbo.fSDSSfromSpecID(@specID)
	return @mjd
END  
GO


--=============================================================
if exists (select * from dbo.sysobjects 
	where id = object_id(N'[dbo].[fFiber]') 
	and xtype in (N'FN', N'IF', N'TF'))
	drop function [dbo].[fFiber]
GO
--
CREATE FUNCTION fFiber(@SpecID numeric(20))
-----------------------------------------------------------------
--/H Extracts Fiber from an SDSS Spec ID
--
--/T The bit-fields (starting from bit# 63) and their lengths are: <br>
--/T     plate[14] - bits 50-63 for the plate number, <br>
--/T     fiber[12]  - bits 38-49 for (MJD - 50000), <br>
--/T     mjd[14] - bits 24-37 for the fiberid, <br>
--/T     run2d[14] - bits 10-23 for the spec2d rerun, and <br>
--/T     0         - bits 0-9 unused in SpecObj, used for line/redshift/index
--/T                 in other tables. <br>
--/T <samp> select top 10 dbo.fFiber(specObjID) as fiber from SpecObj </samp>
-----------------------------------------------------------------
RETURNS INT
AS BEGIN
	--DECLARE @two BIGINT
	--SET @two = 2;
	--RETURN ( cast(((@SpecID & 0x0003FFFFFFFFFFFF) / power(@two,38)) AS INT));

	declare @fiber int
	select @fiber = fiber from dbo.fSDSSfromSpecID(@specID)
	return @fiber

END  
GO

-- revert to primary file group

IF EXISTS ( SELECT [name] FROM dbo.sysobjects 
	WHERE [name] = N'spSetDefaultFileGroup' ) 
     EXEC spSetDefaultFileGroup 'PrimaryFileGroup'
GO




--===========================================================
if exists (select * from dbo.sysobjects 
	where id = object_id(N'spMakeSpecObjAll') 
	and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure spMakeSpecObjAll
GO
--
CREATE PROCEDURE spMakeSpecObjAll
(  
  @DBName varchar(256)
, @CsvPath Varchar(256)
, @ImagePath Varchar(256)
)
AS
BEGIN
SET NOCOUNT ON;

Declare 
  @sql nvarchar(max)
, @TableName varchar(20)
, @TempTableName varchar(20)
, @rowcount int
, @i int
, @imgext varchar(5)
, @cmd nvarchar(max)

Set @i=0
Set @imgext = '.png'
Set @TableName = 'SpecObjAll'



IF OBJECT_ID('tempdb..#SpecObjAllCsv') IS NOT NULL 
    Drop table #SpecObjAllCsv
Select 
TOP 0 * 
into #SpecObjAllcsv
from SpecObjAll;

ALTER TABLE #SpecObjAllcsv
DROP COLUMN img;


Set @TempTableName = '#SpecObjAllcsv'
Set @cmd = N'BULK INSERT '+@TempTableName
  + ' FROM  '+ ''''+@CsvPath+ ''''+
  + ' WITH ( FIRSTROW = 2 '
  +	' ,FIELDTERMINATOR = '','''
  +	' ,ROWTERMINATOR = ''\n'')';
  
-- select @cmd
EXEC sp_executesql @cmd;

IF @@error<>0
	BEGIN
	Print 'ERROR while loading Spectrum CSV''s in spMakeSpecObjAll'
	Return
	END

-- Alter Table #SpecObjAllcsv
-- Add Img varbinary(max) null

-- Alter Table SpecObjAll
-- Alter Column Img varbinary(max) null

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SpecObjAll]') AND name = N'pk_SpecObjAll_specObjID')
Alter Table SpecObjAll
Add Constraint pk_SpecObjAll_SpecObjID PRIMARY KEY CLUSTERED (SpecObjID)

-- Reading the Frame data into a temp table for the Update Img Path
INSERT INTO [dbo].[SpecObjAll]
Select 
*,
COALESCE(dbo.fGetBlob(''+@ImagePath+CAST(run2d as varchar)+'\'+(case when(plate<10000) then right(('0000'+CAST(plate as varchar)),4) else cast(plate as varchar) end)+'-'+CAST(mjd as varchar)+'\'+'spec-image-'+(case when(plate<10000) then right(('0000'+CAST(plate as varchar)),4) else cast(plate as varchar) end)+'-'+CAST(mjd as varchar)+'-'+right(('0000'+CAST(fiberID as varchar)),4)+@imgext+''),0x1111) as img
from #SpecObjAllCsv


/*
IF OBJECT_ID('tempdb..#SpecObjImg') IS NOT NULL 
    Drop table #SpecObjImg
Select 
	rowid = identity(int,1,1)
	,specObjID
	,plate
	,mjd
	,fiberID
	,run2d
	,'UPDATE '+@TableName+' Set img = '+ '(SELECT * FROM OPENROWSET(BULK N'''+@ImagePath+CAST(run2d as varchar)+'\'+right(('0000'+CAST(plate as varchar)),4)+'-'+CAST(mjd as varchar)+'\'+'spec-image-'+right(('0000'+CAST(plate as varchar)),4)+'-'+CAST(mjd as varchar)+'-'+right(('0000'+CAST(fiberID as varchar)),4)+@imgext+''', SINGLE_BLOB) AS Document)'  as SqlStatement
into 
#SpecObjImg
from #SpecObjAllCsv


Select @rowcount = @@ROWCOUNT

-- Uploading the images from the FileSystem by the row-row updation.
While(@i<=@rowcount)
Begin
Select 
	@sql = SqlStatement + ' WHERE specObjID = '+''+ CAST (specObjID AS VARCHAR) from #SpecObjImg
	Where rowid = @i

--Select @sql
EXEC (@sql)

IF @@error<>0
	BEGIN
	Print 'ERROR while loading Spectrum Images in spMakeSpecObjAll'
	Return
	END

Set @i = @i + 1
End

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SpecObjAll]') AND name = N'pk_SpecObjAll_specObjID')
ALTER TABLE [dbo].[SpecObjAll] DROP CONSTRAINT [pk_SpecObjAll_specObjID]

Alter Table SpecObjAll
Alter Column Img varbinary(max) NOT NULL

Drop table #SpecObjImg
*/
Drop table #SpecObjAllCsv
END

GO
--







PRINT '[spSpectro.sql]: Spectro functions/sps created'
GO
