
----------------------------- 
--  DBObjects.sql 
----------------------------- 
SET NOCOUNT ON
GO
TRUNCATE TABLE DBObjects 
GO

INSERT DBObjects VALUES('PartitionMap','U','A',' Shows the names of partitions/filegroups and their relative sizes ','  ','0');
INSERT DBObjects VALUES('FileGroupMap','U','A',' For ''big'' databases, maps big tables to their own file groups ',' In big databases we only put core objects in the primary file group.  Other objects are grouped into separate file groups.  For really big files, the indices are put in even different groups.  This table is truncated in the Task databases. ','0');
INSERT DBObjects VALUES('spTruncateFileGroupMap','P','A',' Clear the values in the FileGroupMap table ',' <PRE> EXEC spTruncateFileGroupMap 1</PRE> ','0');
INSERT DBObjects VALUES('spSetDefaultFileGroup','P','A',' Set default file group for table taken from the FileGroupMap table ',' The stored procedure looks up the tableName in the FileGroupMap table.  If it finds a match it sets the default file group as specified   for that table or index. If no mapping is found, the procedure   sets PRIMARY as the default.<br>  If the @mode parameter is ''I'', then it sets the DEFAULT to the  indexFileGroup value for the table, otherwise to the filegroup   of the table itself.<br>  <PRE> EXEC spSetDefaultFileGroup ''photoObjAll'' </PRE> ','0');
INSERT DBObjects VALUES('DataConstants','U','U',' The table stores the values of various enumerated and bitmask columns. ','','0');
INSERT DBObjects VALUES('SDSSConstants','U','U',' This table contains most relevant survey constants and their physical units ','','0');
INSERT DBObjects VALUES('StripeDefs','U','U',' This table contains the definitions of the survey layout as planned ',' The lower and upper limits of the actual stripes may differ from these  values. The actual numbers are found in the Segment and Chunk tables. ','0');
INSERT DBObjects VALUES('RunShift','U','U',' The table contains values of the various manual nu shifts for runs ',' In the early runs the telescope was sometimes not tracking  correctly. The boundaries of some of the runs had thus to be shifted  by a small amount, determined by hand. This table contains  these manual corrections. These should be applied to the  nu values derived for these runs. Only those runs are here,  for which such a correction needs to be applied. ','0');
INSERT DBObjects VALUES('ProfileDefs','U','U',' This table contains the radii for the Profiles table ',' Radii of boundaries of annuli, and number of pixels involved.   aAnn is the area of the annulus, and aDisk is the area of   the disk out to rOuter. The second column gives the first   cell in the annulus, and the third indicates if the values in   that annulus are derived from sinc shifting the image to center  it on a pixel.<br>  for details see http://www.astro.princeton.edu/~rhl/photomisc/profiles.ps ','0');
INSERT DBObjects VALUES('PhotoFlags','V','U',' Contains the PhotoFlags flag values from DataConstants as binary(8). ',' Please see the FLAGS1 and FLAGS2 entries in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('PhotoStatus','V','U',' Contains the PhotoStatus flag values from DataConstants as binary(4). ','','0');
INSERT DBObjects VALUES('CalibStatus','V','U',' Contains the CalibStatus flag values from DataConstants as binary(2). ',' Please see the CALIB_STATUS entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('InsideMask','V','U',' Contains the InsideMask flag values from DataConstants as binary(1) ','','0');
INSERT DBObjects VALUES('ImageStatus','V','U',' Contains the ImageStatus flag values from DataConstants as binary(4). ',' Please see the IMAGE_STATUS entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('ResolveStatus','V','U',' Contains the ResolveStatus flag values from DataConstants as binary(4). ',' Please see the RESOLVE_STATUS entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('PrimTarget','V','U',' Contains the PrimTarget flag values from DataConstants as binary(4) ','','0');
INSERT DBObjects VALUES('SecTarget','V','U',' Contains the SecTarget flag values from DataConstants as binary(4) ','','0');
INSERT DBObjects VALUES('SpecialTarget1','V','U',' Contains the SpecialTarget1 flag values from DataConstants as binary(4). ',' Please see the SPECIAL_TARGET1 entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('SpecialTarget2','V','U',' Contains the SpecialTarget2 flag values from DataConstants as binary(4). ',' Please see the SPECIAL_TARGET2 entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('Segue1Target1','V','U',' Contains the Segue1Target1 flag values from DataConstants as binary(4). ',' Please see the SEGUE1_TARGET1 entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('Segue2Target1','V','U',' Contains the Segue2Target1 flag values from DataConstants as binary(4). ',' Please see the SEGUE2_TARGET1 entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('Segue1Target2','V','U',' Contains the Segue1Target2 flag values from DataConstants as binary(4). ',' Please see the SEGUE1_TARGET2 entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('Segue2Target2','V','U',' Contains the Segue2Target2 flag values from DataConstants as binary(4). ',' Please see the SEGUE2_TARGET2 entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('BossTarget1','V','U',' Contains the BossTarget1 flag values from DataConstants as binary(4). ',' Please see the BOSS_TARGET1 entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('AncillaryTarget1','V','U',' Contains the AncillaryTarget1 flag values from DataConstants as binary(8). ',' Please see the ANCILLARY_TARGET1 entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('AncillaryTarget2','V','U',' Contains the AncillaryTarget2 flag values from DataConstants as binary(8). ',' Please see the ANCILLARY_TARGET2 entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('ApogeeTarget1','V','U',' Contains the ApogeeTarget1 flag values from DataConstants as binary(4). ',' Please see the APOGEE_TARGET1 entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('ApogeeTarget2','V','U',' Contains the ApogeeTarget2 flag values from DataConstants as binary(4). ',' Please see the APOGEE_TARGET2 entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('ApogeeStarFlag','V','U',' Contains the ApogeeStarFlag flag values from DataConstants as binary(4). ',' Please see the APOGEE_STARFLAG entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('ApogeeAspcapFlag','V','U',' Contains the ApogeeAspcapFlag flag values from DataConstants as binary(4). ',' Please see the APOGEE_ASPCAPFLAG entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('ApogeeParamFlag','V','U',' Contains the ApogeeParamFlag flag values from DataConstants as binary(4). ',' Please see the APOGEE_PARAMFLAG entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('ApogeeExtraTarg','V','U',' Contains the ApogeeExtraTarg flag values from DataConstants as binary(4). ',' Please see the APOGEE_EXTRATARG entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('eBossTarget0','V','U',' Contains the eBossTarget0 flag values from DataConstants as binary(4). ',' Please see the EBOSS_TARGET0 entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('SpecZWarning','V','U',' Contains the SpecZWarning flag values from DataConstants as binary(4). ',' Please see the ZWARNING entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('SpecPixMask','V','U',' Contains the SpecPixMask flag values from DataConstants as binary(4). ',' Please see the SPPIXMASK entry in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('TiMask','V','U',' Contains the TiMask flag values from DataConstants as binary(4) ','','0');
INSERT DBObjects VALUES('sdssvBossTarget0','V','U',' Contains the sdssvBossTarget0 flag values from DataConstants as binary(8). ',' Please see the FLAGS1 and FLAGS2 entries in Algorithms under Bitmasks  for further information. ','0');
INSERT DBObjects VALUES('PhotoMode','V','U',' Contains the PhotoMode enumerated values from DataConstants as int ','','0');
INSERT DBObjects VALUES('PhotoType','V','U',' Contains the PhotoType enumerated values from DataConstants as int ','','0');
INSERT DBObjects VALUES('MaskType','V','U',' Contains the MaskType enumerated values from DataConstants as int ','','0');
INSERT DBObjects VALUES('FieldQuality','V','U',' Contains the FieldQuality enumerated values from DataConstants as int ','','0');
INSERT DBObjects VALUES('PspStatus','V','U',' Contains the PspStatus enumerated values from DataConstants as int ','','0');
INSERT DBObjects VALUES('FramesStatus','V','U',' Contains the FramesStatus enumerated values from DataConstants as int ','','0');
INSERT DBObjects VALUES('HoleType','V','U',' Contains the HoleType enumerated values from DataConstants as int ','','0');
INSERT DBObjects VALUES('SourceType','V','U',' Contains the SourceType enumerated values from DataConstants as int ','','0');
INSERT DBObjects VALUES('ProgramType','V','U',' Contains the ProgramType enumerated values from DataConstants as int ','','0');
INSERT DBObjects VALUES('CoordType','V','U',' Contains the CoordType enumerated values from DataConstants as int ','','0');
INSERT DBObjects VALUES('fPhotoMode','F','U',' Returns the Mode value, indexed by name (Primary, Secondary, Family, Outside) ',' the Mode names can be found with   <br>       Select * from PhotoMode   <br>  Sample call to fPhotoMode  <samp>   <br> select top 10 *    <br> from photoObj  <br> where mode =  dbo.fPhotoMode(''PRIMARY'')  </samp>   <br> see also fPhotoModeN ','0');
INSERT DBObjects VALUES('fPhotoModeN','F','U',' Returns the Mode name, indexed by value () ',' the Mode names can be found with   <br>       Select * from PhotoMode   <br>  Sample call to fPhotoModeN  <samp>   <br> select top 10 *    <br> from photoObj  <br> where mode =  dbo.fPhotoMode(''PRIMARY'')  </samp>   <br> see also fPhotoModeN ','0');
INSERT DBObjects VALUES('fPhotoType','F','U',' Returns the PhotoType value, indexed by name (Galaxy, Star,...) ',' the PhotoType names can be found with   <br>       Select * from PhotoType   <br>  Sample call to fPhotoType.  <samp>   <br> select top 10 *    <br> from photoObj  <br> where type =  dbo.fPhotoType(''Star'')  </samp>   <br> see also fPhotoTypeN ','0');
INSERT DBObjects VALUES('fMaskType','F','U',' Returns the MaskType value, indexed by name  ',' the MaskType names can be found with   <br>       Select * from MaskType   <br>  Sample call to fMaskType.  <samp>   <br> select top 10 *    <br> from Mask  <br> where type =  dbo.fMaskType(''Star'')  </samp>   <br> see also fMaskTypeN ','0');
INSERT DBObjects VALUES('fMaskTypeN','F','U',' Returns the MaskType name, indexed by value (0=Bleeding Mask, 1=Bright Star Mask, etc.) ',' the MaskType values can be found with   <br>       Select * from MaskType   <br>  Sample call to fMaskTypeN.  <samp>   <br> select top 10 m.maskID, o.objID, dbo.fMaskTypeN(m.type) as type   <br> from Mask m JOIN MaskedObject o ON m.maskID=o.maskID  </samp>   <br> see also fMaskType ','0');
INSERT DBObjects VALUES('fPhotoTypeN','F','U',' Returns the PhotoType name, indexed by value (3-> Galaxy, 6-> Star,...) ',' the PhotoType values can be found with   <br>       Select * from PhotoType   <br>  Sample call to fPhotoTypeN.  <samp>   <br> select top 10 objID, dbo.fPhotoTypeN(type) as type   <br> from photoObj  </samp>   <br> see also fPhotoType ','0');
INSERT DBObjects VALUES('fFieldQuality','F','U',' Returns bitmask of named field quality (e.g. ACCEPTABLE, BAD, GOOD, HOLE, MISSING) ',' the fFieldQuality names can be found with   <br>       Select * from FieldQuality   <br>  Sample call to fFieldQuality.  <samp>   <br> select top 10 *    <br> from field  <br> where quality =  dbo.fFieldQuality(''ACCEPTABLE'')  </samp>   <br> see also fFieldQualityN ','0');
INSERT DBObjects VALUES('fFieldQualityN','F','U',' Returns description of quality value (e.g. ACCEPTABLE, BAD, GOOD, HOLE, MISSING) ',' the fFieldQuality values can be found with   <br>       Select * from FieldQuality  <br>  Sample call to fFieldQualityN.  <samp>   <br> select top 10 dbo.fFieldQualityN(quality) as quality  <br> from field  </samp>   <br> see also fFieldQuality ','0');
INSERT DBObjects VALUES('fPspStatus','F','U',' Returns the PspStatus value, indexed by name ',' the  PspStatus values can be found with   <br>       Select * from PspStatus    <br>  Sample call to fPspStatus.  <samp>   <br> select top 10 *  <br> from field  <br> where status_r = dbo.fPspStatus(''PSF_OK'')  </samp>   <br> see also fPspStatusN ','0');
INSERT DBObjects VALUES('fPspStatusN','F','U',' Returns the PspStatus name, indexed by value ',' the  PspStatus values can be found with   <br>       Select * from PspStatus   <br>  Sample call to fPspStatusN.  <samp>   <br> select top 10 dbo.fPspStatusN(status_r) as status_r  <br> from field  </samp>   <br> see also PspStatus ','0');
INSERT DBObjects VALUES('fFramesStatus','F','U',' Returns the FramesStatus value, indexed by name ',' the  FramesStatus values can be found with   <br>       Select * from FramesStatus    <br>  Sample call to fFramesStatus.  <samp>   <br> select top 10 *  <br> from field  <br> where status_r = dbo.fFramesStatus(''OK'')  </samp>   <br> see also fFramesStatusN ','0');
INSERT DBObjects VALUES('fFramesStatusN','F','U',' Returns the FramesStatus name, indexed by value ',' the  FramesStatus values can be found with   <br>       Select * from FramesStatus   <br>  Sample call to fFramesStatusN.  <samp>   <br> select top 10 dbo.fFramesStatusN(framesstatus) as framesstatus  <br> from field  </samp>   <br> see also FramesStatus ','0');
INSERT DBObjects VALUES('fHoleType','F','U',' Return the HoleType value, indexed by name ',' the HoleTypes can be found with   <br>       Select * from HoleType  <br>  Sample call to fHoleType.  <samp>   <br> select top 10  *  <br> from HoleObj  <br> where holeType = dbo.fHoleType(''OBJECT'')  </samp>   <br> see also fHoleTypeN ','0');
INSERT DBObjects VALUES('fHoleTypeN','F','U',' Return the HoleType name, indexed by value ',' the HoleTypes can be found with   <br>       Select * from HoleType  <br>  Sample call to fHoleTypeN.  <samp>   <br> select top 10 dbo.fHoleTypeN(holeType) as holeType  <br> from HoleObj  </samp>   <br> see also fHoleType ','0');
INSERT DBObjects VALUES('fSourceType','F','U',' Return the SourceType value, indexed by name ',' the SourceTypes can be found with   <br>       Select * from SourceType  <br>  Sample call to fSourceType.  <samp>   <br> select top 10  *  <br> from TiledTarget  <br> where sourceType = dbo.fSourceType(''GALAXY'')  </samp>   <br> see also fSourceTypeN ','0');
INSERT DBObjects VALUES('fSourceTypeN','F','U',' Return the SourceType name, indexed by value ',' the SourceTypes can be found with   <br>       Select * from SourceType  <br>  Sample call to fSourceTypeN.  <samp>   <br> select top 10 dbo.fSourceTypeN(sourceType) as sourceType  <br> from TiledTarget  </samp>   <br> see also fSourceType ','0');
INSERT DBObjects VALUES('fProgramType','F','U',' Return the ProgramType value, indexed by name ',' the ProgramTypes can be found with   <br>       Select * from ProgramType  <br>  Sample call to fProgramType.  <samp>   <br> select top 10  *  <br> from Tile  <br> where programType = dbo.fProgramType(''MAIN'')  </samp>   <br> see also fProgramTypeN ','0');
INSERT DBObjects VALUES('fProgramTypeN','F','U',' Return the ProgramType name, indexed by value ',' the ProgramTypes can be found with   <br>       Select * from ProgramType  <br>  Sample call to fProgramTypeN.  <samp>   <br> select top 10 dbo.fProgramTypeN(programType) as programType  <br> from Tile  </samp>   <br> see also fProgramType ','0');
INSERT DBObjects VALUES('fCoordType','F','U',' Return the CoordType value, indexed by name ',' the CoordTypes can be found with   <br>       Select * from CoordType  <br>  Sample call to fCoordType.  <samp>   <br> select top 10  *  <br> from TilingBoundary  <br> where coordType = dbo.fCoordType(''RA_DEC'')  </samp>   <br> see also fCoordTypeN ','0');
INSERT DBObjects VALUES('fCoordTypeN','F','U',' Return the CoordType name, indexed by value ',' the CoordTypes can be found with   <br>       Select * from CoordType  <br>  Sample call to fCoordTypeN.  <samp>   <br> select top 10 dbo.fCoordTypeN(coordType) as coordType  <br> from TilingBoundary  </samp>   <br> see also fCoordType ','0');
INSERT DBObjects VALUES('fFieldMask','F','U',' Returns mask value for a given name (e.g. ''seeing'') ',' the FieldMask values can be found with Select * from FieldMask.   <br>  Sample call to find fields with good seeing.  <samp>   <br> select top 10 *   <br> from field   <br> where goodMask & dbo.fFieldMask(''Seeing'') > 0   </samp>   <br> see also fFieldMaskN ','0');
INSERT DBObjects VALUES('fFieldMaskN','F','U',' Returns description of mask value (e.g. ''SEEING PSF'') ',' the FieldMask values can be found with Select * from FieldMask.   <br>  Sample call to field masks.  <samp>   <br> select top 10   <br> 	dbo.fFieldMaskN(goodMask) as good,  <br> 	dbo.fFieldMaskN(acceptableMask) as acceptable,   <br> 	dbo.fFieldMaskN(badMask) as bad    <br> from field  </samp>   <br> see also fFieldMask ','0');
INSERT DBObjects VALUES('fPhotoFlags','F','U',' Returns the PhotoFlags value corresponding to a name ',' the photoFlags can be shown with Select * from PhotoFlags   <br>  Sample call to find photo objects with saturated pixels is  <samp>   <br> select top 10 *   <br> from photoObj   <br> where flags & dbo.fPhotoFlags(''SATURATED'') > 0   </samp>   <br> see also fPhotoDescription ','0');
INSERT DBObjects VALUES('fPhotoFlagsN','F','U',' Returns the expanded PhotoFlags corresponding to the status value as a string ',' the photoFlags can be shown with Select * from PhotoFlags   <br>  Sample call to display the flags of some photoObjs  <samp>   <br> select top 10 objID, dbo.fPhotoFlagsN(flags) as flags  <br> from photoObj   </samp>   <br> see also fPhotoFlags ','0');
INSERT DBObjects VALUES('fPhotoStatus','F','U',' Returns the PhotoStatus flag value corresponding to a name ',' the photoStatus values can be shown with Select * from PhotoStatus   <br>  Sample call to find ''good'' photo objects is  <samp>   <br> select top 10 *   <br> from photoObj   <br> where status & dbo.fPhotoStatus(''GOOD'') > 0   </samp>   <br> see also fPhotoStatusN ','0');
INSERT DBObjects VALUES('fPhotoStatusN','F','U',' Returns the string describing to the status flags in words ',' the photoStatus values can be shown with Select * from PhotoStatus    <br>  Sample call to fPhotoStatusN:   <samp>   <br> select top 10 dbo.fPhotoStatusN(status) as status  <br> from photoObj  </samp>   <br> see also fPhotoStatus ','0');
INSERT DBObjects VALUES('fCalibStatus','F','U',' Returns the CalibStatus flag value corresponding to a name ',' The CalibStatus values can be shown with Select * from CalibStatus   <br>  Sample call to find photometric objects is  <samp>   <br> select top 10 modelMag_r   <br> from PhotoObj    <br> where   <br> <dd><dd>(calibStatus_r & dbo.fCalibStatus(''PHOTOMETRIC'') > 0)   </samp>   <br> see also fCalibStatusN ','0');
INSERT DBObjects VALUES('fCalibStatusN','F','U',' Returns the string describing to the calibration status flags in words ',' The CalibStatus values can be shown with Select * from CalibStatus    <br>  Sample call to fCalibStatusN:   <samp>   <br> select top 10 dbo.fCalibStatusN(calibStatus_r) as calstatus_r  <br> from PhotoObj  </samp>   <br> see also fCalibStatus ','0');
INSERT DBObjects VALUES('fInsideMask','F','U',' Returns the InsideMask value corresponding to a name ',' The InsideMask values can be shown with Select * from InsideMask   <br>  Sample call to find photo objects which are masked  <samp>   <br> select top 10 objID, insideMask   <br> from PhotoObj   <br> where (dbo.fInsideMask(''INMASK_BLEEDING'') & insideMask) > 0   </samp>   <br> see also fInsideMaskN ','0');
INSERT DBObjects VALUES('fInsideMaskN','F','U',' Returns the expanded InsideMask corresponding to the bits, as a string ',' the InsideMask can be shown with Select * from InsideMask  <br>  Sample call to display the insideMask setting of some photoObjs  <samp>   <br> select top 10 objID, dbo.fInsideMaskN(insideMask) as mask  <br> from PhotoObj   </samp>   <br> see also fInsideMask ','0');
INSERT DBObjects VALUES('fImageStatus','F','U',' Return the ImageStatus flag value, indexed by name ',' the ImageStatus values can be shown with Select * from ImageStatus   <br>  Sample call to fImageStatus  <samp>   <br> select top 10 ???  <br> from   ?????   <br> where  ??? = dbo.fImageStatus(''SUBTRACTED'')    </samp>   <br> see also fImageStatusN ','0');
INSERT DBObjects VALUES('fImageStatusN','F','U',' Return the expanded ImageStatus corresponding to the flag value as a string ',' the ImageStatus values can be shown with Select * from ImageStatus   <br>  Sample call to fImageStatusN  <samp>   <br> select top 10 objID, dbo.fImageStatus(mask) as mask  <br> from   ?????   </samp>   <br> see also fImageStatus  ','0');
INSERT DBObjects VALUES('fResolveStatus','F','U',' Return the ResolveStatus flag value, indexed by name ',' the ResolveStatus values can be shown with Select * from ResolveStatus   <br>  Sample call to fResolveStatus  <samp>   <br> select top 10 objID, dbo.fResolveStatusN(resolveStatus)  <br> from   PhotoObj  <br> where  resolveStatus & dbo.fResolveStatus(''RUN_EDGE'') > 0    </samp>   <br> see also fResolveStatusN ','0');
INSERT DBObjects VALUES('fResolveStatusN','F','U',' Return the expanded ResolveStatus corresponding to the flag value as a string ',' the ResolveStatus values can be shown with Select * from ResolveStatus   <br>  Sample call to fResolveStatusN  <samp>   <br> select top 10 objID, dbo.fResolveStatus(mask) as rstatus  <br> from  PhotoObj  </samp>   <br> see also fResolveStatus  ','0');
INSERT DBObjects VALUES('fPrimTarget','F','U',' Returns the PrimTarget value corresponding to a name ',' the photo and spectro primTarget flags can be shown with Select * from PrimTarget   <br>  Sample call to find photo objects that are Galaxy primary targets  <samp>   <br> select top 10 *   <br> from photoObj   <br> where primTarget & dbo.fPrimTarget(''TARGET_GALAXY'') > 0   </samp>   <br> see also fSecTarget ','0');
INSERT DBObjects VALUES('fPrimTargetN','F','U',' Returns the expanded PrimTarget corresponding to the flag value as a string ',' the photo and spectro primTarget flags can be shown with Select * from PrimTarget   <br>  Sample call to show the target flags of some photoObjects is  <samp>   <br> select top 10 objId, dbo.fPriTargetN(secTarget) as priTarget  <br> from photoObj   </samp>   <br> see also fPrimTarget, fSecTargetN ','0');
INSERT DBObjects VALUES('fSecTarget','F','U',' Returns the SecTarget value corresponding to a name ',' the photo and spectro secTarget flags can be shown with Select * from SecTarget   <br>  Sample call to find photo objects that are Galaxy primary targets  <samp>   <br> select top 10 *   <br> from photoObj   <br> where secTarget & dbo.fsecTarget(''TARGET_SPECTROPHOTO_STD'') > 0   </samp>   <br> see also fPrimTarget, fSecTargetN ','0');
INSERT DBObjects VALUES('fSecTargetN','F','U',' Returns the expanded SecTarget corresponding to the flag value as a string ',' the photo and spectro secTarget flags can be shown with Select * from SecTarget   <br>  Sample call to find photo objects that are Galaxy primary targets  <samp>   <br> select top 10 objId, dbo.fSecTargetN(secTarget) as secTarget  <br> from photoObj   </samp>   <br> see also fSecTarget, fPrimTarget ','0');
INSERT DBObjects VALUES('fSpecialTarget1','F','U',' Returns the SpecialTarget1 value corresponding to a name ',' the spectro specialTarget1 flags can be shown with Select * from SpecialTarget1   <br>  Sample call to find spec objects that are low-redshift galaxy special primary targets  <samp>   <br> select top 10 *   <br> from specObj   <br> where specialTarget1 & dbo.fSpecialTarget1(''LOWZ_GALAXY'') > 0   </samp>   <br> see also fSecTarget ','0');
INSERT DBObjects VALUES('fSpecialTarget1N','F','U',' Returns the expanded SpecialTarget1 corresponding to the flag value as a string ',' The spectro specialTarget1 flags can be shown with Select * from SpecialTarget1   <br>  Sample call to show the special target flags of some spec objects is  <samp>   <br> select top 10 specObjId, dbo.fSpecialTarget1N(specialTarget1) as specialTarget1  <br> from specObj   </samp>   <br> see also fSpecialTarget1, fSecTargetN ','0');
INSERT DBObjects VALUES('fSpecialTarget2','F','U',' Returns the SpecialTarget2 value corresponding to a name ',' the spectro specialTarget2 flags can be shown with Select * from SpecialTarget2   <br>  Sample call to find spec objects that are low-redshift galaxy special primary targets  <samp>   <br> select top 10 *   <br> from specObj   <br> where specialTarget2 & dbo.fSpecialTarget2(''GUIDE_STAR'') > 0   </samp>   <br> see also fSecTarget ','0');
INSERT DBObjects VALUES('fSpecialTarget2N','F','U',' Returns the expanded SpecialTarget2 corresponding to the flag value as a string ',' The spectro specialTarget2 flags can be shown with Select * from SpecialTarget2   <br>  Sample call to show the special target flags of some spec objects is  <samp>   <br> select top 10 specObjId, dbo.fSpecialTarget2N(specialTarget2) as specialTarget2  <br> from specObj   </samp>   <br> see also fSpecialTarget2, fSecTargetN ','0');
INSERT DBObjects VALUES('fBossTarget1','F','U',' Returns the BossTarget1 value corresponding to a name ',' the spectro specialTarget1 flags can be shown with Select * from BossTarget1   <br>  Sample call to find spec objects that are low-redshift galaxy special primary targets  <samp>   <br> select top 10 *   <br> from specObj   <br> where BossTarget1 & dbo.fBossTarget1(''LOWZ_GALAXY'') > 0   </samp>   <br> see also fSecTarget ','0');
INSERT DBObjects VALUES('fBossTarget1N','F','U',' Returns the expanded BossTarget1 corresponding to the flag value as a string ',' The spectro BossTarget1 flags can be shown with Select * from BossTarget1   <br>  Sample call to show the special target flags of some spec objects is  <samp>   <br> select top 10 specObjId, dbo.fBossTarget1N(specialTarget1) as specialTarget1  <br> from specObj   </samp>   <br> see also fBossTarget1, fSecTargetN ','0');
INSERT DBObjects VALUES('fAncillaryTarget1','F','U',' Returns the AncillaryTarget1 value corresponding to a name ',' the spectro ancillaryTarget1 flags can be shown with Select * from AncillaryTarget1   <br>  Sample call to find spec objects that are low-redshift galaxy ancillary primary targets  <samp>   <br> select top 10 *   <br> from specObj   <br> where ancillary_target1 & dbo.fAncillaryTarget1(''LOWZ_GALAXY'') > 0   </samp>   <br> see also fSecTarget ','0');
INSERT DBObjects VALUES('fAncillaryTarget1N','F','U',' Returns the expanded AncillaryTarget1 corresponding to the flag value as a string ',' The spectro ancillaryTarget1 flags can be shown with Select * from AncillaryTarget1   <br>  Sample call to show the ancillary target flags of some spec objects is  <samp>   <br> select top 10 specObjId, dbo.fAncillaryTarget1N(ancillary_target1) as ancillaryTarget1  <br> from specObj   <br> where ancillary_target1 > 0  </samp>   <br> see also fAncillaryTarget1, fSecTargetN ','0');
INSERT DBObjects VALUES('fAncillaryTarget2','F','U',' Returns the AncillaryTarget2 value corresponding to a name ',' the spectro ancillaryTarget2 flags can be shown with Select * from AncillaryTarget2   <br>  Sample call to find high-z quasar candidate spec objects that are BOSS ancillary targets  <samp>   <br> select top 10 *   <br> from specObj   <br> where ancillary_target2 & dbo.fAncillaryTarget2(''HIZQSOIR'') > 0   </samp>   <br> see also fAncillaryTarget1 ','0');
INSERT DBObjects VALUES('fAncillaryTarget2N','F','U',' Returns the expanded AncillaryTarget2 corresponding to the flag value as a string ',' The spectro ancillaryTarget2 flags can be shown with Select * from AncillaryTarget2   <br>  Sample call to show the ancillary target flags of some spec objects is  <samp>   <br> select top 10 specObjId, dbo.fAncillaryTarget2N(ancillary_target2) as ancillaryTarget2  <br> from specObj   <br> where ancillary_target2 > 0  </samp>   <br> see also fAncillaryTarget2, fSecTargetN ','0');
INSERT DBObjects VALUES('fSegue1Target1','F','U',' Returns the Segue1Target1 value corresponding to a name ',' the spectro Segue1Target1 flags can be shown with Select * from Segue1Target1   <br>  Sample call to find spec objects that are cool white dwarf Segue1 primary targets  <samp>   <br> select top 10 *   <br> from specObj   <br> where Segue1Target1 & dbo.fSegue1Target1(''SEGUE1_CWD'') > 0   </samp>   <br> see also fSecTarget ','0');
INSERT DBObjects VALUES('fSegue1Target1N','F','U',' Returns the expanded Segue1Target1 corresponding to the flag value as a string ',' The spectro Segue1Target1 flags can be shown with Select * from Segue1Target1   <br>  Sample call to show the Segue1 target flags of some spec objects is  <samp>   <br> select top 10 specObjId, dbo.fSegue1Target1N(Segue1Target1) as Segue1Target1  <br> from specObj   </samp>   <br> see also fSegue1Target1, fSecTargetN ','0');
INSERT DBObjects VALUES('fSegue2Target1','F','U',' Returns the Segue2Target1 value corresponding to a name ',' the spectro Segue2Target1 flags can be shown with Select * from Segue2Target1   <br>  Sample call to find spec objects that are red K-giant star SEGUE-2 primary targets  <samp>   <br> select top 10 *   <br> from specObj   <br> where Segue2Target1 & dbo.fSegue2Target1(''SEGUE2_REDKG'') > 0   </samp>   <br> see also fSecTarget ','0');
INSERT DBObjects VALUES('fSegue2Target1N','F','U',' Returns the expanded Segue2Target1 corresponding to the flag value as a string ',' The spectro Segue2Target1 flags can be shown with Select * from Segue2Target1   <br>  Sample call to show the SEGUE-2 target flags of some spec objects is  <samp>   <br> select top 10 specObjId, dbo.fSegue2Target1N(Segue2Target1) as segue2Target1  <br> from specObj   </samp>   <br> see also fSegue2Target1, fSecTargetN ','0');
INSERT DBObjects VALUES('fSegue1Target2','F','U',' Returns the Segue1Target2 value corresponding to a name ',' the spectro Segue1Target2 flags can be shown with Select * from Segue1Target2   <br>  Sample call to find spec objects that are cool white dwarf Segue1 primary targets  <samp>   <br> select top 10 *   <br> from specObj   <br> where Segue1Target2 & dbo.fSegue1Target2(''SEGUE1_REDDENING'') > 0   </samp>   <br> see also fSecTarget ','0');
INSERT DBObjects VALUES('fSegue1Target2N','F','U',' Returns the expanded Segue1Target2 corresponding to the flag value as a string ',' The spectro Segue1Target2 flags can be shown with Select * from Segue1Target2   <br>  Sample call to show the Segue1 target flags of some spec objects is  <samp>   <br> select top 10 specObjId, dbo.fSegue1Target2N(Segue1Target2) as Segue1Target2  <br> from specObj   </samp>   <br> see also fSegue1Target2, fSecTargetN ','0');
INSERT DBObjects VALUES('fSegue2Target2','F','U',' Returns the Segue2Target2 value corresponding to a name ',' the spectro Segue2Target2 flags can be shown with Select * from Segue2Target2   <br>  Sample call to find spec objects that are red K-giant star SEGUE-2 primary targets  <samp>   <br> select top 10 *   <br> from specObj   <br> where Segue2Target2 & dbo.fSegue2Target2(''SEGUE2_REDDENING'') > 0   </samp>   <br> see also fSecTarget ','0');
INSERT DBObjects VALUES('fSegue2Target2N','F','U',' Returns the expanded Segue2Target2 corresponding to the flag value as a string ',' The spectro Segue2Target2 flags can be shown with Select * from Segue2Target2   <br>  Sample call to show the SEGUE-2 target flags of some spec objects is  <samp>   <br> select top 10 specObjId, dbo.fSegue2Target2N(Segue2Target2) as segue2Target2  <br> from specObj   </samp>   <br> see also fSegue2Target2, fSecTargetN ','0');
INSERT DBObjects VALUES('fApogeeTarget1','F','U',' Returns the ApogeeTarget1 value corresponding to a name ',' the spectro apogeeTarget1 flags can be shown with Select * from ApogeeTarget1   <br>  Sample call to find APOGEE extended objects  <samp>   <br> select top 10 *   <br> from apogeeStar   <br> where apogee_target1 & dbo.fApogeeTarget1(''APOGEE_EXTENDED'') > 0   </samp>   <br> see also fApogeeTarget1N. fApogeeTarget2 ','0');
INSERT DBObjects VALUES('fApogeeTarget1N','F','U',' Returns the expanded ApogeeTarget1 corresponding to the flag value as a string ',' The spectro apogeeTarget1 flags can be shown with Select * from ApogeeTarget1   <br>  Sample call to show the apogee target flags of some APOGEE objects is  <samp>   <br> select top 10 apogee_id, dbo.fApogeeTarget1N(apogee_target1) as apogeeTarget1  <br> from apogeeVisit  </samp>   <br> see also fApogeeTarget1, fApogeeTarget2 ','0');
INSERT DBObjects VALUES('fApogeeTarget2','F','U',' Returns the ApogeeTarget2 value corresponding to a name ',' the spectro ApogeeTarget2 flags can be shown with Select * from ApogeeTarget2   <br>  Sample call to find radial velocity standard apogee spectra  <samp>   <br> select top 10 *   <br> from apogeeStar  <br> where apogee_target2 & dbo.fApogeeTarget2(''APOGEE_RV_STANDARD'') > 0   </samp>   <br> see also fApogeeTarget2N, fApogeeTarget1 ','0');
INSERT DBObjects VALUES('fApogeeTarget2N','F','U',' Returns the expanded ApogeeTarget2 corresponding to the flag value as a string ',' The spectro apogeeTarget2 flags can be shown with Select * from ApogeeTarget2   <br>  Sample call to show the apogee target flags of some APOGEEobjects is  <samp>   <br> select top 10 aogee_id, dbo.fApogeeTarget2N(apogee_target2) as apogeeTarget2  <br> from apogeeVisit  </samp>   <br> see also fApogeeTarget2, fApogeeTarget1N ','0');
INSERT DBObjects VALUES('fApogeeStarFlag','F','U',' Returns the ApogeeStarFlag value corresponding to a name ',' the spectro ApogeeStarFlag flags can be shown with Select * from ApogeeStarFlag   <br>  Sample call to find APOGEE   <samp>   <br> select top 10 *   <br> from apogeeStar  <br> where starFlag & dbo.fApogeeStarFlag(''LOW_SNR'') > 0   </samp>   <br> see also fApogeeTarget1 ','0');
INSERT DBObjects VALUES('fApogeeStarFlagN','F','U',' Returns the expanded ApogeeStarFlag corresponding to the flag value as a string ',' The spectro apogeeTarget2 flags can be shown with Select * from ApogeeStarFlag   <br>  Sample call to show the apogee target flags of some spec objects is  <samp>   <br> select top 10 apstar_id, dbo.fApogeeStarFlagN(apogee_starflag) as apogeeStarFlag  <br> from apogeeStar  </samp>   <br> see also fApogeeStarFlag, fApogeeTarget1N ','0');
INSERT DBObjects VALUES('fApogeeAspcapFlag','F','U',' Returns the ApogeeAspcapFlag value corresponding to a name ',' the spectro ApogeeAspcapFlag flags can be shown with Select * from ApogeeAspcapFlag   <br>  Sample call to find APOGEE   <samp>   <br> select top 10 *   <br> from aspcapStar  <br> where ApogeeAspcapFlag & dbo.fApogeeAspcapFlag(''CHI2_BAD'') > 0   </samp>   <br> see also fApogeeTarget1 ','0');
INSERT DBObjects VALUES('fApogeeAspcapFlagN','F','U',' Returns the expanded ApogeeAspcapFlag corresponding to the flag value as a string ',' The APOGEE ASPCAP flags can be shown with Select * from ApogeeAspcapFlag   <br>  Sample call to show the APOGEE ASPCAP flags of some APOGEE objects is  <samp>   <br> select top 10 apstar_id, dbo.fApogeeAspcapFlagN(aspcap_flag) as apogeeAspcapFLag  <br> from aspcapStar  </samp>   <br> see also fApogeeAspcapFlag, fApogeeTarget1N ','0');
INSERT DBObjects VALUES('fApogeeParamFlag','F','U',' Returns the ApogeeParamFlag value corresponding to a name ',' The spectro ApogeeParamFlag flags can be shown with Select * from ApogeeParamFlag   <br>  Sample call to find APOGEE aspcapStar objects with one of the parameters  (alpha_m) might have unreliable calibration:  <samp>   <br> select top 10 apStar_id, dbo.fApogeeParamFlagN(alpha_m_flag) as flags  <br> from aspcapStar  <br> where alpha_m_flag & dbo.fApogeeParamFlag(''CALRANGE_WARN'') > 0   </samp>   <br> see also fApogeeParamFlagN ','0');
INSERT DBObjects VALUES('fApogeeParamFlagN','F','U',' Returns the expanded ApogeeParamFlag names corresponding to the flag  value as a string ',' The spectro ApogeeParamFlag flags can be shown with Select * from ApogeeParamFlag   <br>  Sample call to show the param flags of aspcapStar objects:  <samp>   <br> select top 10 apstar_id, dbo.fApogeeParamFlagN(alpha_m_flag) as a  <br> from aspcapStar  </samp>   <br> see also fApogeeParamFlag ','0');
INSERT DBObjects VALUES('fApogeeExtraTarg','F','U',' Returns the ApogeeExtraTarg value corresponding to a name ',' the spectro ApogeeExtraTarg flags can be shown with Select * from ApogeeExtraTarg   <br>  Sample call to find APOGEE   <samp>   <br> select top 10 *   <br> from apogeeVisit  <br> where extraTarg & dbo.fApogeeExtraTarg(''TELLURIC'') > 0   </samp>   <br> see also fApogeeExtraTargN, fApogeeTarget1 ','0');
INSERT DBObjects VALUES('fApogeeExtraTargN','F','U',' Returns the expanded ApogeeExtraTarg corresponding to the flag value as a string ',' The APOGEE extraTarg flags can be shown with Select * from ApogeeExtraTarg   <br>  Sample call to show the apogee target flags of some spec objects is  <samp>   <br> select top 10 visit_id, dbo.fApogeeExtraTargN(extraTarg) as apogeeTarget2  <br> from apogeeVisit  </samp>   <br> see also fApogeeExtraTarg, fApogeeTarget1N ','0');
INSERT DBObjects VALUES('fEbossTarget0','F','U',' Returns the EbossTarget0 value corresponding to a name ',' the spectro EbossTarget0 flags can be shown with Select * from EbossTarget0   <br>  Sample call to find spec objects that are known QSOs from previous surveys is  <samp>   <br> select top 10 *   <br> from specObj   <br> where eboss_target0 & dbo.fEbossTarget0(''QSO_KNOWN'') > 0   </samp>  ','0');
INSERT DBObjects VALUES('fEbossTarget0N','F','U',' Returns the expanded EbossTarget0 corresponding to the flag value as a string ',' The spectro EbossTarget0 flags can be shown with Select * from EbossTarget0   <br>  Sample call to show the EBOSS target0 flags of some spec objects is  <samp>   <br> select top 10 specObjId, dbo.fEbossTarget0N(eboss_target0) as EbossTarget0  <br> from specObj   </samp>   <br> see also fEbossTarget0 ','0');
INSERT DBObjects VALUES('fSpecZWarning','F','U',' Return the SpecZWarning value, indexed by name ',' the specZWarning values can be shown with Select * from SpecZWarning   <br>  Sample call to find spec objects that do not have warnings  <samp>   <br> select top 10 *   <br> from   specObj   <br> where  zWarning = dbo.fSpecZWarning(''OK'')    </samp>   <br> see also fSpecZWarningN ','0');
INSERT DBObjects VALUES('fSpecZWarningN','F','U',' Return the expanded SpecZWarning corresponding to the flag value as a string ',' the specZWarning values can be shown with Select * from SpecZWarning   <br>  Sample call to find the warnings of some Spec objects     <samp>   <br> select top 10 objID,  dbo.fSpecZWarningN(zWarning) as warning  <br> from specObj   </samp>   <br> see also fSpecZWarning ','0');
INSERT DBObjects VALUES('fSpecPixMask','F','U',' Return the SpecPixMask value, indexed by name ',' the specPixMask values can be shown with Select * from SpecPixMask   <br>  Sample call to find spec objects that do not have any pixel with a bit set in its ANDMASK.  <samp>   <br> select top 10 *   <br> from   specObj   <br> where  anyAndMask = dbo.fSpecPixMask(''OK'')    </samp>   <br> see also fSpecPixMaskN ','0');
INSERT DBObjects VALUES('fSpecPixMaskN','F','U',' Return the expanded SpecPixMask corresponding to the flag value as a string ',' the specPixMask values can be shown with Select * from SpecPixMask   <br>  Sample call to find which pixels have bits set in the ORMASK of some Spec objects     <samp>   <br> select top 10 objID,  dbo.fSpecPixMaskN(anyOrMask) as warning  <br> from specObj   </samp>   <br> see also fSpecPixMask ','0');
INSERT DBObjects VALUES('fTiMask','F','U',' Returns the TiMask value corresponding to a name ',' the TiMask values can be found with   <br>       Select * from TiMask  <br>  Sample call to fTiMask.  <samp>   <br> select top 10  *  <br> from TilingInfo  <br> where tiMask = dbo.fTiMask(''AR_TMASK_TILED'')  </samp>   <br> see also fTiMaskN ','0');
INSERT DBObjects VALUES('fTiMaskN','F','U',' Returns the expanded TiMask corresponding to the flag value as a string ',' the TiMask values can be found with   <br>       Select * from TiMask  <br>  Sample call to fTiMaskN.  <samp>   <br> select top 10 dbo.fTiMaskN(tiMask) as tiMask  <br> from TilingInfo  </samp>   <br> see also fTiMask ','0');
INSERT DBObjects VALUES('fSdssVBossTarget0','F','U',' Returns the sdssvBossTarget0 value corresponding to a name ',' the sdssvBossTarget0 values can be shown with Select * from sdssvBossTarget0  <br>  Sample call to find photo objects with saturated pixels is  <samp>   <br> select top 10 *   <br> from spAll   <br> where sdssv_boss_target0 & dbo.fSdssVBossTarget0(''OPS_STD_BOSS'') > 0   </samp>   <br> see also fSdssVBossTarget0N ','0');
INSERT DBObjects VALUES('fSdssVBossTarget0N','F','U',' Returns the expanded sdssvBossTarget0 corresponding to the status value as a string ',' the photoFlags can be shown with Select * from sdssvBossTarget0   <br>  Sample call to display the flags of some photoObjs  <samp>   <br> select top 10 objID, dbo.fSdssVBossTarget0N(sdssv_boss_target0) as targetflags  <br> from spAll   </samp>   <br> see also fSdssVBossTarget0 ','0');
INSERT DBObjects VALUES('fPhotoDescription','F','U',' Returns a string indicating Object type and object flags ',' <PRE> select top 10 dbo.fPhotoDescription(objID) from PhotoObj </PRE> ','0');
INSERT DBObjects VALUES('fSpecDescription','F','U',' Returns a string indicating class, status and zWarning for a specObj ',' <PRE> select top 10 dbo.fSpecDescription(specObjID) from SpecObjAll </PRE> ','0');
INSERT DBObjects VALUES('SiteDBs','U','U',' Table containing the list of DBs at this CAS site. ',' The SiteDBs table contains the name, short description   and status of each db available for user access in this   CAS server.  This is used to auto-generate the list of  available user databases on the SkyServer front page  (at least for the collab and astro sites). ','0');
INSERT DBObjects VALUES('RecentQueries','U','U',' Record the ipAddr and timestamps of the last n queries ',' Query log table to record last n query IPs and timestamps so   that queries can be restricted to a certain number per minute per  IP to prevent crawlers from hogging the system (see spExecuteSQL). ','0');
INSERT DBObjects VALUES('SkipFinishPhases','U','A',' List the FINISH step phases that should be skipped ',' For various reasons (especially in incremental loading mode), it  is necessary to skip one or more phases in spFinishStep.  This  table provides a way to do that by listing those phase names here.  This is an admin-only table, not for user consumption. ','0');
INSERT DBObjects VALUES('SiteConstants','U','U',' Table holding site specific constants ','','0');
INSERT DBObjects VALUES('DBObjects','U','U',' Every SkyServer database object has a one line description in this table ','','0');
INSERT DBObjects VALUES('DBColumns','U','U',' Every column of every table has a description in this table ','','0');
INSERT DBObjects VALUES('DBViewCols','U','U',' The columns of each view are stored for the auto-documentation ',' * means that every column from the  parent is propagated. ','0');
INSERT DBObjects VALUES('History','U','U',' Contains the detailed history of schema changes ',' The changes are tracked by module ','0');
INSERT DBObjects VALUES('Inventory','U','U',' Contains the detailed inventory of database objects ',' The objects are tracked by module ','0');
INSERT DBObjects VALUES('Dependency','U','U',' Contains the detailed inventory of database objects ',' The objects are tracked by module ','0');
INSERT DBObjects VALUES('PubHistory','U','A',' This table keeps the record of publishing into a table ',' this table only gets written into if this is a destination database.  The table contains the names of the tables which were published into  The table is wrttien by the publisher. It can be compared at the end  to the contents of the Diagnostics table. ','0');
INSERT DBObjects VALUES('LoadHistory','U','U',' Tracks the loading history of the database ',' Binds the loadversion value to dates and Task names  ','0');
INSERT DBObjects VALUES('Diagnostics','U','A',' This table stores a full diagnostic snapshot of the database. ',' The table contains the names of all the tables, views,  stored procedures and user defined functions in the database.  We leave out the Diagnostics itself, QueryResults and LoadEvents, etc  these can be dynamically updated. We compute the row counts  for each table and view. This is generated by running the  stored procedure spMakeDiagnostics. The table was  replicated upon the creation of the database into SiteDiagnostics. ','0');
INSERT DBObjects VALUES('SiteDiagnostics','U','U',' This table stores the full diagnostic snapshot after the last revision ',' The table contains the names of all the tables, views,  stored procedures and user defined functions in the database.  We leave out the Diagnostics itself, QueryResults and LoadEvents,  these can be dynamically updated. This was generated from the  Diagnostics table when the DB was created. ','0');
INSERT DBObjects VALUES('spNewPhase','P','A',' Wraps the loadsupport spNewPhase procedure for local use ',' If @taskid=0, only prints the message ','0');
INSERT DBObjects VALUES('spStartStep','P','A',' Wraps the loadsupport spStartStep procedure for local use ',' If @taskid=0, only prints the message, and returns 1 as @stepid ','0');
INSERT DBObjects VALUES('spEndStep','P','A',' Wraps the loadsupport spEndStep procedure for local use ',' If @taskid=0, only prints the message ','0');
INSERT DBObjects VALUES('IndexMap','U','A',' Table containing the definition of all indices ',' Contains all information necessary to build the indices  including the list of fields. Drives both index creation   and data validation. ','0');
INSERT DBObjects VALUES('fIndexName','F','A',' Builds the name of the index from its components ',' Used by the index build and check procedures.  <li>If ''K'' then pk_Tablename_fieldList  <li>If ''F'' then fk_TableName_fieldList_Key  <li>If ''I'' then i_TableName_fieldlist,  <br> truncated to 32 characters. ','0');
INSERT DBObjects VALUES('spIndexCreate','P','A',' Creates primary keys, foreign keys, and indices ',' Works for all user tables, views, procedures and functions   The default user is test, default access is U  <BR>  <li> taskID  int   	-- number of task causing this   <li> stepID  int   	-- number of step causing this   <li> tableName  varchar(1000)    -- name of table to get index or foreign key  <li> fieldList  varchar(1000)    -- comma separated list of fields in key (no blanks)  <li> foreignkey varchar(1000)    -- foreign key (f(a,b,c))  <br> return value: 0: OK , > 0 : count of errors.  <br> Example<br>   <samp>  exec spCreateIndex @taskID, @stepID, 32   </samp> ','0');
INSERT DBObjects VALUES('spIndexCreate_print','P','A',' Generates sql to create primary keys, foreign keys, and indices ',' THIS DOES NOT ACTUALLY GENERATE THE INDEX!   It just prints the generated sql which can then be run on an ad-hoc basis  Works for all user tables, views, procedures and functions   The default user is test, default access is U  <BR>  <li> taskID  int   	-- number of task causing this   <li> stepID  int   	-- number of step causing this   <li> indexmapid int	-- id of index to generate      <br> return value: 0: OK , > 0 : count of errors.  <br> Example - generate create index statement for indexmap id = 52<br>   <samp>  exec spIndexCreate_print 0,0,52  </samp> ','0');
INSERT DBObjects VALUES('spIndexBuildList','P','A',' Builds the indices from a selection, based upon the #indexmap table ',' It also assumes that we created before an #indexmap temporary table  that has three attributes: id int, indexmapid int, status int.  status values are 0:READY, 1:STARTED, 2:DONE. ','0');
INSERT DBObjects VALUES('spIndexDropList','P','A',' Drops the indices from a selection, based upon the #indexmap table ',' It also assumes that we created before an #indexmap temporary table  that has three attributes, id int, indexmapid int, status int.  status values are 0:READY, 1:STARTED, 2:DONE ','0');
INSERT DBObjects VALUES('spIndexBuildSelection','P','A',' Builds a set of indexes from a selection given by @type and @group ',' The parameters are the body of a group clause, to be used with IN (...),  separated by comma, like @type = ''F,K,I'', @group=''PHOTO,TAG,META'';  <BR>  <li> @type   varchar(256)  -- a subset of F,K,I   <br> Here ''F'': (foreign key), ''K'' (primary key), ''I'' index  <li> @group  varchar(256) -- a subset of PHOTO,TAG,SPECTRO,QSO,TILES,META,FINISH,NEIGHBORS,ZONE,MATCH  It will also accept ''ALL'' as an alternate argument, it means build all indices. Or one can specify  a comma separated list of tables.  <br> The sp assumes that the parameters are syntactically correct.  Returns 0, if all is well, 1 if an error has occurred,   and 2, if no more indexes are to be built.  <br><samp>     exec spIndexBuildSelection 1,1, ''K,I,F'', ''PHOTO''  </samp>   ','0');
INSERT DBObjects VALUES('spIndexDropSelection','P','A',' Drops a set of indexes from a selection given by @type and @group ',' The procedure uses the IndexMap table to drop the selected indices.  The parameters are the body of a group clause, to be used with IN (...),  separated by comma, like @type = ''F,K,I'', @group=''PHOTO,TAG,META'';  <BR>  <li> @type   varchar(256)  -- a subset of F,K,I   <br> Here ''F'': (foreign key), ''K'' (primary key), ''I'' index  <li> @group  varchar(256) -- a subset of PHOTO,TAG,SPECTRO,QSO,TILES,META,FINISH,NEIGHBORS,ZONE,MATCH  It will also accept ''ALL'' as an alternate argument, it means build all indices. Or one can specify  a comma separated list of tables.  <br> The sp assumes that the parameters are syntactically correct.  Returns 0, if all is well, 1 if an error has occurred,   and 2, if no more indexes are to be built.  <br><samp>     exec spIndexDropSelection 1,1, ''K,I,F'', ''PHOTO''  </samp>   ','0');
INSERT DBObjects VALUES('spIndexDrop','P','A',' Drops all indices of a given type ''F'' (foreign key), ''K'' (primary key), or ''I'' index ',' Uses the information in the sysobjects and sysindexes table to delete the indexes.  These should be called in the sequence ''F'', ''K'', ''I''  <BR>  <li> type  varchar(16)   -- ''F'' (foreign key), ''K'' (primary key), or ''I'' index  <br><samp>  <br> exec  dbo.spIndexDrop ''F''  </samp>   ','0');
INSERT DBObjects VALUES('spDropIndexAll','P','A',' Drops all indices on user tables ',' <br><samp>  <br> exec  dbo.spDropIndexAll  </samp>   ','0');
INSERT DBObjects VALUES('spIndexCreatePhotoTag','P','A',' Create the fat PhotoTag index on PhotoObjAll. ',' <br><samp>  <br> exec  dbo.spIndexCreatePhotoTag 0, 0  </samp>   ','0');
INSERT DBObjects VALUES('Versions','U','U',' Tracks the versioning history of the database ',' This is a log of all major changes that happened to the DB  since its creation.  ','0');
INSERT DBObjects VALUES('Field','U','U',' All the measured parameters and calibrations of a photometric field ',' A field is a 2048x1489 pixel section of a camera column.   This table contains summary results of the photometric   and calibration pipelines for each field. ','0');
INSERT DBObjects VALUES('PhotoObjAll','U','U',' The full photometric catalog quantities for SDSS imaging. ',' This table contains one entry per detection, with the associated   photometric parameters measured by PHOTO, and astrometrically   and photometrically calibrated.   <p>  The table has the following  views:  <ul>  <li> <b>PhotoObj</b>: all primary and secondary objects; essentially this is the view you should use unless you want a specific type of object.  <li> <b>PhotoPrimary</b>: all photo objects that are primary (the best version of the object).  <ul><li> <b>Star</b>: Primary objects that are classified as stars.      <li> <b>Galaxy</b>: Primary objects that are classified as galaxies. 	   <li> <b>Sky</b>:Primary objects which are sky samples.      <li> <b>Unknown</b>:Primary objects which are no0ne of the above</ul>      <li> <b>PhotoSecondary</b>: all photo objects that are secondary (secondary detections)      <li> <b>PhotoFamily</b>: all photo objects which are neither primary nor secondary (blended)  </ul>  <p> The table has indices that cover the popular columns. ','0');
INSERT DBObjects VALUES('ProperMotions','U','U',' Proper motions combining SDSS and recalibrated USNO-B astrometry. ',' These results are based on the technique described in  Munn et al. 2004, AJ, 127, 3034 ','0');
INSERT DBObjects VALUES('FieldProfile','U','U',' The mean PSF profile for the field as determined from bright stars. ',' For the profile radii, see the ProfileDefs table. ','0');
INSERT DBObjects VALUES('Run','U','U',' Contains the basic parameters associated with a run ',' A run corresponds to a single drift scan.  ','0');
INSERT DBObjects VALUES('PhotoProfile','U','U',' The annulus-averaged flux profiles of SDSS photo objects ',' For the profile radii, see the ProfileDefs table. ','0');
INSERT DBObjects VALUES('Mask','U','U',' Contains a record describing the each mask object ',' ','0');
INSERT DBObjects VALUES('MaskedObject','U','U',' Contains the objects inside a specific mask ',' This is a list of all masked objects. Each object may appear  multiple times, if it is masked for multiple reasons. ','0');
INSERT DBObjects VALUES('AtlasOutline','U','U',' Contains a record describing each AtlasOutline object ',' The table contains the outlines of each object over a 4x4 pixel grid,  and the bounding rectangle of the object within the frame. ','0');
INSERT DBObjects VALUES('PhotoPrimaryDR7','U','U',' Contains the spatial cross-match between DR8 primaries and DR7 primaries. ',' This is a unique match between a DR8 photoprimary and a DR7 photoprimary,   and matches between different run/camcol/field are allowed.  The match  radius is 1 arcsec.  The table contains the DR8 and DR7 objids, the  distance between them and the DR7 phototag quantities. ','0');
INSERT DBObjects VALUES('PhotoObjDR7','U','U',' Contains the spatial cross-match between DR8 photoobj and DR7 photoobj. ',' This is a unique match between a DR8 photoobj and a DR7 photoobj,   and matches are restricted to the same run/camcol/field.    The match radius is 1 arcsec, and within this radius preference is  given to a photoprimary match over a secondary.  If no primary match  exists, the nearest secondary match is chosen.  If more than one  match of a given mode exists, the nearest one is chosen.  The table  contains the DR8 and DR7 objids and modes, the distance between them,   and the DR7 phototag quantities. ','0');
INSERT DBObjects VALUES('TwoMass','U','U',' 2MASS point-source catalog quantities for matches to SDSS photometry ',' This table contains one entry for each match between the   SDSS photometric catalog (photoObjAll) and the 2MASS point-source  catalog (PSC). See http://tdc-www.harvard.edu/catalogs/tmc.format.html  for full documentation. ','0');
INSERT DBObjects VALUES('TwoMassXSC','U','U',' 2MASS extended-source catalog quantities for matches to SDSS photometry ',' This table contains one entry for each match between the   SDSS photometric catalog (photoObjAll) and the 2MASS extended-source  catalog (XSC). See http://tdc-www.harvard.edu/catalogs/tmx.format.html   for full documentation. ','0');
INSERT DBObjects VALUES('FIRST','U','U',' SDSS objects that match to FIRST objects have their match parameters stored here ','','0');
INSERT DBObjects VALUES('RC3','U','U',' RC3 information for matches to SDSS photometry ',' All matches to the Third Reference Source Catalog within 6 arcsec are included.  RC3 positions were updated with latest NED positions in 2008. ','0');
INSERT DBObjects VALUES('ROSAT','U','U',' ROSAT All-Sky Survey information for matches to SDSS photometry ',' All matches of SDSS photometric catalog objects to ROSAT All Sky Survey.  Both faint and bright sources used here (indicated as ''faint'' or ''bright''  in CAT column. See detailed documentation at http://www.xray.mpe.mpg.de/rosat/survey/rass-bsc/ ','0');
INSERT DBObjects VALUES('USNO','U','U',' SDSS objects that match to USNO-B objects have their match parameters stored here ',' The source for this is the USNO-B1.0 catalog (Monet et al. 2003, AJ, 125, 984).   This is simply the closest matching USNO-B1.0 object. See the ProperMotions table   for proper motions after recalibrating USNO and SDSS astrometry.   USNO-B contains five imaging surveys, two early epochs from POSS-I,   and three later epochs from POSS-II, SERC and AAO.  ','0');
INSERT DBObjects VALUES('WISE_xmatch','U','U',' Astrometric cross-matches between SDSS and WISE objects. ',' This is a ''join table'' which contains ''pointers'' to the matched objects  in the SDSS and WISE tables.  The SDSS objects appear in the PhotoObjAll,  PhotoObj,and PhotoTag tables.  The WISE objects appear in the WISE_allsky  table.  Eg, to get r- and W1-band magnitudes of matched objects:   ''select s.psfmag_r as r, w.w1mpro as w1 from wise_xmatch as xm join  photoObjAll as s on xm.sdss_objid = s.objid join wise_allsky as w on  xm.wise_cntr  = w.cntr'' ','0');
INSERT DBObjects VALUES('WISE_allsky','U','U',' WISE All-Sky Data Release catalog ',' The WISE catalog.  The columns have mostly been copied without  modification from the WISE catalog distributed by IRSA, so that  documentation (mostly copied here) largely applies;  http://wise2.ipac.caltech.edu/docs/release/allsky/expsup/sec2_2a.html   Exceptions include some gratuitous column renames:    w*sigsk -> w*sigsky    w*gerr  -> w*siggmag   And some WISE columns have been combined:    ext_bit, na, nb  ->  blend_ext_flags    ph_qual, det_bit ->  phqual_det_*   And some WISE columns have been unpacked into 4 columns, one per band:    var_flg, moon_lev, satnum    Null values are represented with:    w*mjd{min,max,mean}: -9999    w*snr: -9999    w*{flux,sky}: -9999    all others: 9999 ','0');
INSERT DBObjects VALUES('wiseForcedTarget','U','U',' WISE forced-photometry of SDSS primary sources. ',' This table contains one entry for each SDSS primary object.  See http://arxiv.org/abs/1410.7397 for the method. ','0');
INSERT DBObjects VALUES('Photoz','U','U',' The photometrically estimated redshifts for all objects in the GalaxyTag view. ',' Estimation is based on a robust fit on spectroscopically observed objects  with similar colors and r magnitude.<br>  Please see the <b>Photometric Redshifts</b> entry in Algorithms for more  information about this table. <br>  <i>NOTE: This table may be empty initially because the values  are computed in a separate calculation after the main data release.</i> ','0');
INSERT DBObjects VALUES('PhotozErrorMap','U','U',' The error map of the photometric redshift estimation ',' This is a supplementary table to the <b>Photoz</b> table, providing information about  the dependence of estimation errors on the location in color/magnitude space.<br>  All numbers are based on the results of the training set,   and evaluated on a grid in r magnitude, and g-r, r-i colors. <br>  <i>NOTE: This table may be empty initially because the values  are computed in a separate calculation after the main data release.</i> ','0');
INSERT DBObjects VALUES('galSpecExtra','U','U',' Estimated physical parameters for all galaxies in the MPA-JHU spectroscopic catalogue. ',' The estimates for stellar mass are derived using the methodology described in Kauffmann  et al (2003), applied to photometric data as described in Salim et al (2007). The star  formation rates are derived as discussed in Brinchmann et al (2004), but the aperture  corrections are done by estimating SFRs from SED fits to the photometry outside the  fiber following the methodology in Salim et al (2007). ','0');
INSERT DBObjects VALUES('galSpecIndx','U','U',' Index measurements of spectra from the MPA-JHU spectroscopic catalogue. ',' For each index, we give our estimate and error bar.  Measurements  performed as described in Brinchmann et al. 2004. ','0');
INSERT DBObjects VALUES('galSpecInfo','U','U',' General information for the MPA-JHU spectroscopic re-analysis ',' This table contains one entry per spectroscopic observation  It may be joined with the other galSpec tables with the  measurements, or to specObjAll, using specObjId.  Numbers  given here are for the version of data used by the MPA-JHU  and may not be in perfect agreement with specObjAll. ','0');
INSERT DBObjects VALUES('galSpecLine','U','U',' Emission line measurements from MPA-JHU spectroscopic reanalysis ',' The table contains one entry per spectroscopic observation derived as   described in Tremonti et al (2004) and Brinchmann et al (2004). ','0');
INSERT DBObjects VALUES('fSkyVersion','F','U',' Extracts SkyVersion from an SDSS Photo Object ID ',' The bit-fields and their lengths are: Skyversion[5] Rerun[11] Run[16] Camcol[3] First[1] Field[12] Obj[16]<br>  <samp> select top 10 objId, dbo.fSkyVersion(objId) as fSkyVersion from Galaxy</samp> ','0');
INSERT DBObjects VALUES('fRerun','F','U',' Extracts Rerun from an SDSS Photo Object ID ',' The bit-fields and their lengths are: Skyversion[5] Rerun[11] Run[16] Camcol[3] First[1] Field[12] Obj[16]<br>  <samp> select top 10 objId, dbo.fRerun(objId) as fRerun from Galaxy</samp> ','0');
INSERT DBObjects VALUES('fRun','F','U',' Extracts Run from an SDSS Photo Object ID ',' The bit-fields and their lengths are: Skyversion[5] Rerun[11] Run[16] Camcol[3] First[1] Field[12] Obj[16]<br>  <samp> select top 10 objId, dbo.fRun(objId) as fRun from Galaxy</samp> ','0');
INSERT DBObjects VALUES('fCamcol','F','U',' Extracts Camcol from an SDSS Photo Object ID ',' The bit-fields and their lengths are: Skyversion[5] Rerun[11] Run[16] Camcol[3] First[1] Field[12] Obj[16]<br>  <samp> select top 10 objId, dbo.fCamcol(objId) as fCamcol from Galaxy</samp> ','0');
INSERT DBObjects VALUES('fField','F','U',' Extracts Field from an SDSS Photo Object ID. ',' The bit-fields and their lengths are: Skyversion[5] Rerun[11] Run[16] Camcol[3] First[1] Field[12] Obj[16]<br>  <samp> select top 10 objId, dbo.fField(objId) as fField from Galaxy</samp> ','0');
INSERT DBObjects VALUES('fObj','F','U',' Extracts Obj from an SDSS Photo Object ID. ',' The bit-fields and their lengths are: Skyversion[5] Rerun[11] Run[16] Camcol[3] First[1] Field[12] Obj[16]<br>  <samp> select top 10 objId, dbo.fObj(objId) as fObj from Galaxy</samp> ','0');
INSERT DBObjects VALUES('fObjID','F','U',' Match an objID to a PhotoObj and set/unset the first field bit. ',' Given an objID this function determines whether there is a  PhotoObj with a matching (skyversion, run, rerun, camcol, field,   obj) and returns the objID with the first field bit set properly  to correspond to that PhotoObj.  It returns 0 if there is  no corresponding PhotoObj.  It does not matter whether the  first field bit is set or unset in the input objID. ','0');
INSERT DBObjects VALUES('fObjidFromSDSS','F','U',' Computes the long objID from the 5-part SDSS numbers. ',' The bit-fields and their lengths are skyversion[5] + rerun[11] + run[16] + Camcol[3] + firstfield[1] + field[12] + obj[16]<br>  The firstfield is assumed to be 0, see also fObjidFromSDSSWithFF.<br>  <samp> SELECT dbo.fObjidFromSDSS(2,94,301,1,11,9) AS fObjid</samp> ','0');
INSERT DBObjects VALUES('fObjidFromSDSSWithFF','F','U',' Computes the long objID from the 5-part SDSS numbers plus the firstfield flag. ',' The bit-fields and their lengths are skyversion[5] + rerun[11] + run[16] + Camcol[3] + firstfield[1]+ field[12] + obj[16]<br>  See also fObjidFromSDSS for version that assumes firstfield = 0.<br>  <samp> SELECT dbo.fObjidFromSDSSWithFF(2,94,301,1,11,9,0) AS fObjid</samp> ','0');
INSERT DBObjects VALUES('fSDSS','F','U',' Computes the 6-part SDSS numbers from the long objID ',' The bit-fields and their lengths are skyversion[5] + rerun[11] + run[16] + camcol[3] + first[1] + field[12] + obj[16]<br>  <samp> select top 5 dbo.fSDSS(objid) as SDSS from PhotoObj</samp> ','0');
INSERT DBObjects VALUES('fSDSSfromObjID','F','U',' Returns a table pf the 6-part SDSS numbers from the long objID. ',' The returned columns in the output table are:  	skyversion, rerun, run, camcol, firstField, field, obj<br>  <samp> select * from dbo.fSDSSfromObjID(objid)</samp> ','0');
INSERT DBObjects VALUES('fStripeOfRun','F','U',' returns Stripe containing a particular run  ',' <br> run is the run number  <br>  <samp>select top 10 objid, dbo.fStripeOfRun(run) from PhotoObj </samp> ','0');
INSERT DBObjects VALUES('fStripOfRun','F','U',' returns Strip containing a particular run  ',' <br> run is the run number  <br>  <samp>select top 10 objid, dbo.fStripOfRun(run) from PhotoObj </samp> ','0');
INSERT DBObjects VALUES('fDMSbase','F','U',' Base function to convert declination in degrees to +dd:mm:ss.ss notation. ',' @truncate is 0 (default) if decimal digits to be rounded, 1 to be truncated.  <br> @precision is the number of decimal digits, default 2.  <p><samp> select dbo.fDMSbase(87.5,1,4) </samp> <br>  <samp> select dbo.fDMSbase(87.5,default,default) </samp> ','0');
INSERT DBObjects VALUES('fHMSbase','F','U',' Base function to convert right ascension in degrees to +hh:mm:ss.ss notation. ',' @truncate is 0 (default) if decimal digits to be rounded, 1 to be truncated.  <br> @precision is the number of decimal digits, default 2.  <p><samp> select dbo.fHMSBase(187.5,1,3) </samp> <br>  <samp> select dbo.fHMSBase(187.5,default,default) </samp> ','0');
INSERT DBObjects VALUES('fDMS','F','U',' Convert declination in degrees to +dd:mm:ss.ss notation  ',' <i>NOTE: this function should not be used to generate SDSS IAU names,  use fIAUFromEq instead. </i>  <p><samp> select dbo.fDMS(87.5) </samp> ','0');
INSERT DBObjects VALUES('fHMS','F','U',' Convert right ascension in degrees to +hh:mm:ss.ss notation <br> ',' <i>NOTE: this function should not be used to generate SDSS IAU names,  use fIAUFromEq instead. </i>  <p><samp> select dbo.fHMS(187.5) </samp> ','0');
INSERT DBObjects VALUES('fIAUFromEq','F','U',' Convert ra, dec in degrees to extended IAU name ',' Will create a 25 char IAU name as SDSS Jhhmmss.ss+ddmmss.s  <p><samp> select dbo.fIAUFromEq(182.25, -12.5) </samp> ','0');
INSERT DBObjects VALUES('fFirstFieldBit','F','U',' Returns the bit that indicates whether an objID is in the first field of a run ',' This bit can be added to an objID created with fObjidFromSDSS  to create the correct objID for the case where a PhotoObj  is in the first field of a run.<br>  <samp> select dbo.fObjidFromSDSS(0,752,8,6,100,300) + dbo.fFirstFieldBit() </samp> ','0');
INSERT DBObjects VALUES('fPrimaryObjID','F','U',' Match an objID to a PhotoPrimary and set/unset the first field bit. ',' Given an objID this function determines whether there is a  PhotoPrimary with a matching  (skyversion, run, rerun, camcol, field, obj)  and returns the objID with the first field bit set properly  to correspond to that PhotoPrimary.  It returns 0 if there is  no corresponding PhotoPrimary.  It does not matter whether the  first field bit is set or unset in the input objID. ','0');
INSERT DBObjects VALUES('fMagToFlux','F','U',' Convert Luptitudes to AB flux in nJy ','  Computes the AB flux for a magnitude given in the   sinh system. The flux is expressed in nanoJy.   Needs the @mag value for the specific band.    @band is 0..4 for u''..z''''.   <br><samp>dbo.fMagToFlux(21.576975,2)</samp>  <br> see also fMagToFluxErr ','0');
INSERT DBObjects VALUES('fMagToFluxErr','F','U',' Convert the error in luptitudes to AB flux in nJy ','  Computes the flux error for a magnitude and its error   expressed in the sinh system. Returns the error in nJy units.   Needs the @mag value as well as the error for the   specific band. @band is 0..4 for u''..z''''.   <br><samp>dbo.fMagToFluxErr(21.576975,0.17968324,2)   </samp>  <br> see also fMagToFlux ','0');
INSERT DBObjects VALUES('fGetWCS','F','U',' Builds the relevant part of the FITS header with the WCS info ',' Input parameter is the fieldid  <samp>        PRINT dbo.fGetWCS(1237671956445462528)  <br>  SELECT TOP 10 dbo.fGetWCS( fieldid ) FROM Field  </samp> ','0');
INSERT DBObjects VALUES('detectionIndex','U','U',' Full list of all detections, with associated ''thing'' assignment. ',' Each row in this table corresponds to a single catalog entry,  or ''detection'' in the SDSS imaging. For each one, this table  lists a ''thingId'', which is common among all detections of   the same object in the catalog. ','0');
INSERT DBObjects VALUES('thingIndex','U','U',' Full list of all ''things'': unique objects in the SDSS imaging ',' Each row in this table corresponds to a single ''thing'' observed  by the SDSS imaging survey. By joining with the ''detectionIndex''  table one can retrieve all of the observations of a particular   thing.  NOTE: The RA and Dec in this table refer to the DR8 coordinates,  which have errors in the region north of 41 deg in Dec, since  those were used for the resolving of the survey.  These errors  should have a very small effect on the decision about which  objects are matched to each other. ','0');
INSERT DBObjects VALUES('Neighbors','U','U',' All PhotoObj pairs within 0.5 arcmins ',' SDSS objects within 0.5 arcmins and their match parameters stored here.   Make sure to filter out unwanted PhotoObj, like secondaries. ','0');
INSERT DBObjects VALUES('Zone','U','U',' Table to organize objects into declination zones ',' In order to speed up all-sky corss-correlations,  this table organizes the PhotoObj into 0.5 arcmin  zones, indexed by the zone number and ra. ','0');
INSERT DBObjects VALUES('PlateX','U','U',' Contains data from a given plate used for spectroscopic observations. ',' Each SDSS spectrograph plate has 640 observed spectra, whereas each BOSS   spectrograph plate has 1000 observed spectra.  ','0');
INSERT DBObjects VALUES('SpecObjAll','U','U',' Contains the measured parameters for a spectrum. ',' This is a base table containing <b>ALL</b> the spectroscopic  information, including a lot of duplicate and bad data. Use  the <b>SpecObj</b> view instead, which has the data properly  filtered for cleanliness. These tables contain both the BOSS  and SDSS spectrograph data. ','0');
INSERT DBObjects VALUES('SpecPhotoAll','U','U',' The combined spectro and photo parameters of an object in SpecObjAll ',' This is a precomputed join between the PhotoObjAll and SpecObjAll tables.  The photo attibutes included cover about the same as PhotoTag.  The table also includes certain attributes from Tiles. ','0');
INSERT DBObjects VALUES('SpecDR7','U','U',' Contains the spatial cross-match between DR8 SpecObjAll and DR7 primaries. ',' This is a unique match between a DR8 SpecObjAll and a DR7 photoprimary   within 1 arcsec.  DR7 PhotoTag columns and relevant DR7 ProperMotions are  also included for convenience. ','0');
INSERT DBObjects VALUES('sdssEbossFirefly','U','U',' Contains the measured stellar population parameters for a spectrum. ',' This is a base table containing spectroscopic  information and the results of the FIREFLY fits on  the DR16 speclite spectra observed by SDSS (run2d=26) and BOSS, eBOSS  (run2d=v5_13_0). This run used the Chabrier stellar initial mass  function, the MILES and ELODIE libraries.  Redshifts used for BOSS and  eBOSS plates is the NOQSO version ','0');
INSERT DBObjects VALUES('spAll','U','U',' Summary spectroscopic information for the BOSS spectrograph data. ',' This is a base table containing the summary spectroscopic information  for the BOSS spectrograph data coadded on a daily cadence ','0');
INSERT DBObjects VALUES('spAll_allepoch','U','U',' Summary spectroscopic information for the BOSS spectrograph data custom Coadds ',' This is a base table containing the summary spectroscopic information  for the BOSS spectrograph data coadded on custom target level  requirements ','0');
INSERT DBObjects VALUES('spAll_epoch','U','U',' Summary spectroscopic information for the BOSS spectrograph data Field Epoch Coadds ',' This is a base table containing the summary spectroscopic information  for the BOSS spectrograph data coadded based on field epoch cadence  requirements ','0');
INSERT DBObjects VALUES('spAll_eFEDS','U','U',' Contains the summary results for combined boss spectra for the eFEDS program. ',' This is a nonbase table (related to spAll) containing the summary spectroscopic  information for combined (eFEDS) visits for BOSS spectrograph data.  The catalogid is a unique column in this table, and can be joined to spAll for all visits. ','0');
INSERT DBObjects VALUES('multiplex','U','U',' Table of all spectroscopic plates or FPS fields ',' Table of all spectroscopic plates or FPS fields across each SDSS instrument. ','0');
INSERT DBObjects VALUES('allspec','U','U',' Table of all spectroscopic reductions ',' Table of all spectroscopic reductions across each SDSS instrument.  ','0');
INSERT DBObjects VALUES('stellarMassPCAWiscBC03','U','U',' Estimated stellar masses for SDSS and BOSS galaxies (Wisconsin method, Bruzual-Charlot models) ',' Stellar masses using the method of <a href=''http://adsabs.harvard.edu/abs/2012MNRAS.421..314C''>Chen et al. (2012).</a>  In this table, the best estimate of stellar mass is ''mstellar_median''.  This version of the table uses the <a href=''http://adsabs.harvard.edu/abs/2003MNRAS.344.1000B''>Bruzual and Charlot (2003)</a> stellar  population synthesis models.  Please use the ''warning'' values to check for data quality:    warning = 0 : Results correspond to a best-fit PCA spectrum (no problems detected)    warning = 1 : Target redshift too small (z &lt 0.05)    warning = 2 : Target redshift too large (z &gt 0.80)    warning = 3 : READSPEC cannot get wavelength vector    warning = 4 : Available wavelengths all outside PCA coverage     warning = 5 : Unable to project projection wavelength range    warning = 6 : Unable to select projection wavelength range    warning = 7 : Minimum chi^2 less than zero    warning = 8 : Total of log mass PDF equal to zero    warning = 9 : Total of velocity dispersion PDF equal to zero ','0');
INSERT DBObjects VALUES('stellarMassPCAWiscM11','U','U',' Estimated stellar masses for SDSS and BOSS galaxies (Wisconsin method, Maraston models)  ',' Stellar masses using the method of <a href=''http://adsabs.harvard.edu/abs/2012MNRAS.421..314C''>Chen et al. (2012).</a>  In this table, the best estimate of stellar mass is ''mstellar_median''.  This version of the table uses the <a href=''http://adsabs.harvard.edu/abs/2011MNRAS.418.2785M''>Maraston and Stromback (2011)</a> stellar  population synthesis models.  Please use the ''warning'' values to check for data quality:    warning = 0 : Results correspond to a best-fit PCA spectrum (no problems detected)    warning = 1 : Target redshift too small (z &lt 0.05)    warning = 2 : Target redshift too large (z &gt 0.80)    warning = 3 : READSPEC cannot get wavelength vector    warning = 4 : Available wavelengths all outside PCA coverage     warning = 5 : Unable to project projection wavelength range    warning = 6 : Unable to select projection wavelength range    warning = 7 : Minimum chi^2 less than zero    warning = 8 : Total of log mass PDF equal to zero    warning = 9 : Total of velocity dispersion PDF equal to zero ','0');
INSERT DBObjects VALUES('stellarMassPassivePort','U','U',' Estimated stellar masses for SDSS and BOSS galaxies (Portsmouth method, passive model) ',' Stellar masses using the method of <a href=''http://adsabs.harvard.edu/abs/2009MNRAS.394L.107M''>Maraston et al. (2009).</a>  These fit passive stellar evolution models to the SDSS photometry, using  the known redshifts. The model is a instantaneous burst stellar population   whose age is fit for (with a minimum allowed age of 3 Gyrs). The population  is 97% solar metallicity and 3% metal-poor, by mass. In this table we   assume the Kroupa IMF. ','0');
INSERT DBObjects VALUES('stellarMassStarformingPort','U','U',' Estimated stellar masses for SDSS and BOSS galaxies (Portsmouth method, star-forming model). ',' Stellar masses using the method of <a href=''http://adsabs.harvard.edu/abs/2009MNRAS.394L.107M''>Maraston et al. (2006).</a>  These fit stellar evolution models to the SDSS photometry, using  the known BOSS redshifts. The star-formation model uses a  metallicity (specified in the ''metallicity'' column) and one of three  star-formation histories: constant, truncated, and exponentially  declining (''tau''). The type, and relevant time scale, are given in the ''SFH''  column. The ''age'' listed gives the start time for the onset of  star-formation in each model. In this table we assume the Kroupa IMF. ','0');
INSERT DBObjects VALUES('stellarMassFSPSGranEarlyDust','U','U',' Estimated stellar masses for SDSS and BOSS galaxies (Granada method, early-star-formation with dust) ',' Stellar masses using FSPS models of <a href=''http://adsabs.harvard.edu/abs/2009ApJ...699..486C''>Conroy et al. (2009)</a>  fit to SDSS photometry in ugriz.  The fit is carried out on extinction corrected model magnitudes that are scaled   to the i-band c-model magnitude. This ''early-star-formation'' version restricts the assumption about  when the star-formation in the galaxy could occur to within 2 Gyrs of the Big Bang.  This version also fits for   dust extinction. ','0');
INSERT DBObjects VALUES('stellarMassFSPSGranEarlyNoDust','U','U',' Estimated stellar masses for SDSS and BOSS galaxies (Granada method, early-star-formation with dust) ',' Stellar masses using FSPS models of <a href=''http://adsabs.harvard.edu/abs/2009ApJ...699..486C''>Conroy et al. (2009)</a>  fit to SDSS photometry in ugriz.  The fit is carried out on extinction corrected model magnitudes that are scaled   to the i-band c-model magnitude. This ''early-star-formation'' version restricts the assumption about  when the star-formation in the galaxy could occur to within 2 Gyrs of the Big Bang.  This version assumes  no dust extinction. ','0');
INSERT DBObjects VALUES('stellarMassFSPSGranWideDust','U','U',' Estimated stellar masses for SDSS and BOSS galaxies (Granada method, early-star-formation with dust) ',' Stellar masses using FSPS models of <a href=''http://adsabs.harvard.edu/abs/2009ApJ...699..486C''>Conroy et al. (2009)</a>  fit to SDSS photometry in ugriz.  The fit is carried out on extinction corrected model magnitudes that are scaled   to the i-band c-model magnitude. This ''wide-star-formation'' version allows an extended star-formation  history.  This version also fits for dust extinction. ','0');
INSERT DBObjects VALUES('stellarMassFSPSGranWideNoDust','U','U',' Estimated stellar masses for SDSS and BOSS galaxies (Granada method, early-star-formation with dust) ',' Stellar masses using FSPS models of <a href=''http://adsabs.harvard.edu/abs/2009ApJ...699..486C''>Conroy et al. (2009)</a>  fit to SDSS photometry in ugriz.  The fit is carried out on extinction corrected model magnitudes that are scaled   to the i-band c-model magnitude. This ''wide-star-formation'' version allows an extended star-formation  history.  This version assumes no dust extinction. ','0');
INSERT DBObjects VALUES('emissionLinesPort','U','U',' Emission line kinematics results for SDSS and BOSS galaxies using GANDALF ',' We fit galaxies using an adaptation of the publicly available Gas AND Absorption  Line Fitting (GANDALF, <a href=''http://adsabs.harvard.edu/abs/2006MNRAS.366.1151S''>Sarzi et al. 2006</a>)  and penalised PiXel Fitting (pPXF, <a href=''http://adsabs.harvard.edu/abs/2004PASP..116..138C''>Cappellari &amp; Emsellem 2004</a>).  Stellar population models for the continuum are from of <a href=''http://adsabs.harvard.edu/abs/2011MNRAS.418.2785M''>Maraston &amp; Str&ouml;mb&auml;ck (2011)</a> and  <a href=''http://adsabs.harvard.edu/abs/2011MNRAS.412.2183T''>Thomas, Maraston &amp; Johansson (2011)</a>. ','0');
INSERT DBObjects VALUES('fGetBlob','F','U','','','0');
INSERT DBObjects VALUES('fSpecidFromSDSS','F','U',' Computes the long Spec IDs from its individual components. ',' The bit-fields (starting from bit# 63) and their lengths are: <br>      plate[14] - bits 50-63 for the plate number, <br>      fiber[12]  - bits 38-49 for (MJD - 50000), <br>      mjd[14] - bits 24-37 for the fiberid, <br>      run2d[14] - bits 10-23 for the spec2d rerun, and <br>      0         - bits 0-9 unused in SpecObj, used for line/redshift/index                  in other tables. <br>  <samp> select dbo.fSpecidFromSDSS(266,51630,145,26) as specObjID </samp> ','0');
INSERT DBObjects VALUES('fSDSSfromSpecID','F','U',' Returns a table pf the 4-part SDSS numbers from the long specObjID. ',' The returned columns in the output table are:  	plate, mjd, fiber, run2d<br>  <samp> select * from dbo.fSDSSfromSpecID(865922932356966400)</samp> ','0');
INSERT DBObjects VALUES('fPlate','F','U',' Extracts plate from an SDSS Spec ID ',' The bit-fields (starting from bit# 63) and their lengths are: <br>      plate[14] - bits 50-63 for the plate number, <br>      fiber[12]  - bits 38-49 for (MJD - 50000), <br>      mjd[14] - bits 24-37 for the fiberid, <br>      run2d[14] - bits 10-23 for the spec2d rerun, and <br>      0         - bits 0-9 unused in SpecObj, used for line/redshift/index                  in other tables. <br>  <samp> select top 10 dbo.fPlate(plateID) as plate from PlateX </samp> ','0');
INSERT DBObjects VALUES('fMJD','F','U',' Extracts MJD from an SDSS Spec ID ',' The bit-fields (starting from bit# 63) and their lengths are: <br>      plate[14] - bits 50-63 for the plate number, <br>      fiber[12]  - bits 38-49 for (MJD - 50000), <br>      mjd[14] - bits 24-37 for the fiberid, <br>      run2d[14] - bits 10-23 for the spec2d rerun, and <br>      0         - bits 0-9 unused in SpecObj, used for line/redshift/index                  in other tables. <br>  <samp> select top 10 dbo.fMJD(plateID) as plate from PlateX </samp> ','0');
INSERT DBObjects VALUES('fFiber','F','U',' Extracts Fiber from an SDSS Spec ID ',' The bit-fields (starting from bit# 63) and their lengths are: <br>      plate[14] - bits 50-63 for the plate number, <br>      fiber[12]  - bits 38-49 for (MJD - 50000), <br>      mjd[14] - bits 24-37 for the fiberid, <br>      run2d[14] - bits 10-23 for the spec2d rerun, and <br>      0         - bits 0-9 unused in SpecObj, used for line/redshift/index                  in other tables. <br>  <samp> select top 10 dbo.fFiber(specObjID) as fiber from SpecObj </samp> ','0');
INSERT DBObjects VALUES('spMakeSpecObjAll','P','U','','','0');
INSERT DBObjects VALUES('Target','U','U',' Keeps track of objects chosen by target selection and need to be tiled. ',' Objects are added whenever target selection is run on a new chunk.  Objects are also added when southern target selection is run.  In the case where an object (meaning run,rerun,camcol,field,id) is   targetted more than once, there will be only one row in Target for  that object, but there will multiple entries for that Target in the  TargetInfo table. ','0');
INSERT DBObjects VALUES('TargetInfo','U','U',' Unique information for an object every time it is targeted ',' ','0');
INSERT DBObjects VALUES('sdssTargetParam','U','U',' Contains the parameters used for a version of the target selection code ',' ','0');
INSERT DBObjects VALUES('sdssTileAll','U','U',' Contains information about each individual tile on the sky. ',' Each ''tile'' corresponds to an SDSS-I or -II spectroscopic observation.  The tile covers a region of the 1.49 deg in radius, and corresponds to  one or more observed plates.  At the time the tile was created, all of   the ''tiled target'' categories (galaxies, quasars, and some very special  categories of star) were assigned fibers; later other targets were   assigned fibers on the plate. ','0');
INSERT DBObjects VALUES('sdssTilingRun','U','U',' Contains basic information for a run of tiling  Contains basic information for a run of tiling ','  ','0');
INSERT DBObjects VALUES('sdssTilingGeometry','U','U',' Information about boundary and mask regions in SDSS-I and SDSS-II ',' This table contains both tiling boundary and mask information. ','0');
INSERT DBObjects VALUES('sdssTiledTargetAll','U','U',' Information on all targets run through tiling for SDSS-I and SDSS-II ',' This table is the full list of all targets that were run through  the SDSS tiling routines. targetID refers to the SDSS object  ID associated with the CAS DR7.  ','0');
INSERT DBObjects VALUES('sdssTilingInfo','U','U',' Results of individual tiling runs for each tiled target ',' This table has entry for each time a target was input into  the SDSS tiling routines. targetID refers to the SDSS object  ID associated with the CAS DR7. To get target information,  join this table with sdssTiledTargets on targetID. ','0');
INSERT DBObjects VALUES('RegionTypes','U','U','','','0');
INSERT DBObjects VALUES('Rmatrix','U','U',' Contains various rotation matrices between spherical coordinate systems ','   The mode field is a 3-letter code indicating the transformation:  <ul><li>      S2J - Survey-to-J2000   </li>      <li>      G2J - Galactic-to-J2000 </li>      <li>      J2G - J2000-to-Galactic </li>      <li>      J2S - J2000-to-Survey   </li>  </ul> ','0');
INSERT DBObjects VALUES('Region','U','U',' Definition of the different regions ',' We have various boundaries in the survey, represented  by equations of 3D planes, intersecting the unit sphere,  describing great and small circles, respectively. This  table stores the description of a region, the details  are in the HalfSpace table.  <ul>  <li>CHUNK - the boundary of a given Chunk  <li>STRIPE - the boundary of the whole stripe  <li>STAVE - the unique boundary of the whole stripe,  agrees with STRIPE for Southern stripes  <li>PRIMARY - the primary region of a given CHUNK  <li>SEGMENT - the idealized boundary of a segment  <li>CAMCOL - the real boundary of a segment  <li>PLATE - the boundary of a plate  <li>TILE - the boundary of a circular tile  <li>TIGEOM - the boundary of a Tiling Run, also includes      inverse regions, which must be excluded  <li>RUN - the union of the CAMCOLs making up a Run  <li>WEDGE -- intersection of tiles as booleans.  <li>TILEBOX -- intersection of TIGEOM respecting masks (these are positive convex TIGEOM)  <li>SKYBOX  -- intersection and union of TILEBOX to cover the sky with positive disjoin convex regions.    <li>SECTORLETS -- intersection of Skyboxes with wedges.  These are the areas that have targets.  <li>SECTORS -- collects together all the sectorlets with the same covering (and excluded) tiles.   <br> See also the RegionConvex and Halfspace tables  ','0');
INSERT DBObjects VALUES('RegionPatch','U','U',' Defines the attributes of the patches of a given region ',' Regions are the union of convex hulls and are defined in the Region table.  Convexes are the intersection of halfspaces defined by the HalfSpace table.   Each convex is then broken up into a set of Patches, with their own  bounding circle.  See also the Region table ','0');
INSERT DBObjects VALUES('HalfSpace','U','U',' The constraints for boundaries of the the different regions ',' Boundaries are represented as the equation of a 3D plane,  intersecting the unit sphere. These intersections are  great and small circles. THe representation is in terms  of a 4-vector, (x,y,z,c), where (x,y,z) are the components  of a 3D normal vector pointing along the normal of the plane  into the half-scape inside our boundary, and c is the shift  of the plane along the normal from the origin. Thus, c=0  constraints represent great circles. If c<0, the small circle  contains more than half of the sky.  See also the Region and RegionConvex tables ','0');
INSERT DBObjects VALUES('RegionArcs','U','U',' Contains the arcs of a Region with their endpoints ',' An arc has two endpoints, specified via their equatorial  coordinates, and the equation of the circle (x,y,z,c) of  the arc. The arc is directed, the first point is the  beginning, the second is the end. The arc belongs to a   Region, a Convex and a patch. A patch is a contigous area   of the sky. Within a patch the consecutive arcids represent   a counterclockwise ordering of the vertices. ','0');
INSERT DBObjects VALUES('sdssSector','U','U',' Stores the information about set of unique Sector regions ',' A Sector is defined as a distinct intersection of tiles and  TilingGeometries, characterized by a unique combination of  intersecting tiles and a list of tilingVersions. The sampling  rate for any targets is unambgously defined by the number of  tiles involved (nTiles) and the combination of targetVersion. ','0');
INSERT DBObjects VALUES('sdssBestTarget2Sector','U','U',' Map PhotoObj which are potential targets to sectors  ',' PhotoObj should only appear once in this list because any ra,dec  should belong to a unique sector ','0');
INSERT DBObjects VALUES('sdssSector2Tile','U','U',' Match tiles to sectors, wedges adn sectorlets, and vice versa. ',' This table is designed to be queried in either direction - one can get  all the tiles associated with a sector, or one can find all the sectors  to which a tile belongs. ','0');
INSERT DBObjects VALUES('Region2Box','U','U',' Tracks the parentage which regions contribute to which boxes ',' For the sector computation, Region2Box tracks the parentage  of which regions contribute to which boxs.  TileRegions contribute to TileBoxes  TileRegions and TileBoxes contribute to SkyBoxes  Wedges and SkyBoxes contribute to Sectorlets  Sectorlets contribute to Sectors ','0');
INSERT DBObjects VALUES('RegionConvex','V','U',' Emulates the old RegionConvex table for compatibility ',' Implemented as a view, translates patchid to patch ','0');
INSERT DBObjects VALUES('sdssImagingHalfSpaces','U','U',' Half-spaces (caps) describing the SDSS imaging geometry ',' Each row in this table corresponds to a single polygon  in the SDSS imaging data window function. ','0');
INSERT DBObjects VALUES('sdssPolygons','U','U',' Polygons describing SDSS imaging data window function ',' Each row in this table corresponds to a single polygon  in the SDSS imaging data window function. ','0');
INSERT DBObjects VALUES('sdssPolygon2Field','U','U',' Matched list of polygons and fields ',' Each row in this table corresponds to  ','0');
INSERT DBObjects VALUES('sppLines','U','U',' Contains outputs from the SEGUE Stellar Parameter Pipeline (SSPP). ',' Spectra for over 500,000 Galactic stars of all common spectral types are  available with DR8. These Spectra were processed with a pipeline called the  SEGUE Stellar Parameter Pipeline (SSPP, Lee et al. 2008) that computes line indices for a wide  range of common features at the radial velocity of the star in  question. Note that the line indices for TiO5, TiO8, CaH1, CaH2, and CaH3 are calculated following  the prescription given by the Hammer program (Covey et al. 2007). UVCN and BLCN line indices are computed  by he equations given in Smith & Norris (1982), and FeI_4 and FeI_5 indices by the recipe in Friel (1987).  FeI_1, FeI_2, FeI_3, and SrII line indices are only computed from the local continuum.  Thus, these line indices calculated from different methods report the same values for both the local continuum and  the global continuum. These outputs are stored in this table, and indexed on the   specObjID key index parameter for queries joining to other   tables such as specobjall and photoobjall.  See the Sample Queries in  SkyServer for examples of such queries. ','0');
INSERT DBObjects VALUES('sppParams','U','U',' Contains outputs from the SEGUE Stellar Parameter Pipeline (SSPP). ',' Spectra for over 500,000 Galactic stars of all common spectral types are  available with DR8. These Spectra were processed with a pipeline called the  SEGUE Stellar Parameter Pipeline'' (SSPP, Lee et al. 2008) that computes   standard stellar atmospheric parameters such as  [Fe/H], log g and Teff for   each star by a variety of methods. These outputs are stored in this table, and  indexed on the  specObjID'' key index parameter for queries joining to  other tables such as specobjall and photoobjall. bestobjid is also added (and indexed?)  Note that all values of -9999 indicate missing or no values.  See the Sample Queries in SkyServer for examples of such queries.  ','0');
INSERT DBObjects VALUES('sppTargets','U','U',' Derived quantities calculated by the SEGUE-2 target selection pipeline. ',' There are one of these files per plate. The file has one HDU.  That HDU has one row for every object in photoObjAll that is  classified as a star inside a 94.4 arcmin radius of the center of the  plate.  The data for each object are elements of the photoObjAll, specObjAll,   sppPrams and propermotions tables taken unaltered from the CAS and derived   quantities calculated by the segue-2 target selection code.  Appended to the  end are the two target selection bitmasks, segue2_target1 and segue2_target2,   as set by the target selection code.<br> <br>  <i>Columns from OBJID through PSFMAGERR_:</i> <br>  These are taken directly from photoObjAll <br>  <br>  <i>Columns from PLATEID through SEGUE2_TARGET2:</i> <br>  These are taken from the specObjAll and sppParams tables for any  objects in this file that have matches in that specObjAll.  For  objects without matches in specObjAll, values are set to -9999.  The names from SpecObjAll are unchanged. <br> <br>  <i>Columns from MATCH through DIST20: </i><br>  These are taken from the propermotions table, the USNOB proper  motions as recalibrated with the SDSS by Jeff Munn.  For objects  without matches in the ProperMotions table, values are set to -9999.  The names are unchanged from the propermotions table. <br> <br>  <i>Columns from uMAG0 through VTOT_GALRADREST:</i> <br>  These are the derived quanitites calculated  by the procedure  calderivedquantities in derivedquant.pro in the segue-2 target  selection code.  With the addition of these, this file contains all  the quanitites that the selection code operates on when choosing targets.<br> <br>  <i>Columns MG_TOHV through V1SIGMAERR_TOHV:</i> <br>  These were added for the November 2008 drilling run and after.  The earlier files will be retrofit (eventually). ','0');
INSERT DBObjects VALUES('Plate2Target','U','U',' Which objects are in the coverage area of which plates? ',' This table has an entry for each case of a target from the   sppTargets table having been targetable by a given plate.  Can be joined with plateX on the PLATEID column, and with  sppTargets on the OBJID column. Some plates are included  that were never observed; the PLATEID values for these   will not match any entries in the plateX table. ','0');
INSERT DBObjects VALUES('segueTargetAll','U','U',' SEGUE-1 and SEGUE-2 target selection run on all imaging data ',' This table gives the results for SEGUE target selection algorithms  for the full photometric catalog. The target flags in these files   are not the ones actually used for the SEGUE-1 and SEGUE-2 survey.    Instead, they are derived from the final photometric data set from   DR8. Only objects designated RUN_PRIMARY have target selection   flags set.  ','0');
INSERT DBObjects VALUES('apogeeVisit','U','U',' Contains data for a particular APOGEE spectrum visit. ',' This table corresponds to the data in a single spectrum visit in APOGEE  ','0');
INSERT DBObjects VALUES('apogeeStar','U','U',' Contains data for an APOGEE star combined spectrum. ',' This table contains the data in the combined spectrum for an APOGEE star.  ','0');
INSERT DBObjects VALUES('apogeeStarVisit','U','U',' Links an APOGEE combined star spectrum with the visits used to create it.  ',' This is a linking table that links an APOGEE combined star spectrum  with the visits that were used to create the combined spectrum. ','0');
INSERT DBObjects VALUES('apogeeStarAllVisit','U','U',' Links an APOGEE combined star spectrum with all visits for that star. ',' This is a linking table that links an APOGEE combined star spectrum  with all the visits for that star, including good, bad, commsssioning,  not, etc. ','0');
INSERT DBObjects VALUES('aspcapStar','U','U',' Contains data for an APOGEE star ASPCAP entry. ',' This table contains the data in the ASPCAP entry for an APOGEE star.  ','0');
INSERT DBObjects VALUES('aspcapStarCovar','U','U',' Contains the covariance information for an APOGEE star ASPCAP entry. ',' This table contains selected covariance matrix fields for the ASPCAP   entry for an APOGEE star.  ','0');
INSERT DBObjects VALUES('cannonStar','U','U',' Contains the stellar parameters obtained from the Cannon. ',' The Cannon (named by David Hogg, after Annie Jump Cannon) is a   data-driven approach to determining stellar parameters. This table   contains the parameters resulting froom applying that method. More  information can be found at https://arxiv.org/abs/1501.07604. ','0');
INSERT DBObjects VALUES('apogeePlate','U','U',' Contains all the information associated with an APOGEE plate. ',' This table contains the parameters for an APOGEE spectral plate ','0');
INSERT DBObjects VALUES('apogeeDesign','U','U',' Contains the plate design information for APOGEE plates. ',' This table contains all the design parameters used in designing plates  for APOGEE spectra. ','0');
INSERT DBObjects VALUES('apogeeField','U','U',' Contains the basic information for an APOGEE field. ',' This table contains the name, location and number of visits expected  for an APOGEE field. ','0');
INSERT DBObjects VALUES('apogeeObject','U','U',' Contains the targeting information for an APOGEE object. ',' This table contains all the parameters that went into targeting objects  for APOGEE spectra. ','0');
INSERT DBObjects VALUES('apogee_drp_allstar','U','U',' Contains data for an APOGEE star combined spectrum. ',' This table contains the data in the combined spectrum for an APOGEE star. ','0');
INSERT DBObjects VALUES('apogee_drp_allvisit','U','U',' Contains data for a particular APOGEE spectrum visit. ',' This table corresponds to the data in a single spectrum visit in APOGEE ','0');
INSERT DBObjects VALUES('apogee_net_apogee_star','U','U',' Results from the ApogeeNet astra pipeline for each star ',' Results from the ApogeeNet astra pipeline for each star ','0');
INSERT DBObjects VALUES('aspcap_apogee_star','U','U',' Results from the ASPCAP astra pipeline for each star ',' Results from the ASPCAP astra pipeline for each star.   The ASPCAP flag bitmaps are documented at   https://www.sdss.org/dr17/irspec/apogee-bitmasks#ParamBitMask,   and the weights used when computing each abundance are documented   at https://data.sdss5.org/sas/sdssrelease,   work/mwm/spectro/astra/component_data/aspcap/masks/ ','0');
INSERT DBObjects VALUES('astro_nn_apogee_star','U','U',' Results from the AstroNN astra pipeline for each star ',' Results from the AstroNN astra pipeline for each star ','0');
INSERT DBObjects VALUES('astro_nn_apogee_visit','U','U',' Results from the AstroNN astra pipeline for each visit ',' Results from the AstroNN astra pipeline for each visit ','0');
INSERT DBObjects VALUES('astro_nn_dist_apogee_star','U','U',' Results from the AstroNNdist astra pipeline for each star ',' Results from the AstroNNdist astra pipeline for each star ','0');
INSERT DBObjects VALUES('boss_net_boss_star','U','U',' Results from the BossNet astra pipeline for each star ',' Results from the BossNet astra pipeline for each star ','0');
INSERT DBObjects VALUES('boss_net_boss_visit','U','U',' Results from the BossNet astra pipeline for each visit ',' Results from the BossNet astra pipeline for each visit ','0');
INSERT DBObjects VALUES('corv_boss_visit','U','U',' Results from the Corv astra pipeline for each visit ',' Results from the Corv astra pipeline for each visit ','0');
INSERT DBObjects VALUES('line_forest_boss_star','U','U',' Results from the LineForest astra pipeline for each star ',' Results from the LineForest astra pipeline for each star ','0');
INSERT DBObjects VALUES('line_forest_boss_visit','U','U',' Results from the LineForest astra pipeline for each visit ',' Results from the LineForest astra pipeline for each visit ','0');
INSERT DBObjects VALUES('lite_all_star','U','U',' Parameters and elemental abundances for each star obtained by combining results from various pipelines. ',' Parameters and elemental abundances for each star obtained by combining results from various pipelines. ','0');
INSERT DBObjects VALUES('m_dwarf_type_boss_star','U','U',' Results from the MDwarfType astra pipeline for each star ',' Results from the MDwarfType astra pipeline for each star ','0');
INSERT DBObjects VALUES('m_dwarf_type_boss_visit','U','U',' Results from the MDwarfType astra pipeline for each visit ',' Results from the MDwarfType astra pipeline for each visit ','0');
INSERT DBObjects VALUES('mwm_apogee_allstar','U','U',' MWM data for each star from APOGEE  ',' MWM data for each star from APOGEE  ','0');
INSERT DBObjects VALUES('mwm_apogee_allvisit','U','U',' MWM data for each visit from APOGEE  ',' MWM data for each visit from APOGEE  ','0');
INSERT DBObjects VALUES('mwm_boss_allstar','U','U',' MWM data for each star from BOSS  ',' MWM data for each star from BOSS  ','0');
INSERT DBObjects VALUES('mwm_boss_allvisit','U','U',' MWM data for each visit from BOSS  ',' MWM data for each visit from BOSS  ','0');
INSERT DBObjects VALUES('mwm_targets','U','U',' Targeting information for each MWM target  ',' Targeting information for each MWM target  ','0');
INSERT DBObjects VALUES('slam_boss_star','U','U',' Results from the Slam astra pipeline for each star ',' Results from the Slam astra pipeline for each star ','0');
INSERT DBObjects VALUES('snow_white_boss_star','U','U',' Results from the SnowWhite astra pipeline for each star ',' Results from the SnowWhite astra pipeline for each star ','0');
INSERT DBObjects VALUES('snow_white_boss_visit','U','U',' Results from the SnowWhite astra pipeline for each visit ',' Results from the SnowWhite astra pipeline for each visit ','0');
INSERT DBObjects VALUES('the_payne_apogee_star','U','U',' Results from the ThePayne astra pipeline for each star ',' Results from the ThePayne astra pipeline for each star ','0');
INSERT DBObjects VALUES('the_payne_apogee_visit','U','U',' Results from the ThePayne astra pipeline for each visit ',' Results from the ThePayne astra pipeline for each visit ','0');
INSERT DBObjects VALUES('mangaDRPall','U','U',' Final summary file of the MaNGA Data Reduction Pipeline (DRP). ',' Contains all of the information required to find a given set of spectra  for a target. ','0');
INSERT DBObjects VALUES('mangatarget','U','U',' MaNGA Target Catalog ',' The MaNGA targeting catalog, v1_2_27. This table contains the details of  the three main MaNGA samples, Primary, Secondary and Color-Enhanced, as  well as the ancillary targets. In addition to the targeting information  there are details of the tile and IFU allocation as of 02/02/2018. This  tiling and allocation details may change slightly as the survey evolves.  Also included are various useful parameters from the NASA-Sloan Atlas  (NSA) catalog, v1_0_1, which was used to select almost all of the targets.  A few ancillary targets may have been selected from elsewhere. Targets  cover the full SDSS spectroscopic DR7 region, although only approximately  1/3 will be observed in the final survey. ','0');
INSERT DBObjects VALUES('nsatlas','U','U',' NASA-Sloan Atlas catalog ',' The NASA-Sloan Atlas (NSA) catalog, v1_0_1. This NSA sample was  selected to include virtually all known redshifts out to about  z &lt; 0.15 for galaxies within the coverage of SDSS DR11. For each  such galaxy, we have created image mosaics from SDSS and GALEX and  rephotometered the ugriz bands plus the far and near ultraviolet  bands in a self-consistent manner. After cleaning a number of  suspicious cases the final catalog contains about 640,000  galaxies. See http://nsatlas.org for more information.  <br><br>  We recommend the use of the elliptical Petrosian photometry from   this catalog. K-corrected absolute magnitudes are provided using  kcorrect v4_2.   <br><br>  There are cases of elliptical Petrosian quantities in this file  with <code>_r_original</code> suffices (e.g. <code>petro_flux_r_original</code>),   to indicate that these are the original quantities determined for the  r-band, without corrections. They differ from the r-band values in the  arrays (e.g. <code>petro_flux_r_original</code>) in those cases where the  Petrosian radius was undefined in the r-band. In those cases, the  quantities in the arrays assume a Petrosian radius of 5 arcsec.  <br><br>  All absolute magnitudes are given with <i>H<sub>0</sub> = 100 h km  s<sup>-1</sup> Mpc<sup>-1</sup></i>, so should be interpreted as   <i>M - 5 log<sub>10</sub> h</i>. ','0');
INSERT DBObjects VALUES('mangaFirefly','U','U',' Contains the measured stellar population parameters for each MaNGA galaxy. ',' *** NOTE *** For DR17, this table is superseded by the two new tables:  mangaFirefly_mastar and mangaFirefly_miles.  This is a base table containing spectroscopic  information and the results of the FIREFLY fits on  the MaNGA Voronoi binned spectra with S/N threshold of 10.  This run has been computed using Maraston & Stromback (M11, 2011) models with   the MILES stellar library and a Kroupa stellar initial mass function. ','0');
INSERT DBObjects VALUES('mangaPipe3D','U','U',' Data products of MaNGA cubes derived using Pipe3D. ',' Contains all the information of each dataproduct. ','0');
INSERT DBObjects VALUES('mangaDAPall','U','U',' Final summary file of the MaNGA Data Analysis Pipeline (DAP). ',' Collated summary information about the DAP methods, and global metrics   derived from the DAP analysis products useful for sample selection. ','0');
INSERT DBObjects VALUES('mangaHIall','U','U',' A catalog of integrated HI properties for MaNGA galaxies ',' Measured parameters for all SDSS-IV MaNGA targets observed with the  Green Bank Telescope (under projects AGBT16A_095, AGBT17A_012,  AGBT19A_127,  AGBT20B_033) or in the ALFALFA survey.  All measurements were made on  baselined spectra after hanning and boxcar smoothing to a final resolution  of 10 km/s. For further details, see Masters et al. (2019, MNRAS, 488,  3396) and Stark et al. (2021, MNRAS, 503, 1345). ','0');
INSERT DBObjects VALUES('mangaHIbonus','U','U',' Catalogue of bonus detections under program AGBT16A_095 ',' Measured parameters for all detections in Green Bank Telescope program  AGBT16A_095 that were not the primary target of each observation (i.e.,\  other objects that happened to be within the 9'' GBT beam). All  measurements were made on baselined spectra after hanning and boxcar  smoothing to a final resolution of 10 km/s'' ','0');
INSERT DBObjects VALUES('mangaGalaxyZoo','U','U',' Galaxy Zoo classifications for all MaNGA target galaxies ',' This tables contains one entry per MaNGA target galaxy.  The Galaxy Zoo (GZ) data for SDSS galaxies has been split   over several iterations of the website, with the MaNGA target   galaxies being spread over 5 different GZ data sets. In this   value added catalog we bring all of these galaxies into one single   catalog and re-run the debiasing code (Hart 2016) in a consistent   manner across the all the galaxies. This catalog includes data from  Galaxy Zoo 2 (previously published) and newer data from   Galaxy Zoo 4 (currently unpublished). ','0');
INSERT DBObjects VALUES('mangaAlfalfaDR15','U','U',' LFALFA data for the currently public MaNGA sample ',' Measured paramters for all currently public MaNGA galaxies within the  ALFALFA survey footprint (Haynes et al. 2018).  Any object within 2'' and  200 km/s line-of-sight velocity of an HI centroid is considered a match.    For this reason, multiple galaxies can have the same ALFALFA match. ','0');
INSERT DBObjects VALUES('MaNGA_GZ2','U','U',' This table contains Galaxy Zoo 2 classifications for most MaNGA galaxies. ',' This table contains a match between various iterations of Galaxy Zoo and  final MaNGA galaxies. The galaxies in this table were obtained from two  different sources.   Most (>80%) of the galaxies in this table come from a match of the MaNGA  galaxies with Galaxy Zoo 2 (GZ2, Willett 2013, MNRAS, 435, 2835) on RA  and DEC, with a matching radius of 5 arcseconds. Only the closest match  was kept. In this table, we used the version of GZ2 with the debiasing  method described in Hart et al. 2016, MNRAS, 461, 3663.  For the remaining MaNGA galaxies without a counterpart in GZ2, we turned  to a previously released VAC, described here:  https://www.sdss.org/dr16/data_access/value-added-catalogs/?  vac_id=manga-morphologies-from-galaxy-zoo.  If that galaxy can be found in this VAC, we copied its information for  there. The column ‘in_GZ2’ describes whether a galaxy came from matching  with GZ2 or from the older VAC.  Every task and answer pair in the GZ decision tree is noted as follows:  t#_task_test_a#_answer_text_suffix, where ''suffix'' can be one of:  ''count'', ''weight'', ''fraction'', ''weighted_fraction'', ''debiased'' or ''flag''.  We strongly encourage the use of the ‘_debiased’ fractions. For more  information on these columns, please refer to Willett et al. 2013, MNRAS,  435, 2835.  ','0');
INSERT DBObjects VALUES('MaNGA_GZD_auto','U','U',' This table contains the automated Galaxy Zoo DECaLS classifications for   MaNGA galaxies that have them. ',' This table contains a match between the automated Galaxy Zoo DECaLS (GZD)  classifications and the final MaNGA galaxies. The match was done on the  NSA IAUNAME.   However, there was a very small subset of MaNGA galaxies without an NSA  IAUNAME. These were matched on RA and DEC with the GZD sample and only  included in this table after visual inspection by the authors. There are  only 15 galaxies added this way, and their NSA_IAUNAME was set to their  iauname in GZD.   For more information on Galaxy Zoo DECaLS, please refer to Walmsley et  al. 2021, arXiv:2102.08414.  ','0');
INSERT DBObjects VALUES('MaNGA_gzUKIDSS_rhdebiased','U','U',' This table contains a match between the Galaxy Zoo classifications based on UKIDSS images and the final MaNGA galaxies. ',' This table contains a match between the Galaxy Zoo classifications based on UKIDSS images and the final MaNGA galaxies. The match was done using RA, Dec.   For more information on Galaxy Zoo UKIDSS, please see Galloway 2017 (a PhD thesis submitted to the University of Minnesota).  ','0');
INSERT DBObjects VALUES('mastar_goodstars','U','U',' Summary file of MaNGA Stellar Libary. ',' Summary information for stars with at least one high quality   visit-spectrum. ','0');
INSERT DBObjects VALUES('mastar_goodvisits','U','U',' Summary file of all visits of stars included in MaNGA Stellar Libary. ',' Summary information for all of the good visits of the good stars. ','0');
INSERT DBObjects VALUES('mastar_goodstars_xmatch_gaiadr2','U','U',' Photometry crossmatch value added catalog of the good stars in the MaNGA  Stellar Libary (MaStar).  It includes crossmatch with Gaia DR2, 2MASS,  PanSTARRS1, and object type/spectral type information from Simbad. ',' Summary information for good stars with at least one high quality  visit-spectrum. ','0');
INSERT DBObjects VALUES('mastar_goodstars_xmatch_gaiaedr3','U','U',' Photometry crossmatch value added catalog of the good stars in the MaNGA  Stellar Libary (MaStar). It includes crossmatch with Gaia DR2, 2MASS,  PanSTARRS1, and object type/spectral type information from Simbad. ',' Summary information for good stars with at least one high quality  visit-spectrum. ','0');
INSERT DBObjects VALUES('mastar_goodstars_params','U','U',' Summary file of all of the good stars in the stellar parameter VAC for   the MaNGA Stellar Libary (MaStar). ',' Summary information for stars with at least one high quality   visit-spectrum. ','0');
INSERT DBObjects VALUES('mastar_goodvisits_params','U','U',' Summary file of the good visits of good stars in the stellar parameter   VAC for the MaNGA Stellar Libary (MaStar). ',' Summary information for all of the good visits of the good stars. ','0');
INSERT DBObjects VALUES('qsoVarPTF','U','U',' Variability information on eBOSS quasar targets using PTF lightcurves. ',' The table ''qsoVarPTF'' contains variability informations for most DR13 QSO   targets (EBOSS_TARGET1=0,9,10,11,12), derived from the combination of   SDSS and PTF photometries, on a large fraction of the eBOSS footprint.  Due to the inhomogeneity of the PTF sky survey, the sensitivity of these  variability measurements is highly variable as a function of sky  coordinates. ','0');
INSERT DBObjects VALUES('qsoVarStripe','U','U',' Variability information on eBOSS quasar targets using SDSS stripe 82 data. ',' The table ''qsoVarStripe'' contains additional informations derived from   essentially all multi-epoq SDSS photometry carried out in the Stripe 82  region. ','0');
INSERT DBObjects VALUES('Frame','U','U',' Contains JPEG images of fields at various zoom factors, and their astrometry. ',' The frame is the basic image unit. The table contains   false color JPEG images of the fields, and their most  relevant parameters, in particular the coefficients of  the astrometric transformation, and position info.   The images are stored at several zoom levels. ','0');
INSERT DBObjects VALUES('spComputeFrameHTM','P','A',' Compute the HTM and the other params for a Frame. ',' Needs to be run as the last step of the Frame loading.  It should be executed automatically by a DTS script. ','0');
INSERT DBObjects VALUES('spMakeFrame','P','A',' Build the the Frame from the Field table for a given run ',' A support procedure, only used by spLoadZoom. ','0');
INSERT DBObjects VALUES('fTileFileName','F','A',' Builds the filename for Frame, used in spMakeFrame. ',' Another one of the service functions, used only when loading the database. ','0');
INSERT DBObjects VALUES('zooConfidence','U','U',' Measures of classification confidence from Galaxy Zoo. ',' Only galaxies with spectra in DR7 are included (those in the zooSpec table).  This information is identical to that in Galaxy Zoo 1 Table 4.  The project is described in Lintott et al., 2008, MNRAS, 389, 1179 and the  data release is described in Lintott et al. 2010. Anyone making use of the   data should cite at least one of these papers in any resulting publications. ','0');
INSERT DBObjects VALUES('zooMirrorBias','U','U',' Results from the bias study using mirrored images from Galaxy Zoo ',' This information is identical to that in Galaxy Zoo 1 Table 5.  The project is described in Lintott et al., 2008, MNRAS, 389, 1179 and the  data release is described in Lintott et al. 2010. Anyone making use of the   data should cite at least one of these papers in any resulting publications. ','0');
INSERT DBObjects VALUES('zooMonochromeBias','U','U',' Results from the bias study that introduced monochrome images in Galaxy Zoo. ',' This information is identical to that in Galaxy Zoo 1 Table 6.  The project is described in Lintott et al., 2008, MNRAS, 389, 1179 and the  data release is described in Lintott et al. 2010. Anyone making use of the   data should cite at least one of these papers in any resulting publications. ','0');
INSERT DBObjects VALUES('zooNoSpec','U','U',' Morphology classifications of galaxies without spectra from Galaxy Zoo  ',' This information is identical to that in Galaxy Zoo 1 Table 3.   Some objects may have spectroscopic matches in DR8 (though they did   not in DR7) It is not possible to estimate the bias in the sample, and so   only the fraction of the vote in each of the six categories is given.  The project is described in Lintott et al., 2008, MNRAS, 389, 1179 and the  data release is described in Lintott et al. 2010. Anyone making use of the   data should cite at least one of these papers in any resulting publications. ','0');
INSERT DBObjects VALUES('zooSpec','U','U',' Morphological classifications of spectroscopic galaxies from Galaxy Zoo ',' This information is identical to that in Galaxy Zoo 1 Table 2.  This table includes galaxies with spectra in SDSS Data Release 7.  The fraction of the vote in each of the six categories is given, along with   debiased votes in elliptical and spiral categories and flags identifying   systems as classified as spiral, elliptical or uncertain.  The project is described in Lintott et al., 2008, MNRAS, 389, 1179 and the  data release is described in Lintott et al. 2010. Anyone making use of the   data should cite at least one of these papers in any resulting publications. ','0');
INSERT DBObjects VALUES('zooVotes','U','U',' Vote breakdown in Galaxy Zoo results. ',' Fraction of votes in each of the six categories, combining results from the main   and bias studies. This information is identical to that in Galaxy Zoo 1 Table 7.  The project is described in Lintott et al., 2008, MNRAS, 389, 1179 and the  data release is described in Lintott et al. 2010. Anyone making use of the   data should cite at least one of these papers in any resulting publications. ','0');
INSERT DBObjects VALUES('zoo2MainPhotoz','U','U',' Description: Morphological classifications of main-sample galaxies  with photometric redshifts only from Galaxy Zoo 2 ',' This table includes galaxies without spectra in SDSS Data Release 7.  Several columns give data that can be used to cross-match rows with  other SDSS tables, including objIDs and positions of the galaxies.  Morphological classifications include six parameters for each category:  unweighted and weighted versions of both the total number of votes and  the vote fraction for that response, the vote fraction after being  debiased, and flags for systems identified as being in clean samples.    Reference:  The project and data release are described in Willett et al.  (2013, in prep). Please cite this paper if making use of any data in  this table in publications. ','0');
INSERT DBObjects VALUES('zoo2MainSpecz','U','U',' Morphological classifications of main-sample spectroscopic galaxies  from Galaxy Zoo 2. ',' This table includes galaxies with spectra in SDSS Data Release 7.  Several columns give data that can be used to cross-match rows with  other SDSS tables, including objIDs and positions of the galaxies.  Morphological classifications include six parameters for each category:  unweighted and weighted versions of both the total number of votes and  the vote fraction for that response, the vote fraction after being  debiased, and flags for systems identified as being in clean samples.   Note that this table and zoo2Stripe82Normal contain some of the same  galaxies (with r < 17.0).   Reference:  The project and data release are described in Willett et  al. (2013, in prep). Please cite this paper if making use of any data  in this table in publications. ','0');
INSERT DBObjects VALUES('zoo2Stripe82Coadd1','U','U',' Morphological classifications of Stripe 82, coadded (sample  1) spectroscopic galaxies from Galaxy Zoo 2 ',' This table includes classifications from coadded images of Stripe 82  galaxies in SDSS Data Release 7. The co-addition method is described in  Willett et al.; it differs from the second sample in that these images  did NOT desaturate color in their noisy background pixels. Several  columns give data that can be used to cross-match rows with other SDSS  tables, including objIDs and positions of the galaxies. Morphological  classifications include six parameters for each category: unweighted and  weighted versions of both the total number of votes and the vote fraction  for that response, the vote fraction after being debiased, and flags for  systems identified as being in clean samples.   Reference:  The project and data release are described in Willett et al.  (2013, in prep). Please cite this paper if making use of any data in this  table in publications. ','0');
INSERT DBObjects VALUES('zoo2Stripe82Coadd2','U','U',' Morphological classifications of Stripe 82, coadded (sample 2)  spectroscopic galaxies from Galaxy Zoo 2 ',' This table includes classifications from coadded images of Stripe 82  galaxies in SDSS Data Release 7. Sky background pixels for these co-added  images were desaturated to attempt and avoid bias by classifiers, as  described in Willett et al. Several columns give data that can be used to  cross-match rows with other SDSS tables, including objIDs and positions  of the galaxies. Morphological classifications include six parameters for  each category: unweighted and weighted versions of both the total number  of votes and the vote fraction for that response, the vote fraction after  being debiased, and flags for systems identified as being in clean samples.   Reference:	The project and data release are described in Willett et al.  (2013, in prep). Please cite this paper if making use of any data in  this table in publications. ','0');
INSERT DBObjects VALUES('zoo2Stripe82Normal','U','U',' Morphological classifications of Stripe 82 normal-depth, spectroscopic  galaxies from Galaxy Zoo 2 ',' This table includes Stripe 82 galaxies with spectra in SDSS Data Release  7. Several columns give data that can be used to cross-match rows with  other SDSS tables, including objIDs and positions of the galaxies.  Morphological classifications include six parameters for each category:  unweighted and weighted versions of both the total number of votes and  the vote fraction for that response, the vote fraction after being  debiased, and flags for systems identified as being in clean samples.   Note that this table and zoo2MainSpecz contain some of the same  galaxies (with r < 17.0).    Reference:	The project and data release are described in Willett et al.  (2013, in prep). Please cite this paper if making use of any data in  this table in publications. ','0');
INSERT DBObjects VALUES('marvelsVelocityCurveUF1D','U','U',' Contains data for a particular MARVELS velocity curve using UF1D technique. ',' This table corresponds to the data in a single velocity curve measurement ','0');
INSERT DBObjects VALUES('marvelsStar','U','U',' Contains data for a MARVELS star. ',' This table corresponds to the data for a star whose velocity curve is  measured in MARVELS.  ','0');
INSERT DBObjects VALUES('PhotoObj','V','U',' All primary and secondary objects in the PhotoObjAll table, which contains all the attributes of each photometric (image) object.  ',' It selects PhotoObj with mode=1 or 2. ','0');
INSERT DBObjects VALUES('PhotoPrimary','V','U',' These objects are the primary survey objects.  ',' Each physical object   on the sky has only one primary object associated with it. Upon   subsequent observations secondary objects are generated. Since the   survey stripes overlap, there will be secondary objects for over 10%   of all primary objects, and in the southern stripes there will be a   multitude of secondary objects for each primary (i.e. reobservations).  ','0');
INSERT DBObjects VALUES('PhotoSecondary','V','U',' Secondary objects are reobservations of the same primary object. ','','0');
INSERT DBObjects VALUES('PhotoFamily','V','U',' These are in PhotoObj, but neither PhotoPrimary or Photosecondary. ',' These objects are generated if they are neither primary nor   secondary survey objects but a composite object that has been   deblended or the part of an object that has been deblended   wrongfully (like the spiral arms of a galaxy). These objects   are kept to track how the deblender is working. It inherits   all members of the PhotoObj class.  ','0');
INSERT DBObjects VALUES('Star','V','U',' The objects classified as stars from PhotoPrimary ',' The Star view essentially contains the photometric parameters  (no redshifts or spectroscopic parameters) for all primary  point-like objects, including quasars. ','0');
INSERT DBObjects VALUES('Galaxy','V','U',' The objects classified as galaxies from PhotoPrimary. ',' The Galaxy view contains the photometric parameters (no  redshifts or spectroscopic parameters) measured for  resolved primary objects. ','0');
INSERT DBObjects VALUES('PhotoTag','V','U',' The most popular columns from PhotoObjAll. ',' This view contains the most popular columns from the  PhotoObjAll table, and is intended to enable faster  queries if they only request these columns by making   use of the cache.  Performance is also enhanced by  an index covering the columns in this view in the base  table (PhotoObjAll). ','0');
INSERT DBObjects VALUES('StarTag','V','U',' The objects classified as stars from primary PhotoTag objects. ',' The StarTag view essentially contains the abbreviated photometric   parameters from the PhotoTag table (no redshifts or spectroscopic  parameters) for all primary point-like objects, including quasars. ','0');
INSERT DBObjects VALUES('GalaxyTag','V','U',' The objects classified as galaxies from primary PhotoTag objects. ',' The GalaxyTag view essentially contains the abbreviated photometric   parameters from the PhotoTag table (no redshifts or spectroscopic  parameters) for all primary point-like objects, including quasars. ','0');
INSERT DBObjects VALUES('Sky','V','U',' The objects selected as sky samples in PhotoPrimary ','','0');
INSERT DBObjects VALUES('Unknown','V','U',' Everything in PhotoPrimary, which is not a galaxy, star or sky ','','0');
INSERT DBObjects VALUES('SpecPhoto','V','U',' A view of joined Spectro and Photo objects that have the clean spectra. ',' The view includes only those pairs where the SpecObj is a  sciencePrimary, and the BEST PhotoObj is a PRIMARY (mode=1). ','0');
INSERT DBObjects VALUES('SpecObj','V','U',' A view of Spectro objects that just has the clean spectra. ',' The view excludes QA and Sky and duplicates. Use this as the main  way to access the spectro objects. ','0');
INSERT DBObjects VALUES('Columns','V','U',' Aliias the DBColumns table also as Columns, for legacy SkyQuery ','','0');
INSERT DBObjects VALUES('segue1SpecObjAll','V','U',' A view of specObjAll that includes only SEGUE1 spectra ',' The view excludes spectra that are not part of the SEGUE1 program. ','0');
INSERT DBObjects VALUES('segue2SpecObjAll','V','U',' A view of specObjAll that includes only SEGUE2 spectra ',' The view excludes spectra that are not part of the SEGUE2 program. ','0');
INSERT DBObjects VALUES('segueSpecObjAll','V','U',' A view of specObjAll that includes only SEGUE1+SEGUE2 spectra ',' The view excludes spectra that are not part of the SEGUE1  or SEGUE2 programs. ','0');
INSERT DBObjects VALUES('sdssTile','V','U',' A view of sdssTileAll that have untiled=0 ',' The view excludes those sdssTiles that have been untiled. ','0');
INSERT DBObjects VALUES('sdssTilingBoundary','V','U',' A view of sdssTilingGeometry objects that have isMask = 0 ',' The view excludes those sdssTilingGeometry objects that have   isMask = 1.  See also sdssTilingMask. ','0');
INSERT DBObjects VALUES('sdssTilingMask','V','U',' A view of sdssTilingGeometry objects that have isMask = 1 ',' The view excludes those sdssTilingGeometry objects that have   isMask = 0.  See also sdssTilingBoundary. ','0');
INSERT DBObjects VALUES('TableDesc','V','U',' Extract the description and index group of each table in schema. ',' The view extracts the description of each table from the   DBObjects table and the index group from the IndexMap table.  This allows all table descriptions to be viewed in one list. ','0');
INSERT DBObjects VALUES('spiders_quasar','U','U',' The SPIDERS quasar eRosita source ',' This table contains data for the SPIDERS (SPectroscopic IDentification  of ERosita  Sources) quasar spectroscopic followup Value Added Catalog  (VAC) based on SDSS DR14. ','0');
INSERT DBObjects VALUES('PawlikMorph','U','U',' Morphological parameters for all galaxies in MaNGA DR15 ',' This table provides the CAS, gini, M20, shape asymmetry, curve of growth  radii, sersic fits and associated parameters measured from SDSS DR7  imaging using the 8-connected structure detection algorithm to define the  edges of the galaxies presented in Pawlik et al. (2016, MNRAS, 456, 3032)  for all galaxies in MaNGA DR15. This is the original implementation of  the Shape Asymmetry algorithm.  ','0');
INSERT DBObjects VALUES('apogeeDistMass','U','U','','','0');
INSERT DBObjects VALUES('ebossMCPM','U','U',' The catalog containing matter density estimates from the MCPM algorithm  for the eBOSS catalog.  ',' This catalogue contains estimates of the local matter density at the  location of galaxies based on the Monte Carlo Physarum Machine (MCPM)  algorithm, inspired by the growth and movement of Physarum polycephalum  slime mold. We employ this algorithm to reconstruct the cosmic web and  provide estimates for the matter density field at the locations of  SDSS galaxies, both those from Classic SDSS and eBOSS LRG program. ','0');
INSERT DBObjects VALUES('mangaFirefly_miles','U','U',' Contains the measured stellar population parameters for each MaNGA galaxy. ',' This is a base table containing spectroscopic global galaxy  information and the results of the FIREFLY full spectral fits on  the MaNGA Voronoi binned spectra with S/N threshold of 10.  The catalogue is offered in two versions:  The first version has been computed using Maraston & Stromback (M11, 2011) models with   the MILES stellar library and a Kroupa stellar initial mass function.  The second version has been computed using the models of Maraston (2020) based on the  MaStar stellar library (Yan et al. 2019) and a Kroupa stellar initial mass function.  This is the mangaFirefly catalogue using the m11-MILES models. ','0');
INSERT DBObjects VALUES('mangaFirefly_mastar','U','U',' Contains the measured stellar population parameters for each MaNGA galaxy. ',' This is a base table containing spectroscopic global galaxy  information and the results of the FIREFLY full spectral fits on  the MaNGA Voronoi binned spectra with S/N threshold of 10.  The catalogue is offered in two versions:  The first version has been computed using Maraston & Stromback (M11, 2011) models with   the MILES stellar library and a Kroupa stellar initial mass function.  The second version has been computed using the models of Maraston (2020) based on the  MaStar stellar library (Yan et al. 2019) and a Kroupa stellar initial mass function.  This is the mangaFirefly catalogue using the MaStar models. ','0');
INSERT DBObjects VALUES('eFEDS_Main_speccomp','U','U',' eROSITA/eFEDS Main source catalogue counterparts with redshifts/classifications updated with SDSS-V information. ',' A catalogue of soft X-ray (0.2-2.3 keV) selected sources detected in the eROSITA/eFEDS performance verification field (Brunner et al., 2022),   and classificaions (w.r.t. Salvato et al. 2022), using a spectroscopic compilation, derived from several facilities,   but dominated by SDSS/BOSS spectroscopy. We include new information derived from 37 dedicated SDSS-V plates, observed between Dec 2020-May 2021.   We combine automated redshift and classifications, provided by the standard SDSS idlspec1d pipeline, with an extensive and targeted set of   visual inspections, which increases the reliability and completeness of the spectroscopic coverage. ','0');
INSERT DBObjects VALUES('eFEDS_Hard_speccomp','U','U',' eROSITA/eFEDS Hard source catalogue counterparts with redshifts/classifications updated with SDSS-V information. ',' A catalogue of hard X-ray (2.3-5 keV) selected sources detected in the eROSITA/eFEDS performance verification field (Brunner et al., 2022),   with optical/IR counterpart associations (Salvato et al., 2022). This catalogue (Merloni et al., in prep) updates the spectroscopic redshift   and classificaions (w.r.t. Salvato et al. 2022), using a spectroscopic compilation, derived from several facilities, but dominated by   SDSS/BOSS spectroscopy. We include new information derived from 37 dedicated SDSS-V plates, observed between Dec 2020-May 2021.   We combine automated redshift and classifications, provided by the standard SDSS idlspec1d pipeline, with an extensive and targeted set of visual inspections,   which increase the reliability and completeness of the spectroscopic coverage. ','0');
INSERT DBObjects VALUES('eFEDS_SDSSV_spec_results','U','U',' SDSS-V/eFEDS catalogue of spectroscopic redshift and visual inspection information. ',' A catalogue of spectroscopic redshifts and classifications derived solely from the SDSS-V/eFEDS plate data set.   The pipeline redshift/classification information for many spectra is supplemented by the results of   an extensive visual inspection process. We include an entry for all spectra of science targets in the SDSS-V/eFEDS plates,   regardless of whether they are deemed to be counterparts to eROSITA X-ray sources. ','0');
INSERT DBObjects VALUES('allVisit_MADGICS_th','U','U',' Summary file of scalar outputs from apMADGICS pipeline processing of all  visit spectra in APOGEE DR17 for star_prior_type = ''th'' ',' Summary file of scalar outputs from apMADGICS pipeline processing of all   visit spectra in APOGEE DR17. Contains stellar radial velocities,  DIB properties, and crossmatches to the standard APOGEE DRP allStar and   allVisit files, for star_prior_type = ''dd''. ','0');
INSERT DBObjects VALUES('allVisit_MADGICS_dd','U','U',' Summary file of scalar outputs from apMADGICS pipeline processing of all   visit spectra in APOGEE DR17 for star_prior_type = ''dd'' ',' Summary file of scalar outputs from apMADGICS pipeline processing of all   visit spectra in APOGEE DR17. Contains stellar radial velocities,  DIB properties, and crossmatches to the standard APOGEE DRP allStar and   allVisit files, for star_prior_type = ''dd''. ','0');
INSERT DBObjects VALUES('minesweeper','U','U',' MINESweeper parameters for halo stars from SDSS-V MWM ',' Stellar parameters for distant and metal-poor halo stars from the   SDSS-V Milky Way Mapper survey, fit using the Bayesian MINESweeper   code. Stellar parameters are estimated via a simultaneous fit to the   spectrum, photometry, and parallax, and solutions are constrained to   lie on MIST isochrones. A full description of MINESweeper is presented  in Cargile et al (2020). ','0');
INSERT DBObjects VALUES('mwm_mdwarf_abundances','U','U',' Elemental abundances for ~17,000 M dwarfs in MWM. ',' Catalog of detailed elemental abundances for ~17,000 M dwarfs in MWM (Behmard et al. 2025, Table 2). ','0');
INSERT DBObjects VALUES('MWM_WD_SDSSV_DA_df','U','U',' Measurements of physical parameters for DA white dwarfs observed in   SDSS Data Release 19. ',' Measurements of radial velocities, spectroscopic effective temperatures  and surface gravities, and photometric effective temperatures and radii  for 8,545 unique DA white dwarfs observed in SDSS Data Release 19. ','0');
INSERT DBObjects VALUES('MWM_WD_eSDSS_DA_df','U','U',' Measurements of physical parameters for DA white dwarfs observed in SDSS   Data Releases 1 through 16.  ',' Measurements of radial velocities, spectroscopic effective temperatures  and surface gravities, and photometric effective temperatures and radii  for 19,257 unique DA white dwarfs observed in SDSS Data Releases 1   through 16. ','0');
INSERT DBObjects VALUES('DR19Q_prop','U','U',' Spectral measurements of DR19 quasars using PyQSOFit ',' Quasar spectral properties measured by PyQSOFit, including the continuum  and emission line properties (flux, FWHM, EW...), virial BH masses, bolometric  luminosities, Eddington ratios, systemic redshift, etc. Host galaxy properties  are also provided for z<1 quasars. ','0');
INSERT DBObjects VALUES('occam_cluster','U','U',' The OCCAM cluster summary table provides mean cluster parameters for 170 open clusters. ',' The OCCAM cluster summary table provides a comprehensive, uniform  dataset for open clusters. It contains mean 5-D astrometry from Gaia (Cantat-Gaudin  et al. 2020, Hunt & Reffert 2023), mean orbital parameters calculated using Gala  (Adrian M. Price-Whelan 2017), an orbital dynamics code, and mean radial velocities  and chemical abundances from MWM/APOGEE. ','0');
INSERT DBObjects VALUES('occam_member','U','U',' The OCCAM member summary table provides positional, identification, and  membership information for 1196 candidate open cluster member stars. ',' The OCCAM member summary table provides the proper motion membership  probabilities from Cantat-Gaudin et al. 2020 and Hunt and Reffert 2023 alongside  the radial velocity and [Fe/H] membership probabilities from MWM/APOGEE. Basic  postional information is included with source IDs from Gaia DR2/3 and SDSS-V DR19  for each star in the table. ','0');
INSERT DBObjects VALUES('StarFlow_summary','U','U',' Summary table of age and mass posteriors with the maximum liklihood and corresponding errorbars ',' Stellar age and mass estimates for 378,720 evolved stars from SDSS-V DR19, derived using a  normalizing flow model trained on asteroseismic data. Each entry includes maximum likelihood  age and mass estimates, 1σ uncertainties, and a training space density metric indicating the  models confidence based on parameter coverage. ','0');
INSERT DBObjects VALUES('DL1_eROSITA_eRASS1','U','U',' SDSS and eROSITA data of the sources within the SPIDERS program ',' Data Level 1 contains the data shared among the collaborations of SDSS and eROSITA, with optical and X-ray information  of sources that were detected with eROSITA and followed-up with SDSS ','0');
INSERT DBObjects VALUES('DL1_eROSITA_eRASS1_allepoch','U','U',' SDSS and eROSITA data of the sources within the SPIDERS program (allepoch) ',' Data Level 1 contains the data shared among the collaborations of SDSS and eROSITA, with optical and X-ray information  of sources that were detected with eROSITA and followed-up with SDSS (allepoch) ','0');
INSERT DBObjects VALUES('apogee_starhorse','U','U',' StarHorse results for the SDSS-V DR19 APOGEE giants ',' This file contains spectro-photo-astrometric distances, extinctions, and stellar parameters such as temperature,  masses and metallicity for giant stars with the SDSS-V DR19 APOGEE spectroscopy using the StarHorse code  Queiroz et al. 2018 (https://ui.adsabs.harvard.edu/abs/2018MNRAS.476.2556Q/abstract,  Queiroz et al. 2023 https://ui.adsabs.harvard.edu/abs/2023A%26A...673A.155Q/abstract). Parameters are estimated  for each unique sdss_id in the data release, provided the StarHorse code successfully converges. If a star has  multiple sdss_ids, the ASPCAP results with the highest signal-to-noise ratio (snr) are used. For each star, StarHorse  computes the joint posterior probability distribution function (PDF) over a grid of PARSEC 1.2S stellar models, using  input values including ASPCAP-derived effective temperature, surface gravity, metallicity, and alpha-element abundance,  as well as Gaia DR3 parallaxes (when available), and multi-band photometry from Pan-STARRS1, 2MASS, and AllWISE. ASPCAP  effective temperature and surface gravity are calibrated before input to StarHorse. Calibration details are described  in the SDSS DR19 main publication. The VAC includes median values of marginalized PDFs for mass, temperature, surface  gravity, metallicity, distance, and extinction. The StarHorse_INPUTFLAGS column indicates the input data used, while  StarHorse_OUTFLAGS flags possibly uncertain outputs. Calibrated temperature and surface gravity are also included. ','0');
INSERT DBObjects VALUES('mos_allstar_dr17_synspec_rev1','U','U',' The APOGEE All-Star DR17 synspec catalogue. ','','0');
INSERT DBObjects VALUES('mos_allwise','U','U',' ALLWISE catalog: https://wise2.ipac.caltech.edu/docs/release/allwise/. For detailed descriptions of the columns see: https://wise2.ipac.caltech.edu/docs/release/allwise/expsup/sec2_1a.html ','','0');
INSERT DBObjects VALUES('mos_assignment','U','U',' This table stores the assignment of a given target in a carton to a fiber of a given instrument. A collection of assignments are included within a design, which is one configuration of the robots for an exposure. ','','0');
INSERT DBObjects VALUES('mos_best_brightest','U','U',' Catalog for the selection of bright metal-poor stars from the method of Schlaufman and Casey (2014): https://ui.adsabs.harvard.edu/abs/2014ApJ...797...13S/abstract. WISE values from WHICH CATALOG, 2MASS values from 2MASS point source catalog. ','','0');
INSERT DBObjects VALUES('mos_bhm_csc','U','U',' Chandra Source Catalogue version 2.0 (CSC2) sources. ',' Chandra Source Catalogue version 2.0 (CSC2) sources that have been matched  (separately) to the PanSTARRS-1 and 2MASS catalogs.  This version of the CSC2  catalog informed early (plate era) SDSS-V observations but was then replaced by  updated versions. ','0');
INSERT DBObjects VALUES('mos_bhm_csc_v2','U','U',' CSC2 X-ray sources. ',' This catalogue contains CSC2 X-ray sources that have been matched separately to  PanSTARRS-1, Gaia DR2, and 2MASS catalogs, using the programs NWAY (Johannes  Buchner; see: Salvato 2018, MN, 473, 4937) and Xmatch (Arnold Rots; see:  https://cxc.cfa.harvard.edu/csc/csc_crossmatches.html). Both are based on the  Bayesian spatial cross-matching algorithm developed by Budavari & Szalay (2008,  ApJ 679, 301), but Xmatch has the added capability of taking source extent  and/or PSF into account. Created March 2021 by Paul Green, Dong-Woo Kim, Arnold  Rots and the CXC CatSci group. ','0');
INSERT DBObjects VALUES('mos_bhm_efeds_veto','U','U',' The BHM-SPIDERS eFEDS veto catalogue. ',' A minimalist catalogue of 6300 science targets in the SPIDERS eFEDS field that  received SDSS-IV spectroscopy during the March2020 SPIDERS observing run (and  hence are not in SDSS-SpecObj-DR16). Many of these spectra have very low SNR and  so we will want to observe them again, but we will take account of this in the  Carton code. This is a subset (in both rows and columns) of the  spAll-v5_13_1.fits idlspec2d pipeline product. The original data model for that  file is here:  https://data.sdss.org/datamodel/files/BOSS_SPECTRO_REDUX/RUN2D/spAll.html ','0');
INSERT DBObjects VALUES('mos_bhm_rm_tweaks','U','U',' Reverberation mapping (RM) targets for SDSS-V. ',' This table enables small modifications to be made to the set of reverberation  mapping (RM) targets selected for observation in SDSS-V. The mos_bhm_rm_tweaks  table allows identification of confirmed QSOs which were observed in plate mode  that should be preferentially targeted in forward-looking FPS mode observations,  and reject candidates which the plate-mode observations have revealed to be  unsuitable for continued RM studies. ','0');
INSERT DBObjects VALUES('mos_bhm_rm_v0','U','U',' Parent sample for the RM project. ',' Used to select confirmed and candidate quasar targets for the BHM-RM Program in  SDSS-V. For more details please see Yang and Shen, (2022,  https://ui.adsabs.harvard.edu/abs/2022arXiv220608989Y/abstract). <br>  This table contains all photometric objects detected in the COSMOS, SDSS-RM,  XMM-LSS, CDFS, S-CVZ, and ELAIS-S1 fields., within a circular area of 10  degree^2 from the field center. <br>  Field center: Name     RA          DEC <br>                XMM-LSS  02:22:50.00    -04:45:00.0 <br>                CDFS     03:30:35.60    -28:06:00.0 <br>                EDFS     04:04:57.84    -48:25:22.8 <br>                ELAIS-S1 00:37:48.00    -44:00:00.0 <br>                COSMOS   10:00:00.00    +02:12:00.0 <br>                SDSS-RM  14:14:49.00    +53:05:00.0 <br>                S-CVZ    06:00:00.00    -66:33:38.0 <br>  The table includes information from the following survey data releases: <br>  DES: Dark Energy Survey, Y6, Y6A1_COADD_OBJECT_SUMMARY <br>  PS1: Pan-STARRS, DR1, StackObjectThin <br>  NSC: NOAO Source Catalog, DR1, nsc_dr1.object <br>  SDSS: Sloan Digital Sky Survey, DR14, PhotoObjAll <br>  Gaia: DR2, gaia_dr2.gaia_source <br>  unWISE: DR1 <br>  Near-infrared: LAS: UKIDSS Large Area Surveys (DR11), <br>                 UHS: UKIRT Hemisphere Survey (DR1), <br>                 VHS: VISTA Hemisphere Survey (DR6), <br>                 Viking: VISTA Kilo-Degree Infrared Galaxy Survey (DR5), <br>                 VIDEO: VISTA Deep Extragalactic Observations Survey (DR5), <br>                 VMC: VISTA Magellanic Cloud Survey (DR4) <br>  Values are set to -9.0 or -9 if null. <br>  The mos_bhm_rm_v0 table corresponds to Version: v0, 04/07/2020 <br>  Note that contents of the spec_q column are incorrect in this version of the  table. ','0');
INSERT DBObjects VALUES('mos_bhm_rm_v0_2','U','U',' Parent sample for the RM project. ',' Used to select confirmed and candidate quasar targets for the BHM-RM Program in  SDSS-V. For more details please see Yang and Shen, (2022,  https://ui.adsabs.harvard.edu/abs/2022arXiv220608989Y/abstract). <br>  This table contains all photometric objects detected in the COSMOS, SDSS-RM,  XMM-LSS, CDFS, S-CVZ, and ELAIS-S1 fields., within a circular area of 10  degree^2 from the field center. <br>  Field center: Name     RA          DEC <br>                XMM-LSS  02:22:50.00    -04:45:00.0 <br>                CDFS     03:30:35.60    -28:06:00.0 <br>                EDFS     04:04:57.84    -48:25:22.8 <br>                ELAIS-S1 00:37:48.00    -44:00:00.0 <br>                COSMOS   10:00:00.00    +02:12:00.0 <br>                SDSS-RM  14:14:49.00    +53:05:00.0 <br>                S-CVZ    06:00:00.00    -66:33:38.0 <br>  The table includes information from the following survey data releases: <br>  DES: Dark Energy Survey, Y6, Y6A1_COADD_OBJECT_SUMMARY <br>  PS1: Pan-STARRS, DR1, StackObjectThin <br>  NSC: NOAO Source Catalog, DR1, nsc_dr1.object <br>  SDSS: Sloan Digital Sky Survey, DR14, PhotoObjAll <br>  Gaia: DR2, gaia_dr2.gaia_source <br>  unWISE: DR1 <br>  Near-infrared: LAS: UKIDSS Large Area Surveys (DR11), <br>                 UHS: UKIRT Hemisphere Survey (DR1), <br>                 VHS: VISTA Hemisphere Survey (DR6), <br>                 Viking: VISTA Kilo-Degree Infrared Galaxy Survey (DR5), <br>                 VIDEO: VISTA Deep Extragalactic Observations Survey (DR5), <br>                 VMC: VISTA Magellanic Cloud Survey (DR4) <br>  Values are set to -9.0 or -9 if null. <br>  The mos_bhm_rm_v0_2 table corresponds to Version: v0.2, 06/30/2020 <br>  Changes (wrt v0) include correct error in spec_q column, and add specz from  OzDES DR2 ','0');
INSERT DBObjects VALUES('mos_bhm_spiders_agn_superset','U','U',' One of several tables describing optical/IR counterparts to eROSITA ',' X-ray sources identified via various methods. <br>  These tables contain a superset of potential targets from which the SDSS-V  spectroscopic targets were drawn.  The mos_bhm_spiders_agn_superset table  includes is expected to be dominated by Active Galactic Nuclei (AGN) but should  also include a significant minority of galaxies, stars and other Galactic  sources. Each row corresponds to one possible match between an X-ray source and  a potential optical/IR counterpart.  The X-ray columns (ero_*) record the  eROSITA information known at the time of target selection and may differ from  [public]ly available eROSITA catalogs. The mos_bhm_spiders_*_superset tables are  derived from eROSITA observations of the eROSITA Final Equatorial Depth  performance verification field (''eFEDS''). ','0');
INSERT DBObjects VALUES('mos_bhm_spiders_clusters_superset','U','U',' One of several tables describing optical/IR counterparts to eROSITA ',' X-ray sources identified via various methods. <br>  These tables contain a superset of potential targets from which the SDSS-V  spectroscopic targets were drawn.  The mos_bhm_spiders_clusters_superset table  includes counterparts selected via algorithms optimised to find clusters of  galaxies. Each row corresponds to one possible match between an X-ray source and  a potential optical/IR counterpart.  The X-ray columns (ero_*) record the  eROSITA information known at the time of target selection and may differ from  [public]ly available eROSITA catalogs. The mos_bhm_spiders_*_superset tables are  derived from eROSITA observations of the eROSITA Final Equatorial Depth  performance verification field (''eFEDS''). ','0');
INSERT DBObjects VALUES('mos_cadence','U','U',' Cadences define the time between series of exposures (one ''epoch'') on a field, and the observing conditions, e.g., skybrightness, for each epoch. ','','0');
INSERT DBObjects VALUES('mos_cadence_epoch','U','U',' Constraints for a single epoch within a cadence. ','','0');
INSERT DBObjects VALUES('mos_carton','U','U',' The table contains the list of cartons along with the target selection planname that generated them. ','','0');
INSERT DBObjects VALUES('mos_carton_csv','U','U','','','0');
INSERT DBObjects VALUES('mos_carton_to_target','U','U',' The table stores the targets assigned to a given carton along with information about the instrument that will observe that target, and offsetting data. ','','0');
INSERT DBObjects VALUES('mos_cataclysmic_variables','U','U',' Gaia DR2 parameters for AAVSO cataclysmic variables from cataclysmic (explosive and nova-like) variables (N, NA, NB, NC, NL, NR, SN, SNI, SNII, UG, UGSS, UGSU, UGZ, ZAND). VSX catalog downloaded in summer 2019 and then manually pruned. ','','0');
INSERT DBObjects VALUES('mos_catalog','U','U',' The results of the cross-match used for dr19 targeting. Entries in this table are expected to be unique physical objects drawn from one or more parent catalogues. The mos_catalog_to_ tables provide the relationships to their parent catalogue counterparts. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_allstar_dr17_synspec_rev1','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_allstar_dr17_synspec_rev1 table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_allwise','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_allwise table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_bhm_csc','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_bhm_csc table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_bhm_efeds_veto','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_bhm_efeds_veto table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_bhm_rm_v0','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_rm_v0 table. ',' Note: this table is identical to mos_catalog_to_bhm_rm_v0_2. ','0');
INSERT DBObjects VALUES('mos_catalog_to_bhm_rm_v0_2','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_rm_v0_2 table. ',' Note. This table is identical to mos_catalog_to_bhm_rm_v0. ','0');
INSERT DBObjects VALUES('mos_catalog_to_catwise2020','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_catwise2020 table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_gaia_dr2_source','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_gaia_dr2_source table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_glimpse','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_glimpse table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_guvcat','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_guvcat table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_legacy_survey_dr8','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_legacy_survey_dr8 table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_mangatarget','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_mangatarget table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_marvels_dr11_star','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_marvels_dr11_star table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_marvels_dr12_star','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_marvels_dr12_star table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_mastar_goodstars','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_mastar_goodstars table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_panstarrs1','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_panstarrs1 table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_sdss_dr13_photoobj_primary','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_sdss_dr13_photoobj_primary table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_sdss_dr16_specobj','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_sdss_dr16_specobj table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_sdss_dr17_specobj','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_sdss_dr17_specobj table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_skies_v1','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_skies_v1 table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_skies_v2','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_skies_v1 table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_skymapper_dr2','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_skymapper_dr2 table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_supercosmos','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_supercosmos table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_tic_v8','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_tic_v8 table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_twomass_psc','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_twomass_psc table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_tycho2','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_tycho2 table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_unwise','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_unwise table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_uvotssc1','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_uvotssc1 table. ','','0');
INSERT DBObjects VALUES('mos_catalog_to_xmm_om_suss_4_1','U','U',' The table contains the cross-match between the mos_catalog targets and the mos_xmm_om_suss_4_1 table. ','','0');
INSERT DBObjects VALUES('mos_catalogdb_version','U','U',' Table containing crossmatch versions ','','0');
INSERT DBObjects VALUES('mos_category','U','U',' This table indicates the category of a carton (science, standards, etc.) ','','0');
INSERT DBObjects VALUES('mos_catwise2020','U','U',' The CatWISE2020 Catalog (https://ui.adsabs.harvard.edu/abs/2021ApJS..253....8M/abstract) See https://irsa.ipac.caltech.edu/data/WISE/CatWISE/gator_docs/catwise_colDescriptions.html for more detailed column descriptions. ','','0');
INSERT DBObjects VALUES('mos_design','U','U',' This table stores the meta-data for the design, including its Design Mode and versioning information. ','','0');
INSERT DBObjects VALUES('mos_design_mode','U','U',' The parameters for the metrics that describe a given Design Mode, where a Design Mode constrains the assignments on a design. ','','0');
INSERT DBObjects VALUES('mos_design_mode_check_results','U','U',' Summary if design passed individual Design Mode checks from mos_design_mode. ','','0');
INSERT DBObjects VALUES('mos_design_to_field','U','U',' Connects a design to a given field within a version of the survey. Sets the placement of the design in the overall exposure sequence for that field. ','','0');
INSERT DBObjects VALUES('mos_ebosstarget_v5','U','U',' A catalog of targets, selected from SDSS+WISE imaging that were considered for observation in the SDSS-IV/eBOSS project, including spectrophotometric starts and candidate QSOs. ','  This catalogue is a data product of the ebosstarget target selection software,  version ''v5_0''. ','0');
INSERT DBObjects VALUES('mos_erosita_superset_agn','U','U',' One of several tables describing optical/IR counterparts to eROSITA ',' X-ray sources identified via various methods. <br>  These tables contain a superset of potential targets from which the SDSS-V  spectroscopic targets were drawn.  The mos_erosita_superset_agn table includes  counterparts to point-like X-ray sources. The sample is expected to be dominated  by Active Galactic Nuclei (AGN) but should also include a significant minority  of galaxies, stars and other Galactic sources. Each row corresponds to one  possible match between an X-ray source and a potential optical/IR counterpart.  The X-ray columns (ero_*) record the eROSITA information known at the time of  target selection and may differ from [public]ly available eROSITA catalogs. The  mos_erosita_superset_* tables are derived from a combination of eROSITA''s first  6-month survey of of the West Galactic hemisphere (''eRASS1''), and from the  eROSITA observations of the eROSITA Final Equatorial Depth performance  verification field (''eFEDS''). ','0');
INSERT DBObjects VALUES('mos_erosita_superset_clusters','U','U',' One of several tables describing optical/IR counterparts to eROSITA ',' X-ray sources identified via various methods. <br>  These tables contain a superset of potential targets from which the SDSS-V  spectroscopic targets were drawn. The mos_erosita_superset_clusters table  includes counterparts to both extended and point-like X-ray sources, selected  via algorithms optimised to find clusters of galaxies.  Each row corresponds to  one possible match between an X-ray source and a potential optical/IR  counterpart.  The X-ray columns (ero_*) record the eROSITA information known at  the time of target selection and may differ from [public]ly available eROSITA  catalogs. The mos_erosita_superset_* tables are derived from a combination of  eROSITA''s first 6-month survey of of the West Galactic hemisphere (''eRASS1''),  and from the eROSITA observations of the eROSITA Final Equatorial Depth  performance verification field (''eFEDS''). ','0');
INSERT DBObjects VALUES('mos_erosita_superset_compactobjects','U','U',' One of several tables describing optical/IR counterparts to eROSITA ',' X-ray sources identified via various methods. <br>  These tables contain a superset of potential targets from which the SDSS-V  spectroscopic targets were drawn. The mos_erosita_superset_agn table includes  counterparts to point-like X-ray sources, chosen via algorithms optimised to  select compact objects. Each row corresponds to one possible match between an  X-ray source and a potential optical/IR counterpart. The X-ray columns (ero_*)  record the eROSITA information known at the time of target selection and may  differ from [public]ly available eROSITA catalogs. The mos_erosita_superset_*  tables are derived from a combination of eROSITA''s first 6-month survey of of  the West Galactic hemisphere (''eRASS1''), and from the eROSITA observations of  the eROSITA Final Equatorial Depth performance verification field (''eFEDS''). ','0');
INSERT DBObjects VALUES('mos_erosita_superset_stars','U','U',' One of several tables describing optical/IR counterparts to eROSITA ',' X-ray sources identified via various methods. <br>  These tables contain a superset of potential targets from which the SDSS-V  spectroscopic targets were drawn. The mos_erosita_superset_stars table includes  counterparts to point-like X-ray sources, chosen via an algorithm optimised to  select coronally active stars. Each row corresponds to one possible match  between an X-ray source and a potential optical/IR counterpart. The X-ray  columns (ero_*) record the eROSITA information known at the time of target  selection and may differ from [public]ly available eROSITA catalogs. The  mos_erosita_superset_* tables are derived from a combination of eROSITA''s first  6-month survey of of the West Galactic hemisphere (''eRASS1''), and from the  eROSITA observations of the eROSITA Final Equatorial Depth performance  verification field (''eFEDS''). ','0');
INSERT DBObjects VALUES('mos_field','U','U',' The table includes the field information, where a field is a unique pointing of the telescope on the sky. ','','0');
INSERT DBObjects VALUES('mos_gaia_assas_sn_cepheids','U','U',' Well-defined and varcharized all-sky sample of classical Cepheids in the Milky Way presented in Inno+2021. ',' The sample is obtained by combining two time-domain all-sky surveys: Gaia DR2  (Gaia Col. 2018; see I/345) and All-Sky Automated Survey for Supernovae (ASAS-  SN; Shappee+ 2014AAS...22323603S). Inno+21 use parallax and variability  information from Gaia  to select ~30000 bright (G<17) Cepheid candidates with  M_K_{<}-1. They analyze their ASAS-SN V-band light curves, determining periods  and classifying the light curves using their Fourier parameters. This results in  ~1900 likely Galactic Cepheids, Inno+21 estimate to be >~90% complete and pure  within their adopted selection criteria. ','0');
INSERT DBObjects VALUES('mos_gaia_dr2_ruwe','U','U',' Table from Gaia DR2 containing the Renormalised Unit Weight Error (RUWE) associated to each source in gaia_source. ',' See https://gea.esac.esa.int/archive/documentation/GDR2/Gaia_archive/chap_datamo  del/sec_dm_main_tables/ssec_dm_ruwe.html for more detailed descriptions of the  columns ','0');
INSERT DBObjects VALUES('mos_gaia_dr2_source','U','U',' Gaia DR2 Source Table. ',' See https://gea.esac.esa.int/archive/documentation/GDR2/Gaia_archive/chap_datamo  del/sec_dm_main_tables/ssec_dm_gaia_source.html for complete details. ','0');
INSERT DBObjects VALUES('mos_gaia_dr2_wd','U','U',' White dwarf catalog of high-probablity WDs from Gentile Fusillo (2019) based on Gaia DR2. ',' See https://academic.oup.com/mnras/article/482/4/4570/5162857 for more  information on the columns. ','0');
INSERT DBObjects VALUES('mos_gaia_unwise_agn','U','U',' AGN identified using information from WISE and Gaia DR2 from the catalog of Shu et al. 2019. ',' See complete information on the columns in  https://academic.oup.com/mnras/article/489/4/4741/5561523 ','0');
INSERT DBObjects VALUES('mos_gaiadr2_tmass_best_neighbour','U','U',' The Gaia DR2 vs. 2MASS PSC crossmatch provided by the Gaia collaboration. ',' See https://gea.esac.esa.int/archive/documentation/GDR2/Catalogue_consolidation/  chap_cu9val_cu9val/ssec_cu9xma/sssec_cu9xma_extcat.html for complete details. ','0');
INSERT DBObjects VALUES('mos_geometric_distances_gaia_dr2','U','U',' Bayesian distances from Gaia DR2 parameters from Bailer-Jones et al. 2018. ',' For complete details, see the original paper:  https://iopscience.iop.org/article/10.3847/1538-3881/aacb21/pdf ','0');
INSERT DBObjects VALUES('mos_glimpse','U','U',' GLIMPSE catalog (I, II and 3-D). ',' See full documentation at https://irsa.ipac.caltech.edu/data/SPITZER/GLIMPSE/doc  /glimpse1_dataprod_v2.0.pdf ','0');
INSERT DBObjects VALUES('mos_guvcat','U','U',' GALEX unique source catalog from Bianchi et al. 2017 (https://iopscience.iop.org/article/10.3847/1538-4365/aa7053/pdf). ',' For more details on the column descriptions see  https://archive.stsci.edu/hlsp/guvcat/guvcat-column-description ','0');
INSERT DBObjects VALUES('mos_hole','U','U',' The holes in which the positioners sit for the FPS at each observatory. ','','0');
INSERT DBObjects VALUES('mos_instrument','U','U',' This table stores the instruments used by SDSS-V. ','','0');
INSERT DBObjects VALUES('mos_legacy_catalog_catalogid','U','U','','','0');
INSERT DBObjects VALUES('mos_legacy_survey_dr8','U','U',' Legacy Survey DR8 catalogue derived from ''sweep'' catalogues. ',' For more information see <a  href=''https://www.legacysurvey.org/dr8/''>https://www.legacysurvey.org/dr8/</a>. ','0');
INSERT DBObjects VALUES('mos_magnitude','U','U',' This table stores magnitude information for a target. Optical magnitudes that are not selected from SDSS photometry have been converted to the SDSS system. ','','0');
INSERT DBObjects VALUES('mos_mangadapall','U','U',' Final summary file of the MaNGA Data Analysis Pipeline (DAP). ','','0');
INSERT DBObjects VALUES('mos_mangadrpall','U','U',' Final summary file of the MaNGA Data Reduction Pipeline (DRP). ','','0');
INSERT DBObjects VALUES('mos_mangatarget','U','U',' MaNGA Target Catalog ','','0');
INSERT DBObjects VALUES('mos_mapper','U','U',' This table stores the names of the mappers associated with cartons in mos_carton. ','','0');
INSERT DBObjects VALUES('mos_marvels_dr11_star','U','U',' Contains data for a MARVELS star (DR11 release). ','','0');
INSERT DBObjects VALUES('mos_marvels_dr12_star','U','U',' Contains data for a MARVELS star (DR12 release). ','','0');
INSERT DBObjects VALUES('mos_mastar_goodstars','U','U',' Summary file of MaNGA Stellar Library. ','','0');
INSERT DBObjects VALUES('mos_mastar_goodvisits','U','U',' Summary file of all visits of stars included in MaNGA Stellar Library. ','','0');
INSERT DBObjects VALUES('mos_mipsgal','U','U',' This table contains target from a 24µm catalog based point source catalog derived from the image data of the MIPSGAL 24µm Galactic Plane Survey and the corresponding data products. ','','0');
INSERT DBObjects VALUES('mos_mwm_tess_ob','U','U',' This table contains targets requested for the manual carton mwm_tess_ob. ','','0');
INSERT DBObjects VALUES('mos_observatory','U','U',' Table of observatories. ','','0');
INSERT DBObjects VALUES('mos_obsmode','U','U',' The table contains observing constraints for different observing modes. Cadences have an observing mode associated with each epoch, and the constraints are checked before an epoch can be scheduled. ','','0');
INSERT DBObjects VALUES('mos_opsdb_apo_camera','U','U',' The table contains the cameras at the observatory. The three APOGEE chips are treated as one camera, while the separate blue channel and red channel BOSS chips are treated separately. ','','0');
INSERT DBObjects VALUES('mos_opsdb_apo_camera_frame','U','U',' The table contains signal-to-noise estimates for each ''camera'', for each exposure. APOGEE is treated as one camera, while R1/2 and B1/2 are treated separately. ','','0');
INSERT DBObjects VALUES('mos_opsdb_apo_completion_status','U','U',' The table complains completion statuses referenced in design_to_status ','','0');
INSERT DBObjects VALUES('mos_opsdb_apo_configuration','U','U',' This table contains basic information about a configuration of robots loaded at the telescope. ','','0');
INSERT DBObjects VALUES('mos_opsdb_apo_design_to_status','U','U',' The table contains design completion information by joining design and design_status ','','0');
INSERT DBObjects VALUES('mos_opsdb_apo_exposure','U','U',' The table contains exposures taken at the observatory. ','','0');
INSERT DBObjects VALUES('mos_opsdb_apo_exposure_flavor','U','U',' The table contains the various types of exposures; science, dark, flat, etc. ','','0');
INSERT DBObjects VALUES('mos_panstarrs1','U','U',' A copy of the PanSTARRS1-dr2 catalogue provided by E. Magnier. ',' Based on the internal IPP database representation maintained by IfA, U. Hawaii.  Column names may differ from [public]ally available catalogues hosted at MAST  (mapping provided in column descriptions). The SDSS-V copy of this database is  derived from a combination of the PS1-dr2 StackObjectThin and ObjectThin tables   (https://outerspace.stsci.edu/display/PANSTARRS/PS1+Database+object+and+detectio  n+tables). The catalogue contains PSF, Kron, and Aper measurements based on  stacked and forced warp photometry, and expressed as fluxes, including  measurements are made of low-significance detections. The average exposure  (chip) measurements are expressed in magnitudes since photometry is not measured  at this stage for sources with S/N < 5, so there should not be any negative  fluxes. Magnitudes are on the AB system, fluxes are in Janskys. Conversion to AB  mags is via: mag = 8.9 - 2.5*log10(flux). ','0');
INSERT DBObjects VALUES('mos_positioner_status','U','U',' Table of possible positioner statuses ','','0');
INSERT DBObjects VALUES('mos_revised_magnitude','U','U',' This table stores magnitude information for a target. Optical magnitudes that are not selected from SDSS photometry have been converted to the SDSS system. ',' Entries in this revised_magnitude table only exist if there was an issue with  the values in the original magnitude table. Therefore: if a carton_to_target_pk  exists in this table, the values in this table should be used instead. ','0');
INSERT DBObjects VALUES('mos_sagitta','U','U',' Catalog of pre-main-sequence stars derived from Gaia DR2 and 2MASS from McBride et al. (2021), their Table 4. ',' For complete details, see the original paper:  https://iopscience.iop.org/article/10.3847/1538-3881/ac2432 ','0');
INSERT DBObjects VALUES('mos_sdss_apogeeallstarmerge_r13','U','U',' List of APOGEE DR16 stars for RV followup. ','','0');
INSERT DBObjects VALUES('mos_sdss_dr13_photoobj_primary','U','U',' Columns from the PhotoPrimary Table of SDSS DR13. ','','0');
INSERT DBObjects VALUES('mos_sdss_dr16_qso','U','U',' SDSS Data Release 16 Quasar Catalog (Lyke et al. 2020). ',' For complete details, please see the original paper:  https://ui.adsabs.harvard.edu/abs/2020ApJS..250....8L/abstract. <br>  Description derived from SDSS datamodel:  https://data.sdss.org/datamodel/files/BOSS_QSO/DR16Q/DR16Q_v4.html ','0');
INSERT DBObjects VALUES('mos_sdss_dr16_specobj','U','U',' This table contains the list of all SDSS optical spectra for a given data release, with associated parameters from the 2D and 1D pipelines for each. ',' The table contains both the BOSS and SDSS spectrograph data. The database  representation is derived from the flat file information described here: <a href  =''https://data.sdss.org/datamodel/files/SPECTRO_REDUX/specObj.html''>https://data  .sdss.org/datamodel/files/SPECTRO_REDUX/specObj.html</a> Note: the order of the  columns in this documentation may not match the order of the columns in the  database table. ','0');
INSERT DBObjects VALUES('mos_sdss_dr17_specobj','U','U',' This table contains the list of all SDSS optical spectra for a given data release, with associated parameters from the 2D and 1D pipelines for each. ',' The table contains both the BOSS and SDSS spectrograph data. The database  representation is derived from the flat file information described here: <a href  =''https://data.sdss.org/datamodel/files/SPECTRO_REDUX/specObj.html''>https://data  .sdss.org/datamodel/files/SPECTRO_REDUX/specObj.html</a> Note: the order of the  columns in this documentation may not match the order of the columns in the  database table. ','0');
INSERT DBObjects VALUES('mos_sdss_id_flat','U','U',' This table includes associations between sdss_id identifiers and the best matched catalogid for each catalogue cross-match. ',' Unlike mos_sdss_id_stacked, this table contains multiple rows per sdss_id, one  for each cross-match association. When multiple sdss_ids are associated with the  same catalogid, the one with the lowest rank (rank=1) should be preferred. <br>  Note: The sdss_id match was extended internally for a more recent crossmatch not  yet part of the [public]ly released data. As such, the ra/dec_sdss_id columns may  differ from the catalogid coordinates. ','0');
INSERT DBObjects VALUES('mos_sdss_id_stacked','U','U',' This table includes associations between sdss_id identifiers and the matched catalogids for each catalogue cross-match. ',' The table contains one row per sdss_id with columns for each catalogid version.  However, catalogids may be associated with multiple sdss_id. mos_sdss_id_flat  is a pivoted/flattened version of this table and contains information about the  preferred sdss_id for a catalogid. <br>  Note: The sdss_id match was extended internally for a more recent crossmatch not  yet part of the [public]ly released data. As such, the ra/dec_sdss_id columns may  differ from the catalogid coordinates. ','0');
INSERT DBObjects VALUES('mos_sdss_id_to_catalog','U','U',' This table contains the best matched associations between SDSS identifiers (sdss_id, catalogid) and the unique identifiers in the parent catalogues used for SDSS cross-matches. ',' The format of the parent catalogue columns is <table_name>__<column_name>, where  <column_name> is the primary key/unique identifier column to which to join in  the mos_<table_name> table. ','0');
INSERT DBObjects VALUES('mos_sdss_id_to_catalog_full','U','U','','','0');
INSERT DBObjects VALUES('mos_sdssv_boss_conflist','U','U',' The mos_sdssv_boss_conflist table is a database representation of an ',' early version of the SDSS-V BOSS fieldlist data product. <br>  The mos_sdssv_boss_conflist table was used within early iterations of FPS  target_selection as a way to communicate information about which SDSS-V plates  had been observed by the time of target selection. This information was used to  e.g. de-prioritise targets that were expected to have a good quality  spectroscopic measurement before the start of SDSS-V FPS operations. <br>  Caution. The mos_sdssv_boss_conflist table should only be used in order to  recreate the target_selection selection function. <br>  Column descriptions are mainly derived from:  https://data.sdss.org/datamodel/files/BOSS_SPECTRO_REDUX/RUN2D/platelist.html ','0');
INSERT DBObjects VALUES('mos_sdssv_boss_spall','U','U',' The mos_sdssv_boss_spall table is a database representation of an early version of the SDSS-V BOSS spAll data product. ',' The mos_sdssv_boss_spall table was used within early iterations of FPS  target_selection as a way to communicate information about which targets had  been observed in SDSS-V plates. This information was used to e.g. de-prioritise  targets that were expected to have a good quality spectroscopic measurement  before the start of SDSS-V FPS operations. <br>  Caution. The mos_sdssv_boss_spall table should only be used in order to  recreate the target_selection selection function. <br>  Column descriptions are mainly derived from:  https://data.sdss.org/datamodel/files/BOSS_SPECTRO_REDUX/RUN2D/spAll.html ','0');
INSERT DBObjects VALUES('mos_sdssv_plateholes','U','U',' The combination of the mos_sdssv_plateholes and mos_sdssv_plateholes_meta tables are a database representation of the SDSS-V platelist data product (https://svn.sdss.org/[public]/data/sdss/platelist/trunk/). ',' These tables were used within early iterations of FPS target_selection as a way  to communicate information about which targets had been included in SDSS-V  plates. This information was used to e.g. de-prioritise targets that were  expected to have a good quality spectroscopic measurement by the end of the  SDSS-V plate observations. <br>  The mos_sdssv_plateholes_meta table contains meta-data for each SDSS-V plate  (one record per plate), whereas the mos_sdssv_plateholes table has one entry  for each drilled hole in each SDSS-V plate. The mos_sdssv_plateholes and  mos_sdssv_plateholes_meta tables should be joined via the yanny_uid field. <br>  Mostly derived from: https://data.sdss.org/datamodel/files/PLATELIST_DIR/designs  /DESIGNID6XX/DESIGNID6/plateDesign.html ','0');
INSERT DBObjects VALUES('mos_sdssv_plateholes_meta','U','U',' The combination of the mos_sdssv_plateholes and mos_sdssv_plateholes_meta ',' tables are a database representation of the SDSS-V platelist data <br>  product (https://svn.sdss.org/[public]/data/sdss/platelist/trunk/). <br>  These tables were used within early iterations of FPS target_selection as a way  to communicate information about which targets had been included in SDSS-V  plates. This information was used to e.g. de-prioritise targets that were  expected to have a good quality spectroscopic measurement by the end of the  SDSS-V plate observations. <br>  The mos_sdssv_plateholes_meta table contains meta-data for each SDSS-V plate  (one record per plate), whereas the mos_sdssv_plateholes table has one entry  for each drilled hole in each SDSS-V plate. The mos_sdssv_plateholes and  mos_sdssv_plateholes_meta tables should be joined via the yanny_uid field. <br>  Mostly derived from: https://data.sdss.org/datamodel/files/PLATELIST_DIR/plates/  PLATEID6XX/PLATEID6/plateHoles.html ','0');
INSERT DBObjects VALUES('mos_skies_v1','U','U',' This table stores the positions used as blank sky regions for DR19 targetting. ',' The sky regions are selected by dividing the sky in tiles of HEALpix nside 32.  Each tile is then subdivided in candidate regions of HEALpix nside 32768 and the  pixels that meet the isolation requirements are considered valid skies. This  process is repeated for a number of all-sky catalogues. See <a  href=''https://sdss.org/dr19/targeting/fps/sky/''> for further details of the  process by which suitable sky locations are selected in SDSS-V/FPS. This version  of the skies catalog was used for v0.1 target selection. The skies_v2 catalog  was used for v0.5 and subsequent target selections. ','0');
INSERT DBObjects VALUES('mos_skies_v2','U','U',' This table stores the positions used as blank sky regions for dr19 targetting. ',' The sky regions are selected by dividing the sky in tiles of HEALpix nside 32.  Each tile is then subdivided in candidate regions of HEALpix nside 32768 and the  pixels that meet the isolation requirements are considered valid skies. This  process is repeated for a number of all-sky catalogues. See <a  href=''https://sdss.org/dr19/targeting/fps/sky/''> for further details of the  process by which suitable sky locations are selected in SDSS-V/FPS. ','0');
INSERT DBObjects VALUES('mos_skymapper_dr2','U','U',' Skymapper Data Release 2 photometry. ',' For detailed descriptions, please see the SkyMapper documentation:  https://skymapper.anu.edu.au/table-browser/ ','0');
INSERT DBObjects VALUES('mos_skymapper_gaia','U','U',' This catalogue contains photometric stellar parameters for 9+ million stars in common between the SkyMapper survey and Gaia DR2. ',' See https://skymapper.anu.edu.au/_data/sm-gaia/ for details. ','0');
INSERT DBObjects VALUES('mos_supercosmos','U','U',' Contains merged sources for every field in the SuperCOSMOS Science Archive (SSA). It consists of data from digitised sky survey plates taken with the UK Schmidt telescope (UKST), the ESO Schmidt, and the Palomar Schmidt. ',' Each field within the SSA is covered by four plates in passbands B, R and I with  R being covered twice at different times. This results in four-plate multi-  colour, multi-epoch data which are merged into a single source catalogue for  general science exploitation. This table contains the associated merged records  created from the records in table Detection, along with a full astrometric  solution (including proper motions) computed from the available position  measures. The most useful subset of image morphological descriptors are also  propagated into this table for ease of use. <br>  Derived from http://ssa.roe.ac.uk/www/SSA_TABLE_SourceSchema.html#Source ','0');
INSERT DBObjects VALUES('mos_target','U','U',' This table stores the targets associated with dr19 target selection cartons. Note that the targets in this table are unique, but a target can be associated with multiple cartons. That many-to-many relationship is encoded in the mos_carton_to_target table. ','','0');
INSERT DBObjects VALUES('mos_target_union_legacy','U','U','','','0');
INSERT DBObjects VALUES('mos_targetdb_version','U','U',' List of versions associated with target selection cartons and robostategy runs. ','','0');
INSERT DBObjects VALUES('mos_targeting_generation','U','U',' List of SDSS-V targeting generations. ',' A ''targeting_generation'' describes a collection of versioned cartons, together  with their robostrategy control parameters. This is a convenient way to describe  the specific set of carton-versions that were used (and the way that they were  treated) within any particular run of robostrategy. <br>  The mos_targeting_generation table contains all targeting_generations that were  considered for observations in the timespan covered by the DR19 data release. In  addition, we include the ''v0.5.3'' targeting_generation since this was the  version released as part of dr19. <br>  During the initial plate operations phase of SDSS-V, we did not use the  robostrategy code to assign fibers to targets. However, for completeness, the  ''v0.plates'' pseudo-targeting_generation has been reverse engineered in order to  describe the set of carton-versions that were considered during that phase. <br>  The mos_targeting_generation table can be joined to the mos_carton table via  the mos_targeting_generation_to_carton table. To associate a  targeting_generation with a robostrategy planname, join mos_targeting_generation to  mos_targetdb_version via the mos_targeting_generation_to_version table. <br>  Taken together, the mos_targeting_generation,  mos_targeting_generation_to_carton and mos_targeting_generation_to_version  tables duplicate, in a database form, the robostrategy carton configuration  information available via the rsconfig product  (https://github.com/sdss/rsconfig). ','0');
INSERT DBObjects VALUES('mos_targeting_generation_to_carton','U','U',' Mapping of SDSS-V targeting generations to cartons. ',' A ''targeting_generation'' describes a collection of versioned cartons, together  with their robostrategy control parameters. This is a convenient way to describe  the specific set of carton-versions that were used (and the way that they were  treated) within any particular run of robostrategy. <br>  The mos_targeting_generation_to_carton table describes a many-to-many  relationship, connecting each targeting_generation to a set of entries in the  mos_carton table, as well as recording how those carton-versions were treated  in the robostrategy code (i.e. the rs_stage and rs_active parameters). <br>  Taken together, the mos_targeting_generation,  mos_targeting_generation_to_carton and mos_targeting_generation_to_version  tables duplicate, in a database form, the robostrategy carton configuration  information available via the rsconfig product  (https://github.com/sdss/rsconfig). ','0');
INSERT DBObjects VALUES('mos_targeting_generation_to_version','U','U',' Mapping of targeting generations to robostrategy runs. ',' A ''targeting_generation'' describes a collection of versioned cartons, together  with their robostrategy control parameters. This is a convenient way to describe  the specific set of carton-versions that were used (and the way that they were  treated) within any particular run of robostrategy. <br>  The mos_targeting_generation_to_version table describes a one-to-many  relationship, connecting each robostrategy run to one targeting_generation. In  general, a single target_generation can be used my more than one robostrategy  run. <br>  Taken together, the mos_targeting_generation,  mos_targeting_generation_to_carton and mos_targeting_generation_to_version  tables duplicate, in a database form, the robostrategy carton configuration  information available via the rsconfig product  (https://github.com/sdss/rsconfig). ','0');
INSERT DBObjects VALUES('mos_tess_toi','U','U',' This catalog contains targets that recieved the 2 minute cadence during the TESS Mission, are TESS Objects of Interest (TOI) or Community TESS Objects of Interest (CTOI). ',' The contents of this catalog were derived from the MIT TESS website  (https://tess.mit.edu/[public]/target_lists/target_lists.html) and the ExoFOP  website https://exofop.ipac.caltech.edu/tess/index.php. These targets were  updated on 2020-04-02. ','0');
INSERT DBObjects VALUES('mos_tess_toi_v05','U','U',' This catalog contains targets that received the 2 minute cadence during the TESS Mission, are TESS Objects of Interest (TOI) or Community TESS Objects of Interest (CTOI). ',' The contents of this catalog were derived from the MIT TESS website  (https://tess.mit.edu/[public]/target_lists/target_lists.html) and the ExoFOP  website https://exofop.ipac.caltech.edu/tess/index.php. These targets were  updated on 2020-11-24. ','0');
INSERT DBObjects VALUES('mos_tic_v8','U','U',' The Eighth version (v8.0) of the TESS Input Catalogue (<a href=''https://outerspace.stsci.edu/display/TESS/TIC+v8+and+CTL+v8.xx+Data+Release+Notes''></a>). ',' This catalogue is used in v0.5 target selection as a form of internal cross-  match between the objects found in difference input catalogues. ','0');
INSERT DBObjects VALUES('mos_twomass_psc','U','U',' 2MASS point source catalog. ',' For full details, please see  https://www.ipac.caltech.edu/2mass/releases/allsky/doc/sec2_2a.html ','0');
INSERT DBObjects VALUES('mos_tycho2','U','U',' Tycho-2 catalog. ',' For complete details, please see the original Tycho-2 documentation from Hog et  al (2020) https://ui.adsabs.harvard.edu/abs/2000A%26A...355L..27H/abstract and  https://www.cosmos.esa.int/web/hipparcos/tycho-2 ','0');
INSERT DBObjects VALUES('mos_unwise','U','U',' The unWISE catalog, containing the positions and fluxes of approximately two billion objects observed by the Wide-field Infrared Survey Explorer (WISE). ',' For more details, see Schlafly et al. (2019). The original catalogs are hosted  at https://catalog.unwise.me/catalogs.html ','0');
INSERT DBObjects VALUES('mos_uvotssc1','U','U',' Version 1.1 of the Swift UVOT Serendipitous Source Catalogue (UVOTSSC). ',' For full details, please see Page et al. (2015) at https://pos.sissa.it/233/037  and the online documentation at https://archive.stsci.edu/prepds/uvotssc/ ','0');
INSERT DBObjects VALUES('mos_xmm_om_suss_4_1','U','U',' The 2018 release of the XMM OM Serendipitous Ultraviolet Source Survey (XMM-SUSS4.1) Catalog. ',' For full details, please see  https://heasarc.gsfc.nasa.gov/W3Browse/all/xmmomsuob.html and the original  catalog paper (Page et al. 2012;  https://academic.oup.com/mnras/article/426/2/903/976665) ','0');
INSERT DBObjects VALUES('mos_yso_clustering','U','U',' YSO candidates from Kounkel et al. 2020. ',' Please see details in the original paper:  https://iopscience.iop.org/article/10.3847/1538-3881/abc0e6 ','0');
INSERT DBObjects VALUES('mos_zari18pms','U','U',' Pre-main sequence (PMS) catalogue from Zari+2018. ','','0');
INSERT DBObjects VALUES('fGetVersion','F','A',' Returns the version string as in the assembly. ','','0');
INSERT DBObjects VALUES('fGetVersions','F','A',' Returns the version strings of the relevant assemblies. ','','0');
INSERT DBObjects VALUES('fGetArea','F','A',' Returns the area of region stored in the specified blob. ',' Parameter(s):  <li> @bin varbinary(max): region blob ','0');
INSERT DBObjects VALUES('fGetRegionStringBin','F','A',' Returns the regionstring in a blob. Used internally. ',' Parameter(s):  <li> @bin varbinary(max): region blob  see sph.fGetRegionString. ','0');
INSERT DBObjects VALUES('fConvexAddHalfspace','F','A',' Adds the specified halfspaces to a given convex and returns the new region blob.  ',' Parameter(s):  <li> @bin varbinary(max): region blob  <li> @cidx int: convex index  <li> @x float: halfspace vector''s X coordinate  <li> @y float: halfspace vector''s y coordinate  <li> @z float: halfspace vector''s Z coordinate  <li> @c float: halfspace offset ','0');
INSERT DBObjects VALUES('fSimplifyBinary','F','A',' Simplifies the region in the specified blob created w/ sph.fConvexAddHalfspace(). ',' Parameter(s):  <li> @bin varbinary(max): region blob ','0');
INSERT DBObjects VALUES('fSimplifyBinaryAdvanced','F','A',' Simplifies the region in the specified blob created with sph.fConvexAddHalfspace ',' Parameter(s):  <li> @bin varbinary(max): region blob  <li> @simple_simplify bit: determines whether to run trivial convex simplification  <li> @convex_eliminate bit: determines whether to attempt eliminating convexes  <li> @convex_disjoint bit: determines whether to make convexes disjoint  <li> @convex_unify bit: determines whether to attempt stiching convexes ','0');
INSERT DBObjects VALUES('fSimplifyString','F','A',' Simplifies the region in the specified string and returns its blob. ',' Parameter(s):  <li> @str nvarchar(max): region string ','0');
INSERT DBObjects VALUES('fSimplifyStringAdvanced','F','A',' Simplifies the region in the specified string and returns its blob. ',' Parameter(s):  <li> @str nvarchar(max): region string  <li> @simple_simplify bit: determines whether to run trivial convex simplification  <li> @convex_eliminate bit: determines whether to attempt eliminating convexes  <li> @convex_disjoint bit: determines whether to make convexes disjoint  <li> @convex_unify bit: determines whether to attempt stiching convexes ','0');
INSERT DBObjects VALUES('fSimplifyQuery','F','A',' Simplifies the region defined by the specified query that yields halfspaces. ',' Parameter(s):  <li> @cmd nvarchar(max): query string ','0');
INSERT DBObjects VALUES('fSimplifyQueryAdvanced','F','A',' Simplifies the region defined by the specified query that yields halfspaces. ',' Parameter(s):  <li> @cmd nvarchar(max): query string  <li> @simple_simplify bit: determines whether to run trivial convex simplification  <li> @convex_eliminate bit: determines whether to attempt eliminating convexes  <li> @convex_disjoint bit: determines whether to make convexes disjoint  <li> @convex_unify bit: determines whether to attempt stiching convexes ','0');
INSERT DBObjects VALUES('fGrowArc','F','A',' Grows a arcn by the given amount and returns the region''s blob ',' Parameter(s):  <li> @s...: start point  <li> @m...: middle point  <li> @e...: end point  <li> @degree float: amount of grow ','0');
INSERT DBObjects VALUES('fGrow','F','A',' Grows a region by the given amount and returns its blob. ',' Parameter(s):  <li> @bin varbinary(max): region blob  <li> @degree float: amount of grow ','0');
INSERT DBObjects VALUES('fGrowAdvanced','F','A',' Grows a region by the given amount and returns its blob. ',' Parameter(s):  <li> @bin varbinary(max): region blob  <li> @degree float: amount of grow  <li> @simple_simplify bit: determines whether to run trivial convex simplification  <li> @convex_eliminate bit: determines whether to attempt eliminating convexes  <li> @convex_disjoint bit: determines whether to make convexes disjoint  <li> @convex_unify bit: determines whether to attempt stiching convexes ','0');
INSERT DBObjects VALUES('fUnion','F','A',' Derives the union of the given regions. ',' Parameter(s):  <li> @bin varbinary(max): region blob  <li> @bin2 varbinary(max): other blob ','0');
INSERT DBObjects VALUES('fIntersect','F','A',' Derives the intersection of the given regions. ',' Parameter(s):  <li> @bin varbinary(max): region blob  <li> @bin2 varbinary(max): other blob ','0');
INSERT DBObjects VALUES('fUnionAdvanced','F','A',' Derives the union of the given regions. ',' Parameter(s):  <li> @bin varbinary(max): region blob  <li> @bin2 varbinary(max): other blob  <li> @convex_unify bit: determines whether to attempt stiching convexes ','0');
INSERT DBObjects VALUES('fIntersectAdvanced','F','A',' Derives the intersection of the given regions. ',' Parameter(s):  <li> @bin varbinary(max): region blob  <li> @bin2 varbinary(max): other blob  <li> @convex_unify bit: determines whether to attempt stiching convexes ','0');
INSERT DBObjects VALUES('fUnionQuery','F','A',' Derives the union of regions returned by the specified query. ',' Parameter(s):  <li> @cmd nvarchar(max): query string  <li> @convex_unify bit: determines whether to attempt stiching convexes  Note: The query should return region blobs. ','0');
INSERT DBObjects VALUES('fIntersectQuery','F','A',' Derives the intersection of regions returned by the specified query. ',' Parameter(s):  <li> @cmd nvarchar(max): query string  <li> @convex_unify bit: determines whether to attempt stiching convexes  Note: The query should return region blobs. ','0');
INSERT DBObjects VALUES('fDiffAdvanced','F','A',' Derives the difference of the given regions. ',' Parameter(s):  <li> @bin varbinary(max): region blob  <li> @bin2 varbinary(max): other blob  <li> @simple_simplify bit: determines whether to run trivial convex simplification  <li> @convex_eliminate bit: determines whether to attempt eliminating convexes  <li> @convex_disjoint bit: determines whether to make convexes disjoint  <li> @convex_unify bit: determines whether to attempt stiching convexes ','0');
INSERT DBObjects VALUES('fDiff','F','A',' Derives the difference of the given regions. ',' Parameter(s):  <li> @bin varbinary(max): region blob  <li> @bin2 varbinary(max): other blob ','0');
INSERT DBObjects VALUES('fGetHalfspaces','F','A',' Returns the halfspaces of the specified region blob. ',' Parameter(s):  <li> @bin varbinary(max): region blob ','0');
INSERT DBObjects VALUES('fGetConvexes','F','A',' Returns the convexes of the specified region in separate region blobs. ',' Parameter(s):  <li> @bin varbinary(max): region blob ','0');
INSERT DBObjects VALUES('fGetPatches','F','A',' Returns the patches of the specified region. ',' Parameter(s):  <li> @bin varbinary(max): region blob ','0');
INSERT DBObjects VALUES('fGetArcs','F','A',' Returns the arcs of the specified region. ',' Parameter(s):  <li> @bin varbinary(max): region blob ','0');
INSERT DBObjects VALUES('fGetOutlineArcs','F','A',' Returns the outline arcs of the specified region. ',' Parameter(s):  <li> @bin varbinary(max): region blob ','0');
INSERT DBObjects VALUES('fGetHtmRanges','F','A',' Calculates HTM covers for the specified region. ',' Parameter(s):  <li> @bin varbinary(max): region blob ','0');
INSERT DBObjects VALUES('fGetHtmRangesAdvanced','F','A',' Calculates HTM covers for the specified region. ',' Parameter(s):  <li> @bin varbinary(max): region blob  <li> @frac float: limiting pseudo area fraction (inner/outer)  <li> @seconds float: time limit ','0');
INSERT DBObjects VALUES('fRegionContainsXYZ','F','A',' Returns whether the specified region contains the given location. ',' Parameter(s):  <li> @bin varbinary(max): region blob  <li> @x float: direction''s X-coordinate  <li> @y float: direction''s Y-coordinate  <li> @z float: direction''s Z-coordinate ','0');
INSERT DBObjects VALUES('fSimplifyAdvanced','F','A',' Simplifies the region defined by the specified ID. ',' Parameter(s):  <li> @id bigint: region id  <li> @simple_simplify bit: determines whether to run trivial convex simplification  <li> @convex_eliminate bit: determines whether to attempt eliminating convexes  <li> @convex_disjoint bit: determines whether to make convexes disjoint  <li> @convex_unify bit: determines whether to attempt stiching convexes ','0');
INSERT DBObjects VALUES('fSimplify','F','A',' Simplifies the region defined by the specified ID. ',' Parameter(s):  <li> @id bigint: region id ','0');
INSERT DBObjects VALUES('fGetRegionString','F','A',' Returns the regionstring of the specified region. ',' Parameter(s):  <li> @bin varbinary(max): region blob ','0');
INSERT DBObjects VALUES('fHtmVersion','F','U',' Returns version of installed HTM library as a string ',' <samp> select dbo.fHtmVersion() </samp>   ','0');
INSERT DBObjects VALUES('fHtmEq','F','U',' Returns htmid of a given point from an RA and DEC in J2000 ',' <li> @ra float:  J2000 right ascension in degrees  <li> @dec float: J2000 right declination in degrees  <li> returns htmID bigint:  htmid of this point  <br><samp> select dbo.fHtmEq(180,0):14843406974976 /samp>    <br> see also fHtmXyz  ','0');
INSERT DBObjects VALUES('fHtmXyz','F','U',' Returns htmid given x,y,z in cartesian coordinates in J2000 ',' Returns the Hierarchical Triangular Mesh (HTM) ID of a given point,  given x,y,z in cartesian (J2000) reference frame. The vector   (x,y,z) will be normalized to unit vector if non-zero and set to   (1,0,0) if zero. Returns the 21-deep htmid of this object.<br>  Parameters:<br>  <li> @x float, unit vector for ra+dec  <li> @y float, unit vector for ra+dec  <li> @z float, unit vector for ra+dec  <li> returns htmID bigint   <br><samp> select dbo.fHtmXyz(1,0,0) </samp>  <br> gives 17042430230528    <br> see also fHtmEq  ','0');
INSERT DBObjects VALUES('fHtmGetString','F','U','  Converts an HTMID to its string representation  ',' <br>Parameters:  <li>htmid bigint: 21-deep htmid of this point  <li> returns varchar(max) The string format is (N|S)[0..3]*    <br> For example S130000013 is on the second face of the    southern hemisphere, i.e. ra is between 6h and 12h     <samp>print  dbo.fHtmToString(dbo.fHtmEq(195,2.5))   <br> gives: N120131233021223031323 </samp> ','0');
INSERT DBObjects VALUES('fHtmGetCenterPoint','F','U','  Converts an HTMID to a (x,y,z) vector of the HTM centerpoint   ',' <br>Parameters:  <li>@htmid bigint, the htmid of the trixel  <br>Returns VertexTable(x float, y float, z float) of a single  row with the unit vector of the trixel center.   <samp>select * from  fHtmToCenterPoint(dbo.fHtmXyz(.57735,.57735,.57735))   <br> gives: 0.577350269189626, 0.577350269189626, 0.577350269189626    </samp> ','0');
INSERT DBObjects VALUES('fHtmGetCornerPoints','F','U','  Converts an HTMID to the trixel''s vertices as cartesian vectors ',' <br>Parameter:  <li>htmid bigint, htmid of the trixel  <br>Returns VertexTable(x float, y float, z float)   with three rows contining the trixel''s vertices   <samp>select * from  fHtmToCornerPoints(8)   <br> gives:   <br>        1 0 0   <br>        0 0 0   <br>        0 1 0   </samp> ','0');
INSERT DBObjects VALUES('fHtmCoverCircleEq','F','U',' Returns the HTM Cover of a circle with a given ra,dec and radius ',' Returns a table of htmid ranges describing an HTM cover  for a circle centered at J2000 ra,dec (in degrees)  within  @radius arcminutes of that centerpoint.  <br>Parameters:<br>  <li> @ra  float, J2000 right ascension in degrees  <li> @dec float, J2000 declination in degrees  <li> @radius float, radius in arcminutes  <li> returns trixel table(HtmIDStart bigint, HtmIDEnd bigint)  <br><samp> select * from fHtmCoverCircleEq( 190,0,1)</samp>    <br> see also fHtmCoverCircleXyz, fHtmCoverRegioin ','0');
INSERT DBObjects VALUES('fHtmCoverCircleXyz','F','U',' Returns HTM cover for a circle given with cartesian vector (x,y,z), radius ',' Returns a table of HTMID ranges covering a circle centered at CARTESIAN @x,@y,@z   within  @radius arcminutes of that centerpoint  <li> @x float, @y float, @z float, cartesian unit vector for point  <li> @radius float, radius in arcmins   <br> Returns trixel table(HtmIDStart bigint, HtmIDEnd bigint)  <br><samp> select * from fHtmCoverCircleXyz( 1,0,0, 1)</samp>    <br> see also fHtmCoverCircleEq fHtmCoverRegion  ','0');
INSERT DBObjects VALUES('fHtmCoverRegion','F','U',' Returns HTMID range table covering the designated region ',' Regions have the syntax  <pre>  circleSpec  =>     CIRCLE J2000 ra dec  radArcMin  <br>             |       CIRCLE CARTESIAN x y z   radArcMin <br>  rectSpec    =>     RECT J2000      {ra dec }2 <br>             |       RECT CARTESIAN  {x y z  }2 <br>  polySpec    =>     POLY J2000      {ra dec }3+ <br>             |       POLY CARTESIAN  {x y z  }3+ <br>  hullSpec    =>     CHULL J2000     {ra dec }3+ <br>             |       CHULL CARTESIAN {x y z  }3+ <br>  convexSpec	 =>     CONVEX { x y z D}* <br>  coverSpec	 =>     circleSpec | rectSpec | polySpec | hullSpec | convexSpec <br>  regionSpec	 =>     REGION {coverSpec}* | coverspec <br>  for the circle the REGION prefix is optional.  </pre>   <br> returns trixel table(start bigint, end bigint)  <br><samp>  select * from dbo.fHtmCoverRegion(''REGION CIRCLE CARTESIAN -.996 -.1 0 5'')  </samp>    <br>see also fHtmCoverRegionError  ','0');
INSERT DBObjects VALUES('fHtmCoverRegionError','F','U',' Returns an error message describing what is wrong with @region.  ',' Regions have the syntax  <pre>  circleSpec  =>     CIRCLE J2000 ra dec  radArcMin  <br>             |       CIRCLE CARTESIAN x y z   radArcMin <br>  rectSpec    =>     RECT J2000      {ra dec }2 <br>             |       RECT CARTESIAN  {x y z  }2 <br>  polySpec    =>     POLY J2000      {ra dec }3+ <br>             |       POLY CARTESIAN  {x y z  }3+ <br>  hullSpec    =>     CHULL J2000     {ra dec }3+ <br>             |       CHULL CARTESIAN {x y z  }3+ <br>  convexSpec	 =>     CONVEX { x y z D}* <br>  coverSpec	 =>     circleSpec | rectSpec | polySpec | hullSpec | convexSpec <br>  regionSpec	 =>     REGION {coverSpec}* | coverspec <br>  for the circle the REGION prefix is optional.  </pre>   <li> Returns: OK, or string giving the above syntax if the region description is in error.   <br><samp>select dbo.fHtmRegionError(''CIRCLE LATLON 190'')</samp>    <br>see also fHtmCoverRegion ','0');
INSERT DBObjects VALUES('fHtmCoverBinaryAdvanced','F','U','','','0');
INSERT DBObjects VALUES('fHtmCoverRegionAdvanced','F','U',' Returns tables of HTMID ranges with flags designating inner/oouter status  ',' Returns table of HTMID ranges covering a designated region.  The code generates two different types of cover, indicated by its status  <li> 0: OUTER, which fully covers the region,  <li> 1: INNER, which contains trixels fully inside the region.  For the region syntax see the description of fHtmCoverRegion.  <br>Returns table:  <li>htmidStart bigint, 21-deep HtmID range start  <li>htmidEnd   bigint, 21-deep HtmID range end  <li>innerFlag int, 0:outer, 1:inner  <br><samp>  <br>select * from fHtmCoverRegionAdvanced(''REGION CIRCLE CARTESIAN -.996 -.1 0 5'')    </samp>    <br>see also fHtmCoverRegion, fHtmCoverRegionError  ','0');
INSERT DBObjects VALUES('fDistanceEq','F','U',' returns distance (arcmins) between two points (ra1,dec1) and (ra2,dec2) ',' <br> @ra1, @dec1, @ra2, @dec2 are in degrees  <br><samp>select top 10 objid, dbo.fDistanceEq(185,0,ra,dec) from PhotoObj </samp> ','0');
INSERT DBObjects VALUES('fDistanceXyz','F','U',' returns distance (arcmins) between two points (x1,y1,z1) and (x2,y1,z2) ',' <br> x1,y1,z1 and x2,y2,z2 are cartesian unit vectors   <br><samp>select top 10 objid, dbo.fDistanceXyz(1,0,0,cx,cy,cz) from PhotoObj </samp> ','0');
INSERT DBObjects VALUES('fHtmEqToXyz','F','U',' Convert Ra, Dec to Cartesian coordinates (x, y, z) ',' <br>Parameters:  <li>@ra float, Right Ascension  <li>@dec float, Declination  <br>Returns single row table containing the vector (x, y, z)  <samp>select * from dbo.fHtmEqToXyz(-180.0, 0.0)  <br> gives:  x  y  z  <br>        -1  0  0  </samp> ','0');
INSERT DBObjects VALUES('fHtmXyzToEq','F','U',' Convert Cartesian coordinates (x, y, z) to Ra, Dec ',' (x, y, z) will be normalized unless (x, y, z) is close to (0,0,0)  <br>Parameters:  <li>@x float, @y float, @z float, the cartesian normal vector  <br>Returns single row table containing the values (ra, dec)  <samp>select * from dbo.fHtmXyzToEq(0.0, 0.0, -1.0)  <br> gives:  ra  dec  <br>          0  -90  </samp> ','0');
INSERT DBObjects VALUES('fDistanceArcMinEq','F','U',' returns distance (arc minutes) between two points (ra1,dec1) and (ra2,dec2) ',' <br> ra1, dec1, ra2, dec2 are in degrees  <br>  <samp>select top 10 objid, dbo.fDistanceArcMinEq(185,0,ra,dec) from PhotoObj </samp> ','0');
INSERT DBObjects VALUES('fDistanceArcMinXYZ','F','U',' returns distance (arc minutes) between two points (x1,y1,z1) and (x2,y2,z2) ',' <br> the two points are on the unit sphere  <br>  <samp>select top 10 objid, dbo.fDistanceArcMinXYZ(1,0,0,cx,cy,cz) from PhotoObj </samp>    ','0');
INSERT DBObjects VALUES('fGetNearbyObjEq','F','U',' Given an equatorial point (@ra,@dec), returns table of primary objects  within @r arcmins of the point.  There is no limit on @r.  ',' <br> ra, dec are in degrees, r is in arc minutes.  <br>There is no limit on the number of objects returned, but there are about 40 per sq arcmin.    <p> returned table:    <li> objID bigint NOT NULL       -- Photo primary object identifier  <li> run int NOT NULL,           -- run that observed this object     <li> camcol int NOT NULL,        -- camera column that observed the object  <li> field int NOT NULL,         -- field that had the object  <li> rerun int NOT NULL,         -- computer processing run that discovered the object  <li> type int NOT NULL,          -- type of the object (3=Galaxy, 6= star, see PhotoType in DBconstants)  <li> cx float NOT NULL,          -- x,y,z of unit vector to this object  <li> cy float NOT NULL,  <li> cz float NOT NULL,  <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br>  Sample call to find all the Galaxies within 3 arcminutes of ra,dec 185,0<br>  <samp>   <br> select *   <br> from Galaxy                       as G,   <br>      dbo.fGetNearbyObjEq(185,0,3) as N  <br> where G.objID = N.objID  </samp>   <br> see also fGetNearestObjEq, fGetNearbyObjXYZ, fGetNearestObjXYZ ','0');
INSERT DBObjects VALUES('fGetNearbyObjAllEq','F','U',' Given an equatorial point (@ra,@dec), this function returns a table of all   objects within @r arcmins of the point.  There is no limit on @r. ',' <br> ra, dec are in degrees, r is in arc minutes.  <br>There is no limit on the number of objects returned, but there are about 40 per sq arcmin.    <p> returned table:    <li> objID bigint NOT NULL,      -- Photo object identifier  <li> run int NOT NULL,           -- run that observed this object     <li> camcol int NOT NULL,        -- camera column that observed the object  <li> field int NOT NULL,         -- field that had the object  <li> rerun int NOT NULL,         -- computer processing run that discovered the object  <li> type int NOT NULL,          -- type of the object (3=Galaxy, 6= star, see PhotoType in DBconstants)  <li> cx float NOT NULL,          -- x,y,z of unit vector to this object  <li> cy float NOT NULL,  <li> cz float NOT NULL,  <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br>  Sample call to find all the Galaxies within 3 arcminutes of ra,dec 185,0<br>  <samp>   <br> select *   <br> from Galaxy                       as G,   <br>      dbo.fGetNearbyObjEq(185,0,3) as N  <br> where G.objID = N.objID  </samp>   <br> see also fGetNearestObjEq, fGetNearbyObjAllXYZ, fGetNearestObjXYZ ','0');
INSERT DBObjects VALUES('spNearestObjEq','P','U',' Returns table containing the nearest primary object within @r arcmins of an Equatorial point (@ra,@dec) ',' <br>For the Navigator. Returns the nearest primary object to a given point  <br> ra, dec are in degrees.  <p> returned table:    <li> run int,           		-- run that observed this primary object     <li> objID bigint,   		-- Photo object identifier  <li> ra varchar(10),   		-- ra rounded to 5 decimal places.  <li> dec varchar(8),   		-- dec rounded to 5 decimal places.  <li> type varchar(8),        	-- type: galaxy, star, sky...   <li> U, G, R, I, Z,  varchar(6), 	-- magnitude/luptitude rounded to 2 digits.  <li> distance varchar(6)        	-- distance in arc minutes to this object from the ra,dec.  <br>  Sample call to find all the Galaxies within 2 arcminutes of ra,dec 185,-0.5  <br>  <samp>   <br> EXEC spNearestObjEq 185.0 -0.5 2  </samp>   <br> see also fGetNearbyObjEq, fGetNearestObjEq, fGetNearbyObjXYZ, fGetNearestObjXYZ ','0');
INSERT DBObjects VALUES('fGetNearestObjEq','F','U',' Returns table holding a record describing the closest primary object within @r arcminutes of (@ra,@dec). ',' <br> ra, dec are in degrees, r is in arc minutes.  <p> returned table:   <li> objID bigint,               -- Photo primary object identifier  <li> run int NOT NULL,           -- run that observed this object     <li> camcol int NOT NULL,        -- camera column that observed the object  <li> field int NOT NULL,         -- field that had the object  <li> rerun int NOT NULL,         -- computer processing run that discovered the object  <li> type int NOT NULL,          -- type of the object (3=Galaxy, 6= star, see PhotoType in DBconstants)  <li> cx float NOT NULL,          -- x,y,z of unit vector to this object  <li> cy float NOT NULL,  <li> cz float NOT NULL,  <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br  Sample call to find the PhotoObject within 1 arcminutes of ra,dec 185,0  <br><samp>  <br> select *   <br> from   dbo.fGetNearestObjEq(185,0,1)     </samp>    <br> see also fGetNearbyObjEq, fGetNearbyObjXYZ, fGetNearestObjXYZ ','0');
INSERT DBObjects VALUES('fGetNearestObjAllEq','F','U',' Returns table holding a record describing the closest object within @r arcminutes of (@ra,@dec). ',' <br> ra, dec are in degrees, r is in arc minutes.  <p> returned table:   <li> objID bigint,               -- Photo primary object identifier  <li> run int NOT NULL,           -- run that observed this object     <li> camcol int NOT NULL,        -- camera column that observed the object  <li> field int NOT NULL,         -- field that had the object  <li> rerun int NOT NULL,         -- computer processing run that discovered the object  <li> type int NOT NULL,          -- type of the object (3=Galaxy, 6= star, see PhotoType in DBconstants)  <li> cx float NOT NULL,          -- x,y,z of unit vector to this object  <li> cy float NOT NULL,  <li> cz float NOT NULL,  <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br  Sample call to find the PhotoObject within 1 arcminutes of ra,dec 185,0  <br><samp>  <br> select *   <br> from   dbo.fGetNearestObjAllEq(185,0,1)     </samp>    <br> see also fGetNearbyObjAllEq, fGetNearbyObjAllXYZ ','0');
INSERT DBObjects VALUES('fGetNearestObjIdEq','F','U',' Returns the objId of nearest photoPrimary within @r arcmins of ra, dec ',' <br> ra, dec are in degrees, r is in arc minutes.  <br>This scalar function is used for matchups of external catalogs.  <br>It calls  <samp>fGetNearestObjEq(@ra,@dec,@r)</samp>, and selects   the objId (a bigint).   <br>This can be called by a single SELECT from an uploaded (ra,dec) table.  <br>An example:   <br><samp>  <br>  SELECT id, ra,dec, dbo.fGetNearestObjIdEq(ra,dec,3.0) as objId  <br>      FROM #upload  <br>      WHERE dbo.fGetNearestObjIdEq(ra,dec,3.0) IS NOT NULL </samp><p> ','0');
INSERT DBObjects VALUES('fGetNearestObjIdAllEq','F','U',' Returns the objId of nearest photo object within @r arcmins of ra, dec ',' <br> ra, dec are in degrees, r is in arc minutes.  <br>This scalar function is used for matchups of external catalogs.  <br>It calls  <samp>fGetNearestObjAllEq(@ra,@dec,@r)</samp>, and selects   the objId (a bigint).   <br>This can be called by a single SELECT from an uploaded (ra,dec) table.  <br>An example:   <br><samp>  <br>  SELECT id, ra,dec, dbo.fGetNearestObjIdAllEq(ra,dec,3.0) as objId  <br>      FROM #upload  <br>      WHERE dbo.fGetNearestObjIdAllEq(ra,dec,3.0) IS NOT NULL </samp><p> ','0');
INSERT DBObjects VALUES('fGetNearestObjIdEqType','F','U',' Returns the objID of the nearest photPrimary of type @t within @r arcmin ',' <br> ra, dec are in degrees, r is in arc minutes.  <br> t is an integer drawn from the PhotoType table.   <br> popular types are 3: GALAXY, 6: STAR  <br> others: 0: UNKNOWN, 1:COSMIC_RAY  2: DEFECT, 4: GHOST, 5: KNOWNOBJ, 7:TRAIL, 8: SKY   This scalar function is used for matchups of external catalogs.  It calls the <samp>fGetNearbyObjEq(@ra,@dec,@r)</samp>, and selects  the objId (a bigint). This can be called by a single SELECT from an uploaded  (ra,dec) table.  <br>An example:   <br><samp>  <br>  SELECT id, ra,dec, dbo.fGetNearestObjIdEqType(ra,dec,3.0,6) as objId  <br>      FROM #upload  <br>      WHERE dbo.fGetNearestObjIdEqType(ra,dec,3.0,6) IS NOT NULL </samp><p> ','0');
INSERT DBObjects VALUES('fGetNearestObjIdEqMode','F','U',' Returns the objId of nearest @mode PhotoObjAll within @r arcmins of ra, dec ',' <br> ra, dec are in degrees, r is in arc minutes.  <br>This scalar function is used for matchups of external catalogs.  <br>It calls  <samp>fGetNearestObjEq(@ra,@dec,@r)</samp>, and selects   the objId (a bigint).   <br>This can be called by a single SELECT from an uploaded (ra,dec) table.  <br>An example:   <br><samp>  <br>  SELECT id, ra,dec, dbo.fGetNearestObjIdEq(ra,dec,3.0) as objId  <br>      FROM #upload  <br>      WHERE dbo.fGetNearestObjIdEq(ra,dec,3.0) IS NOT NULL </samp><p> ','0');
INSERT DBObjects VALUES('fGetNearbyObjXYZ','F','U',' Returns table of primary objects within @r arcmins of an xyz point (@nx,@ny, @nz). ',' There is no limit on the number of objects returned, but there are about 40 per sq arcmin.  <p>returned table:    <li> objID bigint,               -- Photo primary object identifier  <li> run int NOT NULL,           -- run that observed this object     <li> camcol int NOT NULL,        -- camera column that observed the object  <li> field int NOT NULL,         -- field that had the object  <li> rerun int NOT NULL,         -- computer processing run that discovered the object  <li> type int NOT NULL,          -- type of the object (3=Galaxy, 6= star, see PhotoType in DBconstants)  <li> cx float NOT NULL,          -- x,y,z of unit vector to this object  <li> cy float NOT NULL,  <li> cz float NOT NULL,  <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find PhotoObjects within 5 arcminutes of xyz -.0996,-.1,0  <br><samp>  <br>select *  <br> from  dbo.fGetNearbyObjXYZ(-.996,-.1,0,5)    </samp>    <br>see also fGetNearbyObjEq, fGetNearestObjXYZ, fGetNearestObjXYZ ','0');
INSERT DBObjects VALUES('fGetNearbyObjAllXYZ','F','U',' Returns table of photo objects within @r arcmins of an xyz point (@nx,@ny, @nz). ',' There is no limit on the number of objects returned, but there are about 40 per sq arcmin.  <p>returned table:    <li> objID bigint,               -- Photo primary object identifier  <li> run int NOT NULL,           -- run that observed this object     <li> camcol int NOT NULL,        -- camera column that observed the object  <li> field int NOT NULL,         -- field that had the object  <li> rerun int NOT NULL,         -- computer processing run that discovered the object  <li> type int NOT NULL,          -- type of the object (3=Galaxy, 6= star, see PhotoType in DBconstants)  <li> mode tinyint NOT NULL,      -- mode of photoObj  <li> cx float NOT NULL,          -- x,y,z of unit vector to this object  <li> cy float NOT NULL,  <li> cz float NOT NULL,  <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find PhotoObjects within 5 arcminutes of xyz -.0996,-.1,0  <br><samp>  <br>select *  <br> from  dbo.fGetNearbyObjXYZ(-.996,-.1,0,5)    </samp>    <br>see also fGetNearbyObjEq, fGetNearestObjXYZ, fGetNearestObjXYZ ','0');
INSERT DBObjects VALUES('fGetNearestObjXYZ','F','U',' Returns nearest primary object within @r arcminutes of an xyz point (@nx,@ny, @nz). ',' <p> returned table:    <li> objID bigint,               -- Photo primary object identifier  <li> run int NOT NULL,           -- run that observed this object     <li> camcol int NOT NULL,        -- camera column that observed the object  <li> field int NOT NULL,         -- field that had the object  <li> rerun int NOT NULL,         -- computer processing run that discovered the object  <li> type int NOT NULL,          -- type of the object (3=Galaxy, 6= star, see PhotoType in DBconstants)  <li> cx float NOT NULL,          -- x,y,z of unit vector to this object  <li> cy float NOT NULL,  <li> cz float NOT NULL,  <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br>  Sample call to find the nearest PhotoObject within 1/2 arcminute  of xyz -.0996,-.1,0   <br><samp>   <br> select *   <br> from  dbo.fGetNearestObjXYZ(-.996,-.1,0,0.5)     </samp>     <br>see also fGetNearbyObjEq, fGetNearestObjEq, fGetNearbyObjXYZ,  ','0');
INSERT DBObjects VALUES('fGetNearestSpecObjIdEq','F','U',' Returns the specObjId of nearest sciencePrimary spectrum within @r arcmins of ra, dec ',' <br> ra, dec are in degrees, r is in arc minutes.  <br>This scalar function is used for matchups of external catalogs.  <br>It calls  <samp>fGetNearestSpecObjEq(@ra,@dec,@r)</samp>, and selects   the specObjId (a bigint).   <br>This can be called by a single SELECT from an uploaded (ra,dec) table.  <br>An example:   <br><samp>  <br>  SELECT id, ra,dec, dbo.fGetNearestSpecObjIdEq(ra,dec,3.0) as specObjId  <br>      FROM #upload  <br>      WHERE dbo.fGetNearestSpecObjIdEq(ra,dec,3.0) IS NOT NULL </samp><p> ','0');
INSERT DBObjects VALUES('fGetNearestSpecObjIdAllEq','F','U',' Returns the specObjID of nearest photo object within @r arcmins of ra, dec ',' <br> ra, dec are in degrees, r is in arc minutes.  <br>This scalar function is used for matchups of external catalogs.  <br>It calls  <samp>fGetNearestSpecObjAllEq(@ra,@dec,@r)</samp>, and selects   the specObjID (a bigint).   <br>This can be called by a single SELECT from an uploaded (ra,dec) table.  <br>An example:   <br><samp>  <br>  SELECT id, ra,dec, dbo.fGetNearestSpecObjIdAllEq(ra,dec,3.0) as specObjID  <br>      FROM #upload  <br>      WHERE dbo.fGetNearestSpecObjIdAllEq(ra,dec,3.0) IS NOT NULL </samp><p> ','0');
INSERT DBObjects VALUES('fGetNearbySpecObjXYZ','F','U',' Returns table of scienceprimary spectrum objects within @r arcmins of an xyz point (@nx,@ny, @nz). ',' There is no limit on the number of objects returned, but there are about 40 per sq arcmin.  <p>returned table:    <li> specObjID numeric(20),               -- Photo primary object identifier  <li> run int NOT NULL,           -- run that observed this object     <li> camcol int NOT NULL,        -- camera column that observed the object  <li> field int NOT NULL,         -- field that had the object  <li> rerun int NOT NULL,         -- computer processing run that discovered the object  <li> type int NOT NULL,          -- type of the object (3=Galaxy, 6= star, see PhotoType in DBconstants)  <li> mode tinyint NOT NULL,      -- mode of photoObj  <li> cx float NOT NULL,          -- x,y,z of unit vector to this object  <li> cy float NOT NULL,  <li> cz float NOT NULL,  <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find SpecObj within 5 arcminutes of xyz -.0996,-.1,0  <br><samp>  <br>select *  <br> from  dbo.fGetNearbySpecObjXYZ(-.996,-.1,0,5)    </samp>    <br>see also fGetNearbySpecObjEq, fGetNearestSpecObjXYZ, fGetNearbySpecObjAllXYZ ','0');
INSERT DBObjects VALUES('fGetNearbySpecObjAllXYZ','F','U',' Returns table of all spectrum objects within @r arcmins of an xyz point (@nx,@ny, @nz). ',' There is no limit on the number of objects returned.  <p>returned table:    <li> objID bigint,               -- Photo primary object identifier  <li> run int NOT NULL,           -- run that observed this object     <li> camcol int NOT NULL,        -- camera column that observed the object  <li> field int NOT NULL,         -- field that had the object  <li> rerun int NOT NULL,         -- computer processing run that discovered the object  <li> type int NOT NULL,          -- type of the object (3=Galaxy, 6= star, see PhotoType in DBconstants)  <li> mode tinyint NOT NULL,      -- mode of photoObj  <li> cx float NOT NULL,          -- x,y,z of unit vector to this object  <li> cy float NOT NULL,  <li> cz float NOT NULL,  <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find SpecObj within 0.5 arcminutes of xyz -.0996,-.1,0  <br><samp>  <br>select *  <br> from  dbo.fGetNearbySpecObjAllXYZ(-.996,-.1,0,0.5)    </samp>    <br>see also fGetNearbySpecObjEq, fGetNearestSpecObjXYZ, fGetNearestSpecObjXYZ ','0');
INSERT DBObjects VALUES('fGetNearestSpecObjXYZ','F','U',' Returns nearest scienceprimary specobj within @r arcminutes of an xyz point (@nx,@ny, @nz). ',' <p> returned table:    <li>  specObjID numeric(20),		-- unique spectrum ID  <li>  plate int NOT NULL,		-- spectroscopic plate number  <li>  mjd int NOT NULL,		-- MJD of observation  <li>  fiberID int NOT NULL,	-- fiber number on plate  <li>  z real NOT NULL,		-- final spectroscopic redshift  <li>  zErr real NOT NULL,		-- redshift error  <li>  zWarning int NOT NULL,	-- warning flags  <li>  cx float NOT NULL,		-- x of normal unit vector in J2000  <li>  cy float NOT NULL,		-- y of normal unit vector in J2000  <li>  cz float NOT NULL,		-- z of normal unit vector in J2000  <li>  htmID bigint,		-- 20-deep HTM ID  <li>  distance float		-- distance in arc minutes  <br>  Sample call to find the nearest SpecObj within 1/2 arcminute  of xyz -.0996,-.1,0   <br><samp>   <br> select *   <br> from  dbo.fGetNearestSpecObjXYZ(-.996,-.1,0,0.5)     </samp>     <br>see also fGetNearbySpecObjEq, fGetNearestSpecObjEq, fGetNearbySpecObjXYZ,  ','0');
INSERT DBObjects VALUES('fGetNearestSpecObjAllXYZ','F','U',' Returns nearest specobj within @r arcminutes of an xyz point (@nx,@ny, @nz). ',' <p> returned table:    <li>  specObjID numeric(20),		-- unique spectrum ID  <li>  plate int NOT NULL,		-- spectroscopic plate number  <li>  mjd int NOT NULL,		-- MJD of observation  <li>  fiberID int NOT NULL,	-- fiber number on plate  <li>  z real NOT NULL,		-- final spectroscopic redshift  <li>  zErr real NOT NULL,		-- redshift error  <li>  zWarning int NOT NULL,	-- warning flags  <li>  sciencePrimary int NOT NULL,	-- deemed to be science-worthy or not  <li>  cx float NOT NULL,		-- x of normal unit vector in J2000  <li>  cy float NOT NULL,		-- y of normal unit vector in J2000  <li>  cz float NOT NULL,		-- z of normal unit vector in J2000  <li>  htmID bigint,		-- 20-deep HTM ID  <li>  distance float		-- distance in arc minutes  <br>  Sample call to find the nearest SpecObj within 1/2 arcminute  of xyz -.0996,-.1,0   <br><samp>   <br> select *   <br> from  dbo.fGetNearestSpecObjAllXYZ(-.996,-.1,0,0.5)     </samp>     <br>see also fGetNearbySpecObjAllEq, fGetNearestSpecObjAllEq, fGetNearbySpecObjAllXYZ,  ','0');
INSERT DBObjects VALUES('fGetNearbySpecObjEq','F','U',' Returns table of spectrum objects within @r arcmins of an equatorial point (@ra, @dec). ',' There is no limit on the number of objects returned.  <p>returned table:    <li>  specObjID numeric(20),		-- unique spectrum ID  <li>  plate int NOT NULL,		-- spectroscopic plate number  <li>  mjd int NOT NULL,		-- MJD of observation  <li>  fiberID int NOT NULL,	-- fiber number on plate  <li>  z real NOT NULL,		-- final spectroscopic redshift  <li>  zErr real NOT NULL,		-- redshift error  <li>  zWarning int NOT NULL,	-- warning flags  <li>  cx float NOT NULL,		-- x of normal unit vector in J2000  <li>  cy float NOT NULL,		-- y of normal unit vector in J2000  <li>  cz float NOT NULL,		-- z of normal unit vector in J2000  <li>  htmID bigint,		-- 20-deep HTM ID  <li>  distance float		-- distance in arc minutes  <br> Sample call to find SpecObj within 0.5 arcminutes of ra,dec 180.0, -0.5  <br><samp>  <br>select *  <br> from  dbo.fGetNearbySpecObjXYZ(180.0, -0.5, 0,5)    </samp>    <br>see also fGetNearbySpecObjEq, fGetNearestSpecObjXYZ, fGetNearestSpecObjXYZ ','0');
INSERT DBObjects VALUES('fGetNearbySpecObjAllEq','F','U',' Returns table of spectrum objects within @r arcmins of an equatorial point (@ra, @dec). ',' There is no limit on the number of objects returned.  <p>returned table:    <li>  specObjID numeric(20),		-- unique spectrum ID  <li>  plate int NOT NULL,		-- spectroscopic plate number  <li>  mjd int NOT NULL,		-- MJD of observation  <li>  fiberID int NOT NULL,	-- fiber number on plate  <li>  z real NOT NULL,		-- final spectroscopic redshift  <li>  zErr real NOT NULL,		-- redshift error  <li>  zWarning int NOT NULL,	-- warning flags  <li>  sciencePrimary int NOT NULL,	-- deemed to be science-worthy or not  <li>  cx float NOT NULL,		-- x of normal unit vector in J2000  <li>  cy float NOT NULL,		-- y of normal unit vector in J2000  <li>  cz float NOT NULL,		-- z of normal unit vector in J2000  <li>  htmID bigint,		-- 20-deep HTM ID  <li>  distance float		-- distance in arc minutes  <br> Sample call to find SpecObj within 0.5 arcminutes of ra,dec 180.0, -0.5  <br><samp>  <br>select *  <br> from  dbo.fGetNearbySpecObjEq(180.0, -0.5, 0,5)    </samp>    <br>see also fGetNearbySpecObjEq, fGetNearestSpecObjXYZ, fGetNearestSpecObjXYZ ','0');
INSERT DBObjects VALUES('fGetNearestSpecObjEq','F','U',' Returns nearest scienceprimary specobj within @r arcminutes of an equatorial point (@ra,@dec). ',' <p> returned table:    <li>  specObjID numeric(20),		-- unique spectrum ID  <li>  plate int NOT NULL,		-- spectroscopic plate number  <li>  mjd int NOT NULL,		-- MJD of observation  <li>  fiberID int NOT NULL,	-- fiber number on plate  <li>  z real NOT NULL,		-- final spectroscopic redshift  <li>  zErr real NOT NULL,		-- redshift error  <li>  zWarning int NOT NULL,	-- warning flags  <li>  cx float NOT NULL,		-- x of normal unit vector in J2000  <li>  cy float NOT NULL,		-- y of normal unit vector in J2000  <li>  cz float NOT NULL,		-- z of normal unit vector in J2000  <li>  htmID bigint,		-- 20-deep HTM ID  <li>  distance float		-- distance in arc minutes  <br>  Sample call to find the nearest SpecObj within 1/2 arcminute  of ra,dec 180.0, -0.5, 0.5   <br><samp>   <br> select *   <br> from  dbo.fGetNearestSpecObjEq(180.0,-0.5,0.5)     </samp>     <br>see also fGetNearbySpecObjEq, fGetNearestSpecObjAllEq, fGetNearbySpecObjXYZ,  ','0');
INSERT DBObjects VALUES('fGetNearestSpecObjAllEq','F','U',' Returns nearest specobj within @r arcminutes of an equatorial point (@ra, @dec). ',' <p> returned table:    <li>  specObjID numeric(20),		-- unique spectrum ID  <li>  plate int NOT NULL,		-- spectroscopic plate number  <li>  mjd int NOT NULL,		-- MJD of observation  <li>  fiberID int NOT NULL,	-- fiber number on plate  <li>  z real NOT NULL,		-- final spectroscopic redshift  <li>  zErr real NOT NULL,		-- redshift error  <li>  zWarning int NOT NULL,	-- warning flags  <li>  sciencePrimary int NOT NULL,	-- deemed to be science-worthy or not  <li>  cx float NOT NULL,		-- x of normal unit vector in J2000  <li>  cy float NOT NULL,		-- y of normal unit vector in J2000  <li>  cz float NOT NULL,		-- z of normal unit vector in J2000  <li>  htmID bigint,		-- 20-deep HTM ID  <li>  distance float		-- distance in arc minutes  <br>  Sample call to find the nearest SpecObj within 1/2 arcminute of ra,dec 180.0, -0.5  <br><samp>   <br> select *   <br> from  dbo.fGetNearestSpecObjAllEq(180.0,-0.5,0.5)     </samp>     <br>see also fGetNearbySpecObjAllEq, fGetNearestSpecObjEq, fGetNearbySpecObjAllXYZ,  ','0');
INSERT DBObjects VALUES('fGetNearbyApogeeStarXYZ','F','U',' Returns table of APOGEE spectrum objects within @r arcmins of an xyz point (@nx,@ny,@nz). ',' There is no limit on the number of objects returned, but there are about 40 per sq arcmin.  <p>returned table:    <li> apstar_id varchar(50) NOT NULL,      -- Combined star spectrum unique ID  <li> star varchar(32) NOT NULL,           -- 2MASS-style star id  <li> ra float NOT NULL,            -- Right Ascension  <li> dec float NOT NULL,		-- declination  <li> glon float NOT NULL,          -- Galactic longitude   <li> glat float NOT NULL,		-- Galactic latitude   <li> vhelio_avg real NOT NULL	-- S/N-weighted average of heliocentric radial velocity  <li> vscatter real NOT NULL	-- stdev of scatter of visit RVs around average  <li> distance float NOT NULL    -- distance in arcmin from specified equatorial point  <li> htmID bigint NOT NULL		-- Hierarchical Trangular Mesh id of this star  <br> Sample call to find APOGEE star within 5 arcminutes of xyz -0.904,-0.287,0.316  <br><samp>  <br>select *  <br> from  dbo.fGetNearbyApogeeStarXYZ(-0.904,-0.287,0.316, 5)    </samp>    <br>see also fGetNearbyApogeeStarEq, fGetNearestApogeeStarEq, fGetNearestApogeeStarXYZ ','0');
INSERT DBObjects VALUES('fGetNearbyApogeeStarEq','F','U',' Returns table of APOGEE spectrum objects within @r arcmins of an equatorial point (@ra,@dec). ',' There is no limit on the number of objects returned.  <p>returned table:    <li> apstar_id varchar(50) NOT NULL,      -- Combined star spectrum unique ID  <li> star varchar(32) NOT NULL,           -- 2MASS-style star id  <li> ra float NOT NULL,            -- Right Ascension  <li> dec float NOT NULL,		-- declination  <li> glon float NOT NULL,          -- Galactic longitude   <li> glat float NOT NULL,		-- Galactic latitude   <li> vhelio_avg real NOT NULL	-- S/N-weighted average of heliocentric radial velocity  <li> vscatter real NOT NULL	-- stdev of scatter of visit RVs around average  <li> distance float NOT NULL    -- distance in arcmin from specified equatorial point  <li> htmID bigint NOT NULL		-- Hierarchical Trangular Mesh id of this star  <br> Sample call to find APOGEE star within 5 arcminutes of xyz -.0996,-.1,0  <br><samp>  <br>select *  <br> from  dbo.fGetNearbyApogeeStarEq(180.0,-0.1,0,5)    </samp>    <br>see also fGetNearbyApogeeStarXYZ, fGetNearestApogeeStarEq, fGetNearestApogeeStarXYZ ','0');
INSERT DBObjects VALUES('fGetNearestApogeeStarXYZ','F','U',' Returns nearest APOGEE star spectrum within @r arcmins of an xyz point (@nx,@ny,@nz). ',' There is no limit on the number of objects returned.  <p>returned table:    <li> apstar_id varchar(64) NOT NULL,      -- Combined star spectrum unique ID  <li> star varchar(32) NOT NULL,           -- 2MASS-style star id  <li> ra float NOT NULL,            -- Right Ascension  <li> dec float NOT NULL,		-- declination  <li> glon float NOT NULL,          -- Galactic longitude   <li> glat float NOT NULL,		-- Galactic latitude   <li> vhelio_avg real NOT NULL	-- S/N-weighted average of heliocentric radial velocity  <li> vscatter real NOT NULL	-- stdev of scatter of visit RVs around average  <li> distance float NOT NULL    -- distance in arcmin from specified equatorial point  <li> htmID bigint NOT NULL		-- Hierarchical Trangular Mesh id of this star  <br> Sample call to find APOGEE star within 5 arcminutes of xyz -0.904,-0.287,0.316  <br><samp>  <br>select *  <br> from  dbo.fGetNearestApogeeStarXYZ(-0.904,-0.287,0.316, 5)    </samp>    <br>see also fGetNearbyApogeeStarEq, fGetNearbyApogeeStarXYZ, fGetNearestApogeeStarEq ','0');
INSERT DBObjects VALUES('fGetNearestApogeeStarEq','F','U',' Returns nearest APOGEE star spectrum within @r arcmins of an equatorial point (@ra,@dec). ',' There is no limit on the number of objects returned.  <p>returned table:    <li> apstar_id varchar(64) NOT NULL,      -- Combined star spectrum unique ID  <li> star varchar(32) NOT NULL,           -- 2MASS-style star id  <li> ra float NOT NULL,            -- Right Ascension  <li> dec float NOT NULL,		-- declination  <li> glon float NOT NULL,          -- Galactic longitude   <li> glat float NOT NULL,		-- Galactic latitude   <li> vhelio_avg real NOT NULL	-- S/N-weighted average of heliocentric radial velocity  <li> vscatter real NOT NULL	-- stdev of scatter of visit RVs around average  <li> distance float NOT NULL    -- distance in arcmin from specified equatorial point  <li> htmID bigint NOT NULL		-- Hierarchical Trangular Mesh id of this star  <br> Sample call to find APOGEE star within 5 arcminutes of equatorial point 180.0, -0.1  <br><samp>  <br>select *  <br> from  dbo.fGetNearestApogeeStarEq(180.0,-0.1,0,5)    </samp>    <br>see also fGetNearbyApogeeStarEq, fGetNearbyApogeeStarXYZ, fGetNearestApogeeStarXYZ ','0');
INSERT DBObjects VALUES('fGetNearbyMangaObjEq','F','U',' Returns table of MaNGA objects within @r arcmins of an equatorial point (@ra,@dec). ',' There is no limit on the number of objects returned, but there are about 40 per sq arcmin.  <p>returned table:    <li> plateIFU varchar(20) NOT NULL,   -- MaNGA unique ID  <li> mangaid varchar(20) NOT NULL,    -- MaNGA target id  <li> objra float NOT NULL,            -- Right Ascension  <li> objdec float NOT NULL,	   -- declination  <li> ifura float NOT NULL,            -- Right Ascension  <li> ifudec float NOT NULL,	   -- declination  <li> drp3qual bigint NOT NULL,	   -- Quality bitmask  <li> bluesn2 real NOT NULL, 	   -- Total blue SN2 across all nexp exposures  <li> redsn2 real NOT NULL,	   -- Total red SN2 across all nexp exposures  <li> mjdmax int NOT NULL,	   	   --/D Maximum MJD across all exposures  <li> mngtarg1 bigint NOT NULL,	   --/D Manga-target1 maskbit for galaxy target catalog  <li> mngtarg2 bigint NOT NULL,	   --/D Manga-target2 maskbit for galaxy target catalog  <li> mngtarg3 bigint NOT NULL,	   --/D Manga-target3 maskbit for galaxy target catalog  <li> htmID bigint NOT NULL		   -- Hierarchical Trangular Mesh id of this objetc  <br> Sample call to find MaNGA object within 5 arcminutes of xyz -.0996,-.1,0  <br><samp>  <br>select *  <br> from  dbo.fGetNearbyMangaObjEq(180.0,-0.1,0,5)    </samp>    <br>see also fGetNearestMangaObjEq ','0');
INSERT DBObjects VALUES('fGetNearestMangaObjEq','F','U',' Returns nearest MaNGA object within @r arcmins of an equatorial point (@ra,@dec). ',' There is no limit on the number of objects returned, but there are about 40 per sq arcmin.  <p>returned table:    <li> plateIFU varchar(20) NOT NULL,      -- MaNGA unique ID  <li> mangaid varchar(20) NOT NULL,       -- MaNGA target id  <li> objra float NOT NULL,     -- Right Ascension  <li> objdec float NOT NULL,    -- declination  <li> ifura float NOT NULL,     -- Right Ascension  <li> ifudec float NOT NULL,    -- declination  <li> drp3qual bigint NOT NULL, -- Quality bitmask  <li> bluesn2 real NOT NULL,   -- Total blue SN2 across all nexp exposures  <li> redsn2 real NOT NULL,    -- Total red SN2 across all nexp exposures  <li> mjdmax int NOT NULL,   --/D Maximum MJD across all exposures  <li> mngtarg1 bigint NOT NULL, --/D Manga-target1 maskbit for galaxy target catalog  <li> mngtarg2 bigint NOT NULL, --/D Manga-target2 maskbit for galaxy target catalog  <li> mngtarg3 bigint NOT NULL, --/D Manga-target3 maskbit for galaxy target catalog  <li> htmID bigint NOT NULL	    -- Hierarchical Trangular Mesh id of this object  <br> Sample call to find MaNGA object within 5 arcminutes of xyz -.0996,-.1,0  <br><samp>  <br>select *  <br> from  dbo.fGetNearestMangaObjEq(180.0,-0.1,0,5)    </samp>    <br>see also fGetNearbyMangaObjEq ','0');
INSERT DBObjects VALUES('fGetNearbyMaStarObjEq','F','U',' Returns table of MaStar objects within @r arcmins of an equatorial point (@ra,@dec). ',' There is no limit on the number of objects returned, but there are about 40 per sq arcmin.  <p>returned table:    <li> mangaid varchar(20) NOT NULL,    -- MaNGA target id  <li> objra float NOT NULL,            -- Right Ascension  <li> objdec float NOT NULL,	   -- declination  <li> htmID bigint NOT NULL		   -- Hierarchical Trangular Mesh id of this object  <li> distance float NOT NULL		-- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find MaStar object within 5 arcminutes of xyz -.0996,-.1,0  <br><samp>  <br>select * from [dbo].[fGetNearbyMaStarObjEq](38.7, 47.4, 1)    </samp>    <br>see also fGetNearestMastarObjEq ','0');
INSERT DBObjects VALUES('fGetNearestMastarObjEq','F','U',' Returns table of MaNGA objects within @r arcmins of an equatorial point (@ra,@dec). ',' There is no limit on the number of objects returned, but there are about 40 per sq arcmin.  <p>returned table:    <li> mangaid varchar(20) NOT NULL,    -- MaNGA target id  <li> objra float NOT NULL,            -- Right Ascension  <li> objdec float NOT NULL,	   -- declination  <li> htmID bigint NOT NULL		   -- Hierarchical Trangular Mesh id of this object  <li> distance float NOT NULL		-- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find MaNGA object within 5 arcminutes of xyz -.0996,-.1,0  <br><samp>  <br>select * from dbo.[fGetNearestMastarEq](38.7, 47.4, 1)   </samp>    <br>see also fGetNearbystarObjEq ','0');
INSERT DBObjects VALUES('fGetNearbyMosTargetXYZ','F','U',' Returns table of mos_target objects within @r arcmins of an xyz point (@nx,@ny, @nz). ',' There is no limit on the number of objects returned.  <p>returned table:    <li> target_pk biginit NOT NULL, -- primary object identifier  <li> catalogid bigint NULL,      -- id in mos_catalog     <li> ra NULL,                    -- position RA  <li> dec NULL,                   -- position declination  <li> epoch real NULL,            --   <li> parallax NULL,              --   <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find mos_target objects within 5 arcminutes of xyz -0.904,-0.287,0.316  <br><samp>  <br>select *  <br> from  dbo.fGetNearbyMosTargetXYZ(-0.904,-0.287,0.316,5)    </samp>    <br>see also fGetNearbyMosTargetEq, fGetNearestMosTargetEq, fGetNearestMosTargetXyz ','0');
INSERT DBObjects VALUES('fGetNearbyMosTargetEq','F','U',' Returns table of mos_target objects within @r arcmins of an equatorial point (@ra, @dec). ',' There is no limit on the number of objects returned.  <p>returned table:    <li> target_pk biginit NOT NULL, -- primary object identifier  <li> catalogid bigint NULL,      -- id in mos_catalog     <li> ra NULL,                    -- position RA  <li> dec NULL,                   -- position declination  <li> epoch real NULL,            --   <li> parallax NULL,              --   <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find mos_target objects within 0.5 arcminutes of ra,dec 180.0, -0.5  <br><samp>  <br>select *  <br> from  dbo.fGetNearbyMosTargetEq(180.0, -0.5, 0,5)    </samp>    <br>see also fGetNearbyMosTargetXyz, fGetNearestMosTargetEq, fGetNearestMosTargetXYZ ','0');
INSERT DBObjects VALUES('fGetNearestMosTargetXYZ','F','U',' Returns inormation for  the nearest mos_target object ',' There is no limit on the number of objects returned.  <p>returned table:    <li> target_pk biginit NOT NULL, -- primary object identifier  <li> catalogid bigint NULL,      -- id in mos_catalog     <li> ra NULL,                    -- position RA  <li> dec NULL,                   -- position declination  <li> epoch real NULL,            --   <li> parallax NULL,              --   <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find the nearest mos_target object within 5 arcminutes of xyz -0.904,-0.287,0.316  <br><samp>  <br>select *  <br> from  dbo.fGetNearestMosTargetXYZ(-0.904,-0.287,0.316, 5)    </samp>    <br>see also fGetNearbyMosTargetEq, fGetNearbyMosTargetXYZ, fGetNearestMosTargetEq ','0');
INSERT DBObjects VALUES('fGetNearestMosTargetEq','F','U',' Returns inormation for  the nearest mos_target object ',' There is no limit on the number of objects returned.  <p>returned table:    <li> target_pk biginit NOT NULL, -- primary object identifier  <li> catalogid bigint NULL,      -- id in mos_catalog     <li> ra NULL,                    -- position RA  <li> dec NULL,                   -- position declination  <li> epoch real NULL,            --   <li> parallax NULL,              --   <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find the nearest mos_target object within 0.5 arcminutes of ra,dec 180.0, -0.5  <br><samp>  <br>select *  <br> from  dbo.fGetNearestMosTargetEq(180.0, -0.5, 0,5)    </samp>    <br>see also fGetNearbyMosTargetEq, fGetNearbyMosTargetXYZ, fGetNearestMosTargetXYZ ','0');
INSERT DBObjects VALUES('fGetNearbyFrameEq','F','U',' Returns table with a record describing the frames neareby (@ra,@dec) at a given @zoom level. ',' <br> ra, dec are in degrees. Zoom is a value in Frame.Zoom (0, 10, 15, 20, 30).  <br> this rountine is used by the SkyServer Web Server.  <p> returned table is sorted nearest first:    <li> fieldID bigint,                 -- field identifier  <li> a              float NOT NULL , -- abcdef,node, incl astrom transform parameters  <li> b              float NOT NULL ,  <li> c              float NOT NULL ,  <li> d              float NOT NULL ,  <li> e              float NOT NULL ,  <li> f              float NOT NULL ,  <li> node           float NOT NULL ,  <li> incl           float NOT NULL ,  <li> distance	 float NOT NULL   distance in arc minutes to this object from the ra,dec.  <br>  Sample call to find frame nearest to 185,0 and within one arcminute of it.  <br><samp>  <br>select *  <br>from  dbo.fGetNearbyFrameEq(185,0,1)     </samp>     <br>see also fGetNearestFrameEq ','0');
INSERT DBObjects VALUES('fGetNearestFrameEq','F','U',' Returns table with a record describing the nearest frame to (@ra,@dec) at a given @zoom level. ',' <br> ra, dec are in degrees. Zoom is a value in Frame.Zoom (0, 10, 15, 20, 30).  <br> this rountine is used by the SkyServer Web Server.  <p> returned table:    <li> fieldID bigint,                 -- field identifier  <li> a              float NOT NULL , -- abcdef,node, incl astrom transform parameters  <li> b              float NOT NULL ,  <li> c              float NOT NULL ,  <li> d              float NOT NULL ,  <li> e              float NOT NULL ,  <li> f              float NOT NULL ,  <li> node           float NOT NULL ,  <li> incl           float NOT NULL ,  <li> distance	 float NOT NULL   distance in arc minutes to this object from the ra,dec.  <br>  Sample call to find frame nearest to 185,0 and within one arcminute of it.  <br><samp>  <br>select *  <br>from  dbo.fGetNearestFrameEq(185,0,10)     </samp>   ','0');
INSERT DBObjects VALUES('fGetNearestFrameidEq','F','U',' Returns teh fieldid of the nearest frame to (@ra,@dec) at a given @zoom level. ',' <br> ra, dec are in degrees. Zoom is a value in Frame.Zoom (0, 05, 10, 15, 20, 25, 30).  <p> returns the fieldid of the nearest frame  <br>  Sample call to find frameid nearest to 185,0 and within one arcminute of it.  <br><samp>  <br>select *  <br>from  dbo.fGetNearestFrameidEq(185,0,10)     </samp>   ','0');
INSERT DBObjects VALUES('spGetNeighbors','P','U',' Get the neighbors to a list of @ra,@dec pairs in #upload ',' The procedure is used in conjunction with a list upload  service, where the (ra,dec) coordinates of an object list   are put into a temporary table #upload by the web interface.  This table name is hardcoded in the procedure. It then returns  a matchup table, containing the up_id and the SDSS objId.  The result of this is then joined with the PhotoTag table,   to return the attributes of the photometric objects.  <samp>  <br> create table #x (id int,objID bigint)  <br> insert into #x EXEC spGetNeighbors 2.5  </samp> ','0');
INSERT DBObjects VALUES('spGetNeighborsRadius','P','U',' Get the neighbors to a list of @ra,@dec,@r triplets in #upload in photoPrimary ',' The procedure is used in conjunction with a list upload  service, where the (ra,dec) coordinates and the search radius  of an object list are put into a temporary table #upload by   the web interface.  This table name is hardcoded in the procedure.   It then returns a matchup table, containing the up_id and the SDSS   objId. The result of this is then joined with the photoPrimary   table, to return the attributes of the photometric objects.  <samp>  <br> create table #x (id int,objID bigint)  <br> insert into #x EXEC spGetNeighbours   </samp> ','0');
INSERT DBObjects VALUES('spGetNeighborsPrim','P','U',' Get the primary neighbors to a list of @ra,@dec pairs in #upload ',' The procedure is used in conjunction with a list upload  service, where the (ra,dec) coordinates of an object list   are put into a temporary table #upload by the web interface.  This table name is hardcoded in the procedure. It then returns  a matchup table, containing the up_id and the SDSS objId.  The result of this is then joined with the PhotoPrimary table,   to return the attributes of the photometric objects.  <samp>  <br> create table #x (id int,objID bigint)  <br> insert into #x EXEC spGetNeighborsPrim 2.5  </samp> ','0');
INSERT DBObjects VALUES('spGetNeighborsAll','P','U',' Get the neighbors to a list of @ra,@dec pairs in #upload ',' The procedure is used in conjunction with a list upload  service, where the (ra,dec) coordinates of an object list   are put into a temporary table #upload by the web interface.  This table name is hardcoded in the procedure. It then returns  a matchup table, containing the up_id and the SDSS objId.  The result of this is then joined with the PhotoTag table,   to return the attributes of the photometric objects.  <samp>  <br> create table #x (id int,objID bigint)  <br> insert into #x EXEC spGetNeighborsAll 2.5  </samp> ','0');
INSERT DBObjects VALUES('spGetSpecNeighborsRadius','P','U',' Get the spectro scienceprimary neighbors to a list of @ra,@dec,@r triplets in #upload in SpecObj ',' The procedure is used in conjunction with a list upload  service, where the (ra,dec) coordinates and the search radius  of an object list are put into a temporary table #upload by   the web interface.  This table name is hardcoded in the procedure.   It then returns a matchup table, containing the up_id and the SDSS   specObjId. The result of this is then joined with the SpecObj   table, to return the attributes of the photometric objects.  <samp>  <br> create table #x (id int,specObjID numeric(20))  <br> insert into #x EXEC spGetNeighbours   </samp> ','0');
INSERT DBObjects VALUES('spGetSpecNeighborsPrim','P','U',' Get the scienceprimary spectro neighbors to a list of @ra,@dec pairs in #upload ',' The procedure is used in conjunction with a list upload  service, where the (ra,dec) coordinates of an object list   are put into a temporary table #upload by the web interface.  This table name is hardcoded in the procedure. It then returns  a matchup table, containing the up_id and the SDSS specOobjId.  The result of this is then joined with the SpecObj table,   to return the attributes of the photometric objects.  <samp>  <br> create table #x (id int,specObjID numeric(20))  <br> insert into #x EXEC spGetSpecNeighborsPrim 2.5  </samp> ','0');
INSERT DBObjects VALUES('spGetSpecNeighborsAll','P','U',' Get the spectro neighbors to a list of @ra,@dec pairs in #upload ',' The procedure is used in conjunction with a list upload  service, where the (ra,dec) coordinates of an object list   are put into a temporary table #upload by the web interface.  This table name is hardcoded in the procedure. It then returns  a matchup table, containing the up_id and the SDSS specObjId.  The result of this is then joined with the SpecObjAll table,   to return the attributes of the photometric objects.  <samp>  <br> create table #x (id int,specObjID numeric(20))  <br> insert into #x EXEC spGetSpecNeighborsAll 2.5  </samp> ','0');
INSERT DBObjects VALUES('fGetObjFromRect','F','U',' Returns table of objects inside a rectangle defined by two ra,dec pairs.  <br>Note the order of the parameters: @ra1, @ra2, @dec1, @dec2 ',' <br>Assumes dec1<dec2. There is no limit on the number of objects.  <br>Uses level 20 HTM.  <br> returned fields:    <li> objID bigint,             -- id of the object   <li> run int NOT NULL,         -- run that observed the object   <li> camcol int NOT NULL,      -- camera column in run   <li> field int NOT NULL,       -- field in run   <li> rerun int NOT NULL,       -- software rerun that saw the object   <li> type int NOT NULL,        -- type of object (see DataConstants PhotoType)   <li> cx float NOT NULL,        -- xyz of object   <li> cy float NOT NULL,   <li> cz float NOT NULL,   <li> htmID bigint              -- hierarchical triangular mesh ID of object  <br>sample call<br>  <samp> select * from dbo.fGetObjFromRect(185,185.1,0,.1) </samp> ','0');
INSERT DBObjects VALUES('fGetObjFromRectEq','F','U',' Returns table of objects inside a rectangle defined by two ra,dec pairs.  <br>Note the order of the parameters: @ra1, @dec1, @ra2, @dec2 ',' This is a variant of fGetObjFromRect (actually calls it) that takes  the input parameters in a more intuitive order rather than (ra1,ra2,dec1,dec2).  <br>Assumes dec1<dec2. There is no limit on the number of objects.  <br>Uses level 20 HTM.  <br> returned fields:    <li> objID bigint,             -- id of the object   <li> run int NOT NULL,         -- run that observed the object   <li> camcol int NOT NULL,      -- camera column in run   <li> field int NOT NULL,       -- field in run   <li> rerun int NOT NULL,       -- software rerun that saw the object   <li> type int NOT NULL,        -- type of object (see DataConstants PhotoType)   <li> cx float NOT NULL,        -- xyz of object   <li> cy float NOT NULL,   <li> cz float NOT NULL,   <li> htmID bigint              -- hierarchical triangular mesh ID of object  <br>sample call<br>  <samp> select * from dbo.fGetObjFromRectEq(185,0,185.1,0.1) </samp> ','0');
INSERT DBObjects VALUES('fGetObjectsEq','F','U',' A helper function for SDSS cutout that returns all objects  within a certain radius of an (ra,dec) ',' Photo objects are filtered to have magnitude greater than      24-1.5*zoom so that the image is not too cluttered      (and the anwswer set is not too large).<br>  (@flag&1)>0 display specObj ...<br>  (@flag&2)>0 display photoPrimary bright enough for zoom<br>  (@flag&4)>0 display Target <br>  (@flag&8)>0 display Mask<br>  (@flag&16)>0 display Plate<br>  (@flag&32)>0 display PhotoObjAll<br>  thus: @flag=7 will display all three of specObj, PhotoObj and Target  the returned objects have            flag = (specobj:1, photoobj:2, target:4, mask:8, plate:16) ','0');
INSERT DBObjects VALUES('fGetObjectsMaskEq','F','U',' A helper function for SDSS cutout that returns all objects  within a certain radius of an (ra,dec) ',' Photo objects are filtered to have magnitude greater than      24-1.5*zoom so that the image is not too cluttered      (and the anwswer set is not too large).<br>  (@flag&1)>0 display specObj ...<br>  (@flag&2)>0 display photoPrimary...<br>  (@flag&4)>0 display Target <br>  (@flag&8)>0 display Mask<br>  (@flag&16)>0 display Plate<br>  thus: @flag=7 will display all three of specObj, PhotoObj and Target  the returned objects have            flag = (specobj:1, photoobj:2, target:4, mask:8, plate:16) ','0');
INSERT DBObjects VALUES('fGetJpegObjects','F','A',' A helper function for SDSS cutout that returns all objects  within a certain radius of an (ra,dec) ',' Photo objects are filtered to have magnitude greater than      24-1.5*zoom so that the image is not too cluttered      (and the anwswer set is not too large).<br>  (@flag&1)>0 display specObj ...<br>  (@flag&2)>0 display photoPrimary...<br>  (@flag&4)>0 display Target <br>  (@flag&8)>0 display Mask<br>  (@flag&16)>0 display Plate<br>  thus: @flag=7 will display all three of specObj, PhotoObj and Target  the returned objects have            flag = (specobj:1, photoobj:2, target:4, mask:8, plate:16) ','0');
INSERT DBObjects VALUES('spGetMatch','P','U',' Get the neighbors to a list of @ra,@dec pairs in #upload in photoPrimary   within @r arcsec . @w is the weight per object. ',' The procedure is used in conjunction with a list upload   service, where the (ra,dec) coordinates of an object list   are put into a temporary table #upload by the web interface.   This table name is hardcoded in the procedure. It then returns   a matchup table, containing the up_id and the SDSS objId.   The result of this is then joined with the photoPrimary table,   to return the attributes of the photometric objects.   @r is measured in arcsec  @w is the weight, it is 1/@sigma^2, where @sigma is in radians  @eps is the chisq threshold  <samp>   <br> create table #x (pk int,id bigint,a float, ax float, ay float, az float)   <br> insert into #x EXEC spGetMatch  2.5, 0.0000001, ...  </samp>  ','0');
INSERT DBObjects VALUES('fGetNearbyAllspecEq','F','U',' Returns table of Allspec objects within @r arcmins of an equatorial point (@ra, @dec). ',' There is no limit on the number of objects returned.  <p>returned table:    <li> allspec_id varchar(128) NOT NULL, --   <li> sdss_id bigint not null,      --   <li> mangaid varchar(10) not null,      --   <li> apogee_id varchar(32) not null,      --   <li> visit_id varchar(40) not null,      --   <li> specobjid numeric(30) null,      --   <li> ra NULL,                    -- position RA  <li> dec NULL,                   -- position declination           --   <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find mos_target objects within 0.5 arcminutes of ra,dec 180.0, -0.5  <br><samp>  <br>select *  <br> from  dbo.fGetAllspecEq(180.0, -0.5, 0,5)    </samp>    <br>see also fGetNearbyAllspecXyz, fGetNearestAllspecEq, fGetNearestAllspecXYZ ','0');
INSERT DBObjects VALUES('fGetNearbyAllspecXYZ','F','U',' Returns table of Allspec objects within @r arcmins of an equatorial point (@ra, @dec). ',' There is no limit on the number of objects returned.  <p>returned table:    <li> allspec_id varchar(128) NOT NULL, --   <li> sdss_id bigint not null,      --   <li> mangaid varchar(10) not null,      --   <li> apogee_id varchar(32) not null,      --   <li> visit_id varchar(40) not null,      --   <li> specobjid numeric(30) null,      --   <li> ra NULL,                    -- position RA  <li> dec NULL,                   -- position declination           --   <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find mos_target objects within 0.5 arcminutes of ra,dec 180.0, -0.5  <br> Sample call to find mos_target objects within 0.5 arcminutes of ra,dec 180.0, -0.5  <br><samp>  <br>select *  <br> from  dbo.fGetAllspecEq(180.0, -0.5, 0,5)    </samp>    <br>see also fGetNearbyAllspecXyz, fGetNearestAllspecEq, fGetNearestAllspecXYZ ','0');
INSERT DBObjects VALUES('fGetNearestAllspecEq','F','U',' Returns table of Allspec objects within @r arcmins of an equatorial point (@ra, @dec). ',' There is no limit on the number of objects returned.  <p>returned table:    <li> allspec_id varchar(128) NOT NULL, --   <li> sdss_id bigint not null,      --   <li> mangaid varchar(10) not null,      --   <li> apogee_id varchar(32) not null,      --   <li> visit_id varchar(40) not null,      --   <li> specobjid numeric(30) null,      --   <li> ra NULL,                    -- position RA  <li> dec NULL,                   -- position declination           --   <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find Allspec objects within 0.5 arcminutes of ra,dec 180.0, -0.5  <br><samp>  <br>select *  <br> from  dbo.fGetAllspecEq(180.0, -0.5, 0,5)    </samp>    <br>see also fGetNearbyAllspecXyz, fGetNearestAllspecEq, fGetNearestAllspecXYZ ','0');
INSERT DBObjects VALUES('fGetNearestAllspecXYZ','F','U',' Returns nearest Allspec object within @r arcminutes of an xyz point (@nx,@ny, @nz). ',' <li> allspec_id varchar(128) NOT NULL, --   <li> sdss_id bigint not null,      --   <li> mangaid varchar(10) not null,      --   <li> apogee_id varchar(32) not null,      --   <li> visit_id varchar(40) not null,      --   <li> specobjid numeric(30) null,      --   <li> ra NULL,                    -- position RA  <li> dec NULL,                   -- position declination           --   <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find Allspec objects within 0.5 arcminutes of ra,dec 180.0, -0.5  <br><samp>  <br>select *  <br> from  dbo.fGetAllspecEq(180.0, -0.5, 0,5)    </samp>    <br>see also fGetNearbyAllspecXyz, fGetNearestAllspecEq, fGetNearestAllspecXYZ ','0');
INSERT DBObjects VALUES('fGetNearbyApogeeDrpAllstarEq','F','U',' Returns table of ApogeeDrpAllstar objects within @r arcmins of an equatorial point (@ra, @dec). ',' There is no limit on the number of objects returned.  <p>returned table:    <li> 	PK bigint not null,   <li> sdss_id bigint not null,      --   <li> apogee_id varchar(32) not null,      --   <li> ra NULL,                    -- position RA  <li> dec NULL,                   -- position declination           --   <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find mos_target objects within 0.5 arcminutes of ra,dec 180.0, -0.5  <br><samp>  <br>select *  <br> from  dbo.fGetApogeeDrpAllstarEq(180.0, -0.5, 0,5)    </samp>    <br>see also fGetNearbyApogeeDrpAllstarXyz, fGetNearestApogeeDrpAllstarEq, fGetNearestApogeeDrpAllstarXYZ ','0');
INSERT DBObjects VALUES('fGetNearbyApogeeDrpAllstarXYZ','F','U',' Returns table of ApogeeDrpAllstar objects within @r arcmins of an equatorial point (@ra, @dec). ',' There is no limit on the number of objects returned.  <p>returned table:    <li>PK bigint not null --   <li> sdss_id bigint not null,      --    <li> apogee_id varchar(32) not null,      --   <li> ra NULL,                    -- position RA  <li> dec NULL,                   -- position declination           --   <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find mos_target objects within 0.5 arcminutes of ra,dec 180.0, -0.5  <br> Sample call to find mos_target objects within 0.5 arcminutes of ra,dec 180.0, -0.5  <br><samp>  <br>select *  <br> from  dbo.fGetApogeeDrpAllstarEq(180.0, -0.5, 0,5)    </samp>    <br>see also fGetNearbyMosTargetXyz, fGetNearestMosTargetEq, fGetNearestMosTargetXYZ ','0');
INSERT DBObjects VALUES('fGetNearestApogeeDrpAllstarEq','F','U',' Returns table of ApogeeDrpAllstar objects within @r arcmins of an equatorial point (@ra, @dec). ',' There is no limit on the number of objects returned.  <p>returned table:    <li>PK bigint not null --   <li> sdss_id bigint not null,      --    <li> apogee_id varchar(32) not null,      --   <li> ra NULL,                    -- position RA  <li> dec NULL,                   -- position declination           --   <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find ApogeeDrpAllstar objects within 0.5 arcminutes of ra,dec 180.0, -0.5  <br><samp>  <br>select *  <br> from  dbo.fGetApogeeDrpAllstarEq(180.0, -0.5, 0,5)    </samp>    <br>see also fGetNearbyApogeeDrpAllstarXyz, fGetNearestApogeeDrpAllstarEq, fGetNearestApogeeDrpAllstarXYZ ','0');
INSERT DBObjects VALUES('fGetNearestApogeeDrpAllstarXYZ','F','U',' Returns nearest ApogeeDrpAllstar object within @r arcminutes of an xyz point (@nx,@ny, @nz). ',' <li>PK bigint not null --   <li> sdss_id bigint not null,      --    <li> apogee_id varchar(32) not null,      --   <li> ra NULL,                    -- position RA  <li> dec NULL,                   -- position declination           --   <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find ApogeeDrpAllstar objects within 0.5 arcminutes of ra,dec 180.0, -0.5  <br><samp>  <br>select *  <br> from  dbo.fGetApogeeDrpAllstarEq(180.0, -0.5, 0,5)    </samp>    <br>see also fGetNearbyApogeeDrpAllstarXyz, fGetNearestApogeeDrpAllstarEq, fGetNearestApogeeDrpAllstarXYZ ','0');
INSERT DBObjects VALUES('fGetNearbySpAllEq','F','U',' Returns table of SpAll objects within @r arcmins of an equatorial point (@ra, @dec). ',' There is no limit on the number of objects returned.  <p>returned table:    <li> specobjid numeric(30) NOT NULL, --   <li> sdss_id bigint not null,      --   <li> ra NULL,                    -- position RA  <li> dec NULL,                   -- position declination           --   <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find mos_target objects within 0.5 arcminutes of ra,dec 180.0, -0.5  <br><samp>  <br>select *  <br> from  dbo.fGetSpAllEq(180.0, -0.5, 0,5)    </samp>    <br>see also fGetNearbySpAllXyz, fGetNearestSpAllEq, fGetNearestSpAllXYZ ','0');
INSERT DBObjects VALUES('fGetNearbySpAllXYZ','F','U',' Returns table of SpAll objects within @r arcmins of an equatorial point (@ra, @dec). ',' There is no limit on the number of objects returned.  <p>returned table:    <li> specobjid numeric(30)  NULL, --   <li> sdss_id bigint not null,      --   <li> ra NULL,                    -- position RA  <li> dec NULL,                   -- position declination  <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find mos_target objects within 0.5 arcminutes of ra,dec 180.0, -0.5  <br><samp>  <br>select *  <br> from  dbo.fGetSpAllEq(180.0, -0.5, 0,5)    </samp>    <br>see also fGetNearbyMosTargetXyz, fGetNearestMosTargetEq, fGetNearestMosTargetXYZ ','0');
INSERT DBObjects VALUES('fGetNearestSpAllEq','F','U',' Returns table of SpAll objects within @r arcmins of an equatorial point (@ra, @dec). ',' There is no limit on the number of objects returned.  <p>returned table:    <li> specobjid numeric(30)  NULL, --   <li> sdss_id bigint not null,      --   <li> ra NULL,                    -- position RA  <li> dec NULL,                   -- position declination           --   <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find SpAll objects within 0.5 arcminutes of ra,dec 180.0, -0.5  <br><samp>  <br>select *  <br> from  dbo.fGetSpAllEq(180.0, -0.5, 0,5)    </samp>    <br>see also fGetNearbySpAllXyz, fGetNearestSpAllEq, fGetNearestSpAllXYZ ','0');
INSERT DBObjects VALUES('fGetNearestSpAllXYZ','F','U',' Returns nearest SpAll object within @r arcminutes of an xyz point (@nx,@ny, @nz). ',' <p>returned table:    <li> specobjid numeric(30)  NULL, --   <li> sdss_id bigint not null,      --   <li> ra NULL,                    -- position RA  <li> dec NULL,                   -- position declination           --   <li> htmID bigint,               -- Hierarchical Trangular Mesh id of this object  <li> distance float              -- distance in arc minutes to this object from the ra,dec.  <br> Sample call to find SpAll objects within 0.5 arcminutes of ra,dec 180.0, -0.5  <br><samp>  <br>select *  <br> from  dbo.fGetSpAllEq(180.0, -0.5, 0,5)    </samp>    <br>see also fGetNearbySpAllXyz, fGetNearestSpAllEq, fGetNearestSpAllXYZ ','0');
INSERT DBObjects VALUES('fAspcapParamsAll','F','U',' Returns table of APOGEE aspcap parameters along with their errors and flags. ',' This function returns the APOGEE aspcapStar parameters for a given aspcap_id, along with their associated errors and flags.  <p>returned table:  <li> teff real NOT NULL,			-- Empirically calibrated temperature from ASPCAP   <li> teff_err real NOT NULL,		-- external uncertainty estimate for calibrated temperature from ASPCAP  <li> teff_flag int NOT NULL,		-- PARAMFLAG for effective temperature (see http://www.sdss.org/dr12/algorithms/bitmasks/#APOGEE_PARAMFLAG)  <li> logg real NOT NULL,			-- empirically calibrated log gravity from ASPCAP  <li> logg_err real NOT NULL,		-- external uncertainty estimate for log gravity from ASPCAP  <li> logg_flag int NOT NULL,		-- PARAMFLAG for log g  <li> vmicro real NOT NULL,			-- microturbulent velocity (fit for dwarfs, f(log g) for giants)  <li> vmacro real NOT NULL,			-- macroturbulent velocity (f(log Teff,[M/H]) for giants)  <li> vsini real NOT NULL,			-- rotation+macroturbulent velocity (fit for dwarfs)  <li> m_h real NOT NULL,			-- calibrated [M/H]  <li> m_h_err real NOT NULL,		-- calibrated [M/H] uncertainty  <li> m_h_flag int NOT NULL,		-- PARAMFLAG for [M/H]  <li> alpha_m real NOT NULL,		-- calibrated [M/H]  <li> alpha_m_err real NOT NULL,	-- calibrated [M/H] uncertainty  <li> alpha_m_flag int NOT NULL,	-- PARAMFLAG for [alpha/M]  <br> Sample call to get aspcap param errors:  <br><samp>  <br>select TOP 10 a.apstar_id, b.*  <br> from  aspcapStar a CROSS APPLY dbo.fAspcapParamsAll( a.aspcap_id ) b  </samp>  <br>see also fAspcapParams, fAspcapParamErrs, fAspcapParamFlags ','0');
INSERT DBObjects VALUES('fAspcapParams','F','U',' Returns table of APOGEE aspcap parameters. ',' This function returns the APOGEE aspcapStar parameters for a given aspcap_id.  <p>returned table:  <li> teff real NOT NULL,		-- Empirically calibrated temperature from ASPCAP   <li> logg real NOT NULL,		-- empirically calibrated log gravity from ASPCAP  <li> vmicro real NOT NULL,		-- microturbulent velocity (fit for dwarfs, f(log g) for giants)  <li> vmacro real NOT NULL,		-- macroturbulent velocity (f(log Teff,[M/H]) for giants)  <li> vsini real NOT NULL,		-- rotation+macroturbulent velocity (fit for dwarfs)  <li> m_h real NOT NULL,		-- calibrated [M/H]  <li> alpha_m real NOT NULL,	-- calibrated [M/H]  <br> Sample call to get aspcap params:  <br><samp>  <br>select TOP 10 a.apstar_id, b.*  <br> from  aspcapStar a CROSS APPLY dbo.fAspcapParams( a.aspcap_id ) b  </samp>  <br>see also fAspcapParamsAll, fAspcapParamErrs, fAspcapParamFlags ','0');
INSERT DBObjects VALUES('fAspcapParamErrs','F','U',' Returns table of APOGEE aspcap parameter errors. ',' This function returns the errors associated with APOGEE aspcapStar parameters for a given aspcap_id.  <p>returned table:  <li> teff_err real NOT NULL, --/U deg K  --/D external uncertainty estimate for calibrated temperature from ASPCAP  <li> logg_err real NOT NULL, --/U dex --/D external uncertainty estimate for log gravity from ASPCAP  <li> m_h_err real NOT NULL, --/U dex --/D calibrated [M/H] uncertainty  <li> alpha_m_err real NOT NULL --/U dex --/D calibrated [M/H] uncertainty  <br> Sample call to get aspcap param errors:  <br><samp>  <br>select TOP 10 a.apstar_id, b.*  <br> from  aspcapStar a CROSS APPLY dbo.fAspcapParamErrs( a.aspcap_id ) b  </samp>  <br>see also fAspcapParamsAll, fAspcapParams, fAspcapParamFlags ','0');
INSERT DBObjects VALUES('fAspcapParamFlags','F','U',' Returns table of APOGEE aspcap parameter flags. ',' This function returns the flags associated with APOGEE aspcapStar parameters for a given aspcap_id.  <p>returned table:  <li> teff_flag int NOT NULL, --/F paramflag 0 --/D PARAMFLAG for effective temperature (see http://www.sdss.org/dr12/algorithms/bitmasks/#APOGEE_PARAMFLAG)  <li> logg_flag int NOT NULL, --/F paramflag 1 --/D PARAMFLAG for log g  <li> m_h_flag int NOT NULL, --/F paramflag 3 --/D PARAMFLAG for [M/H]  <li> alpha_m_flag int NOT NULL --/F paramflag 6 --/D PARAMFLAG for [alpha/M]  <br> Sample call to get aspcap param flags:  <br><samp>  <br>select TOP 10 a.apstar_id, b.*  <br> from  aspcapStar a CROSS APPLY dbo.fAspcapParamFlags( a.aspcap_id ) b  </samp>  <br>see also fAspcapParamsAll, fAspcapParams, fAspcapParamErrs ','0');
INSERT DBObjects VALUES('fAspcapElemsAll','F','U',' Returns table of APOGEE aspcap element abundances along with their errors and flags. ',' This function returns the APOGEE aspcapStar element abundances for a given aspcap_id, along with their associated errors and flags.  <p>returned table:  <li> c_fe real NOT NULL,         -- empirically calibrated [C/Fe] from ASPCAP; [C/Fe] is calculated as (ASPCAP [C/M])+param_metals  <li> c_fe_err real NOT NULL,     -- external uncertainty for empirically calibrated [C/Fe] from ASPCAP  <li> c_fe_flag int NOT NULL,     -- ELEMFLAG for C (see http://www.sdss.org/dr12/algorithms/bitmasks/#APOGEE_ELEMFLAG)  <li> ci_fe real NOT NULL,        -- empirically calibrated [CI/Fe] from ASPCAP; [C/Fe] is calculated as (ASPCAP [C/M])+param_metals  <li> ci_fe_err real NOT NULL,    -- external uncertainty for empirically calibrated [CI/Fe] from ASPCAP  <li> ci_fe_flag int NOT NULL,    -- ELEMFLAG for CI  <li> n_fe real NOT NULL,         -- empirically calibrated [N/Fe] from ASPCAP; [N/Fe] is calculated as (ASPCAP [N/M])+param_metals  <li> n_fe_err real NOT NULL,     -- external uncertainty for empirically calibrated [N/Fe] from ASPCAP  <li> n_fe_flag int NOT NULL,     -- ELEMFLAG for N  <li> o_fe real NOT NULL,         -- empirically calibrated [O/Fe] from ASPCAP; [O/Fe] is calculated as (ASPCAP [O/M])+param_metals  <li> o_fe_err real NOT NULL,     -- external uncertainty for empirically calibrated [O/Fe] from ASPCAP  <li> o_fe_flag int NOT NULL,     -- ELEMFLAG for O  <li> na_fe real NOT NULL,        -- empirically calibrated [Na/Fe] from ASPCAP  <li> na_fe_err real NOT NULL,    -- external uncertainty for empirically calibrated [Na/Fe] from ASPCAP  <li> na_fe_flag int NOT NULL,    -- ELEMFLAG for Na  <li> mg_fe real NOT NULL,        -- empirically calibrated [Mg/Fe] from ASPCAP; [Mg/Fe] is calculated as (ASPCAP [Mg/M])+param_metals  <li> mg_fe_err real NOT NULL,    -- external uncertainty for empirically calibrated [Mg/Fe] from ASPCAP  <li> mg_fe_flag int NOT NULL,    -- ELEMFLAG for Mg  <li> al_fe real NOT NULL,        -- empirically calibrated [Al/Fe] from ASPCAP  <li> al_fe_err real NOT NULL,    -- external uncertainty for empirically calibrated [Al/Fe] from ASPCAP  <li> al_fe_flag int NOT NULL,    -- ELEMFLAG for Al  <li> si_fe real NOT NULL,        -- empirically calibrated [Si/Fe] from ASPCAP; [Si/Fe] is calculated as (ASPCAP [Si/M])+param_metals  <li> si_fe_err real NOT NULL,    -- external uncertainty for empirically calibrated [Si/Fe] from ASPCAP  <li> si_fe_flag int NOT NULL,    -- ELEMFLAG for Si  <li> p_fe real NOT NULL,         -- empirically calibrated [P/Fe] from ASPCAP; [P/Fe] is calculated as (ASPCAP [P/M])+param_metals  <li> p_fe_err real NOT NULL,     -- external uncertainty for empirically calibrated [P/Fe] from ASPCAP  <li> p_fe_flag int NOT NULL,     -- ELEMFLAG for Si  <li> s_fe real NOT NULL,         -- empirically calibrated [S/Fe] from ASPCAP; [S/Fe] is calculated as (ASPCAP [S/M])+param_metals  <li> s_fe_err real NOT NULL,     -- external uncertainty for empirically calibrated [S/Fe] from ASPCAP  <li> s_fe_flag int NOT NULL,     -- ELEMFLAG for S  <li> k_fe real NOT NULL,         -- empirically calibrated [K/Fe] from ASPCAP  <li> k_fe_err real NOT NULL,     -- external uncertainty for empirically calibrated [K/Fe] from ASPCAP  <li> k_fe_flag int NOT NULL,     -- ELEMFLAG for K  <li> ca_fe real NOT NULL,        -- empirically calibrated [Ca/Fe] from ASPCAP ; [Ca/Fe] is calculated as (ASPCAP [Ca/M])+param_metals  <li> ca_fe_err real NOT NULL,    -- external uncertainty for empirically calibrated [Ca/Fe] from ASPCAP  <li> ca_fe_flag int NOT NULL,    -- ELEMFLAG for Ca  <li> ti_fe real NOT NULL,        -- empirically calibrated [Ti/Fe] from ASPCAP; [Ti/Fe] is calculated as (ASPCAP [Ti/M])+param_metals  <li> ti_fe_err real NOT NULL,    -- external uncertainty for empirically calibrated [Ti/Fe] from ASPCAP  <li> ti_fe_flag int NOT NULL,    -- ELEMFLAG for Ti  <li> tiii_fe real NOT NULL,      -- empirically calibrated [TiII/Fe] from ASPCAP; [TiII/Fe] is calculated as (ASPCAP [TiII/M])+param_metals  <li> tiii_fe_err real NOT NULL,  -- external uncertainty for empirically calibrated [TiII/Fe] from ASPCAP  <li> tiii_fe_flag int NOT NULL,  -- ELEMFLAG for TiII  <li> v_fe real NOT NULL,         -- empirically calibrated [V/Fe] from ASPCAP  <li> v_fe_err real NOT NULL,     -- external uncertainty for empirically calibrated [V/Fe] from ASPCAP  <li> v_fe_flag int NOT NULL,     -- ELEMFLAG for V  <li> cr_fe real NOT NULL,        -- empirically calibrated [Cr/Fe] from ASPCAP  <li> cr_fe_err real NOT NULL,    -- external uncertainty for empirically calibrated [Cr/Fe] from ASPCAP  <li> cr_fe_flag int NOT NULL,    -- ELEMFLAG for Cr  <li> mn_fe real NOT NULL,        -- empirically calibrated [Mn/Fe] from ASPCAP  <li> mn_fe_err real NOT NULL,    -- external uncertainty for empirically calibrated [Mn/Fe] from ASPCAP  <li> mn_fe_flag int NOT NULL,    -- ELEMFLAG for Mn  <li> fe_h real NOT NULL,         -- empirically calibrated [Fe/H] from ASPCAP  <li> fe_h_err real NOT NULL,     -- external uncertainty for empirically calibrated [Fe/H] from ASPCAP  <li> fe_h_flag int NOT NULL,     -- ELEMFLAG for Fe  <li> co_fe real NOT NULL,        -- empirically calibrated [Co/Fe] from ASPCAP  <li> co_fe_err real NOT NULL,    -- external uncertainty for empirically calibrated [Co/Fe] from ASPCAP  <li> co_fe_flag int NOT NULL,    -- ELEMFLAG for Co  <li> ni_fe real NOT NULL,        -- empirically calibrated [Ni/Fe] from ASPCAP  <li> ni_fe_err real NOT NULL,    -- external uncertainty for empirically calibrated [Ni/Fe] from ASPCAP  <li> ni_fe_flag int NOT NULL,    -- ELEMFLAG for Ni  <li> cu_fe real NOT NULL,        -- empirically calibrated [Cu/Fe] from ASPCAP  <li> cu_fe_err real NOT NULL,    -- external uncertainty for empirically calibrated [Cu/Fe] from ASPCAP  <li> cu_fe_flag int NOT NULL,    -- ELEMFLAG for Cu  <br> Sample call to get aspcap element abundances with errors and flags:  <br><samp>  <br>select TOP 10 a.apstar_id, b.*  <br> from aspcapStar a CROSS APPLY dbo.fAspcapElemsAll( a.aspcap_id ) b  </samp>  <br>see also fAspcapElems, fAspcapElemErrs, fAspcapElemFlags ','0');
INSERT DBObjects VALUES('fAspcapElems','F','U',' Returns table of APOGEE aspcap element abundances. ',' This function returns the APOGEE aspcapStar element abundances for a given aspcap_id.  <p>returned table:  <li> c_fe real NOT NULL,           -- empirically calibrated [C/Fe] from ASPCAP; [C/Fe] is calculated as (ASPCAP [C/M])+param_metals  <li> ci_fe real NOT NULL,          -- empirically calibrated [CI/Fe] from ASPCAP; [C/Fe] is calculated as (ASPCAP [C/M])+param_metals  <li> n_fe real NOT NULL,           -- empirically calibrated [N/Fe] from ASPCAP; [N/Fe] is calculated as (ASPCAP [N/M])+param_metals  <li> o_fe real NOT NULL,           -- empirically calibrated [O/Fe] from ASPCAP; [O/Fe] is calculated as (ASPCAP [O/M])+param_metals  <li> na_fe real NOT NULL,          -- empirically calibrated [Na/Fe] from ASPCAP  <li> mg_fe real NOT NULL,          -- empirically calibrated [Mg/Fe] from ASPCAP; [Mg/Fe] is calculated as (ASPCAP [Mg/M])+param_metals  <li> al_fe real NOT NULL,          -- empirically calibrated [Al/Fe] from ASPCAP  <li> si_fe real NOT NULL,          -- empirically calibrated [Si/Fe] from ASPCAP; [Si/Fe] is calculated as (ASPCAP [Si/M])+param_metals  <li> p_fe real NOT NULL,           -- empirically calibrated [P/Fe] from ASPCAP; [P/Fe] is calculated as (ASPCAP [P/M])+param_metals  <li> s_fe real NOT NULL,           -- empirically calibrated [S/Fe] from ASPCAP; [S/Fe] is calculated as (ASPCAP [S/M])+param_metals  <li> k_fe real NOT NULL,           -- empirically calibrated [K/Fe] from ASPCAP  <li> ca_fe real NOT NULL,          -- empirically calibrated [Ca/Fe] from ASPCAP ; [Ca/Fe] is calculated as (ASPCAP [Ca/M])+param_metals  <li> ti_fe real NOT NULL,          -- empirically calibrated [Ti/Fe] from ASPCAP; [Ti/Fe] is calculated as (ASPCAP [Ti/M])+param_metals  <li> tiii_fe real NOT NULL,        -- empirically calibrated [TiII/Fe] from ASPCAP; [TiII/Fe] is calculated as (ASPCAP [TiII/M])+param_metals  <li> v_fe real NOT NULL,           -- empirically calibrated [V/Fe] from ASPCAP  <li> cr_fe real NOT NULL,          -- empirically calibrated [Cr/Fe] from ASPCAP  <li> mn_fe real NOT NULL,          -- empirically calibrated [Mn/Fe] from ASPCAP  <li> fe_h real NOT NULL,           -- empirically calibrated [Fe/H] from ASPCAP  <li> co_fe real NOT NULL,          -- empirically calibrated [Co/Fe] from ASPCAP  <li> ni_fe real NOT NULL,          -- empirically calibrated [Ni/Fe] from ASPCAP  <li> cu_fe real NOT NULL,          -- empirically calibrated [Cu/Fe] from ASPCAP  <br> Sample call to get aspcap element abundances:  <br><samp>  <br>select TOP 10 a.apstar_id, b.*  <br> from aspcapStar a CROSS APPLY dbo.fAspcapElems( a.aspcap_id ) b  </samp>  <br>see also fAspcapElemsAll, fAspcapElemErrs, fAspcapElemFlags ','0');
INSERT DBObjects VALUES('fAspcapElemErrs','F','U',' Returns table of APOGEE aspcap element abundance errors. ',' This function returns the errors associated with APOGEE aspcapStar element abundances for a given aspcap_id.  <p>returned table:  <li> c_fe_err real NOT NULL,       -- external uncertainty for empirically calibrated [C/Fe] from ASPCAP  <li> ci_fe_err real NOT NULL,      -- external uncertainty for empirically calibrated [CI/Fe] from ASPCAP  <li> n_fe_err real NOT NULL,       -- external uncertainty for empirically calibrated [N/Fe] from ASPCAP  <li> o_fe_err real NOT NULL,       -- external uncertainty for empirically calibrated [O/Fe] from ASPCAP  <li> na_fe_err real NOT NULL,      -- external uncertainty for empirically calibrated [Na/Fe] from ASPCAP  <li> mg_fe_err real NOT NULL,      -- external uncertainty for empirically calibrated [Mg/Fe] from ASPCAP  <li> al_fe_err real NOT NULL,      -- external uncertainty for empirically calibrated [Al/Fe] from ASPCAP  <li> si_fe_err real NOT NULL,      -- external uncertainty for empirically calibrated [Si/Fe] from ASPCAP  <li> p_fe_err real NOT NULL,       -- external uncertainty for empirically calibrated [P/Fe] from ASPCAP  <li> s_fe_err real NOT NULL,       -- external uncertainty for empirically calibrated [S/Fe] from ASPCAP  <li> k_fe_err real NOT NULL,       -- external uncertainty for empirically calibrated [K/Fe] from ASPCAP  <li> ca_fe_err real NOT NULL,      -- external uncertainty for empirically calibrated [Ca/Fe] from ASPCAP  <li> ti_fe_err real NOT NULL,      -- external uncertainty for empirically calibrated [Ti/Fe] from ASPCAP  <li> tiii_fe_err real NOT NULL,    -- external uncertainty for empirically calibrated [TiII/Fe] from ASPCAP  <li> v_fe_err real NOT NULL,       -- external uncertainty for empirically calibrated [V/Fe] from ASPCAP  <li> cr_fe_err real NOT NULL,      -- external uncertainty for empirically calibrated [Cr/Fe] from ASPCAP  <li> mn_fe_err real NOT NULL,      -- external uncertainty for empirically calibrated [Mn/Fe] from ASPCAP  <li> fe_h_err real NOT NULL,       -- external uncertainty for empirically calibrated [Fe/H] from ASPCAP  <li> co_fe_err real NOT NULL,      -- external uncertainty for empirically calibrated [Co/Fe] from ASPCAP  <li> ni_fe_err real NOT NULL,      -- external uncertainty for empirically calibrated [Ni/Fe] from ASPCAP  <li> cu_fe_err real NOT NULL,      -- external uncertainty for empirically calibrated [Cu/Fe] from ASPCAP  <li> ce_fe_err real NOT NULL,      -- external uncertainty for empirically calibrated [Ce/Fe] from ASPCAP  <br> Sample call to get aspcap element abundance errors:  <br><samp>  <br>select TOP 10 a.apstar_id, b.*  <br> from aspcapStar a CROSS APPLY dbo.fAspcapElemErrs( a.aspcap_id ) b  </samp>  <br>see also fAspcapElemsAll, fAspcapElems, fAspcapElemFlags ','0');
INSERT DBObjects VALUES('fAspcapElemFlags','F','U',' Returns table of APOGEE aspcap element abundance flags. ',' This function returns the flags associated with APOGEE aspcapStar element abundances for a given aspcap_id.  <p>returned table:  <li> c_fe_flag int NOT NULL,       -- ELEMFLAG for C (see http://www.sdss.org/dr12/algorithms/bitmasks/#APOGEE_ELEMFLAG)  <li> ci_fe_flag int NOT NULL,      -- ELEMFLAG for CI  <li> n_fe_flag int NOT NULL,       -- ELEMFLAG for N  <li> o_fe_flag int NOT NULL,       -- ELEMFLAG for O  <li> na_fe_flag int NOT NULL,      -- ELEMFLAG for Na  <li> mg_fe_flag int NOT NULL,      -- ELEMFLAG for Mg  <li> al_fe_flag int NOT NULL,      -- ELEMFLAG for Al  <li> si_fe_flag int NOT NULL,      -- ELEMFLAG for Si  <li> p_fe_flag int NOT NULL,       -- ELEMFLAG for Si  <li> s_fe_flag int NOT NULL,       -- ELEMFLAG for S  <li> k_fe_flag int NOT NULL,       -- ELEMFLAG for K  <li> ca_fe_flag int NOT NULL,      -- ELEMFLAG for Ca  <li> ti_fe_flag int NOT NULL,      -- ELEMFLAG for Ti  <li> tiii_fe_flag int NOT NULL,    -- ELEMFLAG for TiII  <li> v_fe_flag int NOT NULL,       -- ELEMFLAG for V  <li> cr_fe_flag int NOT NULL,      -- ELEMFLAG for Cr  <li> mn_fe_flag int NOT NULL,      -- ELEMFLAG for Mn  <li> fe_h_flag int NOT NULL,       -- ELEMFLAG for Fe  <li> co_fe_flag int NOT NULL,      -- ELEMFLAG for Co  <li> ni_fe_flag int NOT NULL,      -- ELEMFLAG for Ni  <li> cu_fe_flag int NOT NULL,      -- ELEMFLAG for Cu  <br> Sample call to get aspcap element abundance flags:  <br><samp>  <br>select TOP 10 a.apstar_id, b.*  <br> from aspcapStar a CROSS APPLY dbo.fAspcapElemFlags( a.aspcap_id ) b  </samp>  <br>see also fAspcapElems, fAspcapElemErrs, fAspcapElemsAll ','0');
INSERT DBObjects VALUES('fAspcapFelemsAll','F','U',' Returns table of uncalibrated APOGEE aspcap abundance ratios along with their errors. ',' This function returns the APOGEE aspcapStar uncalibrated abundance ratios as determined  by the ASPCAP [FERRE] pipeline (abundance windows employed), along with their errors   for a given aspcap_id.  <p>returned table:  <li> felem_c_m real NOT NULL,              -- original fit [C/M]  <li> felem_c_m_err real NOT NULL,          -- original fit uncertainty [C/M]  <li> felem_ci_m real NOT NULL,             -- original fit [CI/M]  <li> felem_ci_m_err real NOT NULL,         -- original fit uncertainty [CI/M]  <li> felem_n_m real NOT NULL,              -- original fit [N/M]  <li> felem_n_m_err real NOT NULL,          -- original fit uncertainty [N/M]  <li> felem_o_m real NOT NULL,              -- original fit [O/M]  <li> felem_o_m_err real NOT NULL,          -- original fit uncertainty [O/M]  <li> felem_na_h real NOT NULL,             -- original fit [Na/H]  <li> felem_na_h_err real NOT NULL,         -- original fit uncertainty [Na/H]  <li> felem_mg_m real NOT NULL,             -- original fit [Mg/M]  <li> felem_mg_m_err real NOT NULL,         -- original fit uncertainty [Mg/M]  <li> felem_al_h real NOT NULL,             -- original fit [Al/H]  <li> felem_al_h_err real NOT NULL,         -- original fit uncertainty [Al/H]  <li> felem_si_m real NOT NULL,             -- original fit [Si/M]  <li> felem_si_m_err real NOT NULL,         -- original fit uncertainty [Si/M]  <li> felem_p_m real NOT NULL,              -- original fit [P/M]  <li> felem_p_m_err real NOT NULL,          -- original fit uncertainty [P/M]  <li> felem_s_m real NOT NULL,              -- original fit [S/M]  <li> felem_s_m_err real NOT NULL,          -- original fit uncertainty [S/M]  <li> felem_k_h real NOT NULL,              -- original fit [K/H]  <li> felem_k_h_err real NOT NULL,          -- original fit uncertainty [K/H]  <li> felem_ca_m real NOT NULL,             -- original fit [Ca/M]  <li> felem_ca_m_err real NOT NULL,         -- original fit uncertainty [Ca/M]  <li> felem_ti_m real NOT NULL,             -- original fit [Ti/M]  <li> felem_ti_m_err real NOT NULL,         -- original fit uncertainty [Ti/M]  <li> felem_tiii_m real NOT NULL,           -- original fit [TiII/M]  <li> felem_tiii_m_err real NOT NULL,       -- original fit uncertainty [TiII/M]  <li> felem_v_h real NOT NULL,              -- original fit [V/H]  <li> felem_v_h_err real NOT NULL,          -- original fit uncertainty [V/H]  <li> felem_cr_h real NOT NULL,             -- original fit [Cr/H]  <li> felem_cr_h_err real NOT NULL,         -- original fit uncertainty [Cr/H]  <li> felem_mn_h real NOT NULL,             -- original fit [Mn/H]  <li> felem_mn_h_err real NOT NULL,         -- original fit uncertainty [Mn/H]  <li> felem_fe_h real NOT NULL,             -- original fit [Fe/H]  <li> felem_fe_h_err real NOT NULL,         -- original fit uncertainty [Fe/H]  <li> felem_co_h real NOT NULL,             -- original fit [Co/H]  <li> felem_co_h_err real NOT NULL,         -- original fit uncertainty [Co/H]  <li> felem_ni_h real NOT NULL,             -- original fit [Ni/H]  <li> felem_ni_h_err real NOT NULL,         -- original fit uncertainty [Ni/H]  <li> felem_cu_h real NOT NULL,             -- original fit [Cu/H]  <li> felem_cu_h_err real NOT NULL,         -- original fit uncertainty [Cu/H]  <li> felem_ge_h real NOT NULL,             -- original fit [Ge/H]  <li> felem_ge_h_err real NOT NULL,         -- original fit uncertainty [Ge/H]  <li> felem_rb_h real NOT NULL,             -- original fit [Rb/H]  <li> felem_rb_h_err real NOT NULL,         -- original fit uncertainty [Rb/H]  <li> felem_yb_h real NOT NULL,             -- original fit [Yb/H]  <li> felem_yb_h_err real NOT NULL,         -- original fit uncertainty [Yb/H]  <li> felem_nd_h real NOT NULL,             -- original fit [Nd/H]  <li> felem_nd_h_err real NOT NULL          -- original fit uncertainty [Nd/H]  <br> Sample call to get aspcap element abundances:  <br><samp>  <br>select TOP 10 a.apstar_id, b.*  <br> from aspcapStar a CROSS APPLY dbo.fAspcapFelemsAll( a.aspcap_id ) b  </samp>  <br>see also fAspcapFelems, fAspcapFelemErrs ','0');
INSERT DBObjects VALUES('fAspcapFelems','F','U',' Returns table of uncalibrated APOGEE aspcap abundance ratios. ',' This function returns the APOGEE aspcapStar uncalibrated abundance ratios as determined  by the ASPCAP [FERRE] pipeline (abundance windows employed).   <p>returned table:  <li> felem_c_m real NOT NULL,      -- original fit [C/M]  <li> felem_ci_m real NOT NULL,     -- original fit [CI/M]  <li> felem_n_m real NOT NULL,      -- original fit [N/M]  <li> felem_o_m real NOT NULL,      -- original fit [O/M]  <li> felem_na_h real NOT NULL,     -- original fit [Na/H]  <li> felem_mg_m real NOT NULL,     -- original fit [Mg/M]  <li> felem_al_h real NOT NULL,     -- original fit [Al/H]  <li> felem_si_m real NOT NULL,     -- original fit [Si/M]  <li> felem_p_m real NOT NULL,      -- original fit [P/M]  <li> felem_s_m real NOT NULL,      -- original fit [S/M]  <li> felem_k_h real NOT NULL,      -- original fit [K/H]  <li> felem_ca_m real NOT NULL,     -- original fit [Ca/M]  <li> felem_ti_m real NOT NULL,     -- original fit [Ti/M]  <li> felem_tiii_m real NOT NULL,   -- original fit [TiII/M]  <li> felem_v_h real NOT NULL,      -- original fit [V/H]  <li> felem_cr_h real NOT NULL,     -- original fit [Cr/H]  <li> felem_mn_h real NOT NULL,     -- original fit [Mn/H]  <li> felem_fe_h real NOT NULL,     -- original fit [Fe/H]  <li> felem_co_h real NOT NULL,     -- original fit [Co/H]  <li> felem_ni_h real NOT NULL,     -- original fit [Ni/H]  <li> felem_cu_h real NOT NULL,     -- original fit [Cu/H]  <li> felem_ge_h real NOT NULL,     -- original fit [Ge/H]  <li> felem_rb_h real NOT NULL,     -- original fit [Rb/H]  <li> felem_yb_h real NOT NULL,     -- original fit [Yb/H]  <li> felem_nd_h real NOT NULL,     -- original fit [Nd/H]  <br> Sample call to get aspcap element abundances:  <br><samp>  <br>select TOP 10 a.apstar_id, b.*  <br> from aspcapStar a CROSS APPLY dbo.fAspcapFelems( a.aspcap_id ) b  </samp>  <br>see also fAspcapFelemsAll, fAspcapFelemErrs ','0');
INSERT DBObjects VALUES('fAspcapFelemErrs','F','U',' Returns table of errors associated with uncalibrated APOGEE aspcap abundance ratios. ',' This function returns the errors associated with APOGEE aspcapStar uncalibrated   abundance ratios as determined by the ASPCAP [FERRE] pipeline (abundance windows   employed).  <p>returned table:  <li> felem_c_m_err real NOT NULL,          -- original fit uncertainty [C/M]  <li> felem_ci_m_err real NOT NULL,         -- original fit uncertainty [CI/M]  <li> felem_n_m_err real NOT NULL,          -- original fit uncertainty [N/M]  <li> felem_o_m_err real NOT NULL,          -- original fit uncertainty [O/M]  <li> felem_na_h_err real NOT NULL,         -- original fit uncertainty [Na/H]  <li> felem_mg_m_err real NOT NULL,         -- original fit uncertainty [Mg/M]  <li> felem_al_h_err real NOT NULL,         -- original fit uncertainty [Al/H]  <li> felem_si_m_err real NOT NULL,         -- original fit uncertainty [Si/M]  <li> felem_p_m_err real NOT NULL,          -- original fit uncertainty [P/M]  <li> felem_s_m_err real NOT NULL,          -- original fit uncertainty [S/M]  <li> felem_k_h_err real NOT NULL,          -- original fit uncertainty [K/H]  <li> felem_ca_m_err real NOT NULL,         -- original fit uncertainty [Ca/M]  <li> felem_ti_m_err real NOT NULL,         -- original fit uncertainty [Ti/M]  <li> felem_tiii_m_err real NOT NULL,       -- original fit uncertainty [TiII/M]  <li> felem_v_h_err real NOT NULL,          -- original fit uncertainty [V/H]  <li> felem_cr_h_err real NOT NULL,         -- original fit uncertainty [Cr/H]  <li> felem_mn_h_err real NOT NULL,         -- original fit uncertainty [Mn/H]  <li> felem_fe_h_err real NOT NULL,         -- original fit uncertainty [Fe/H]  <li> felem_co_h_err real NOT NULL,         -- original fit uncertainty [Co/H]  <li> felem_ni_h_err real NOT NULL,         -- original fit uncertainty [Ni/H]  <li> felem_cu_h_err real NOT NULL,         -- original fit uncertainty [Cu/H]  <li> felem_ge_h_err real NOT NULL,         -- original fit uncertainty [Ge/H]  <li> felem_rb_h_err real NOT NULL,         -- original fit uncertainty [Rb/H]  <li> felem_yb_h_err real NOT NULL,         -- original fit uncertainty [Yb/H]  <li> felem_nd_h_err real NOT NULL          -- original fit uncertainty [Nd/H]  <br> Sample call to get aspcap element abundances:  <br><samp>  <br>select TOP 10 a.apstar_id, b.*  <br> from aspcapStar a CROSS APPLY dbo.fAspcapFelemErrs( a.aspcap_id ) b  </samp>  <br>see also fAspcapFelemsAll, fAspcapFelems ','0');
INSERT DBObjects VALUES('spTransposeRmatrix','P','A',' Transposes and stores a rotation matrix ','    ','0');
INSERT DBObjects VALUES('spBuildRmatrix','P','A',' Builds the rotation matrices necessary to operate ','    ','0');
INSERT DBObjects VALUES('fRotateV3','F','U',' Rotates a 3-vector by a given rotation matrix ','    ','0');
INSERT DBObjects VALUES('fGetLonLat','F','U',' Converts a 3-vector to longitude-latitude (Galactic or Survey) ',' @mode can be one of the following:  <li> J2S for Survey coordinates  <li> J2G for Galactic coordinates  <br> This is an internal table-valued function that requires a cursor  or variables to specify the coordinates.  Use the scalar functions  fGetLon and fGetLat instead in queries.  ','0');
INSERT DBObjects VALUES('fGetLon','F','U',' Converts a 3-vector to longitude (Galactic or Survey) ',' @mode can be one of the following:  <li> J2S for Survey coordinates,  <li> J2G for Galactic coordinates, e.g.,  <dd> select top 10 dbo.fGetLon(''J2S'',cx,cy,cz) from PhotoTag  <br> Use fGetLat to get latitude. ','0');
INSERT DBObjects VALUES('fGetLat','F','U',' Converts a 3-vector to latitude (Galactic or Survey) ',' @mode can be one of the following:  <li> J2S for Survey coordinates,  <li> J2G for Galactic coordinates, e.g.,  <dd> select top 10 dbo.fGetLat(''J2G'',cx,cy,cz) from PhotoTag  <br>Use fGetLon to get longitude. ','0');
INSERT DBObjects VALUES('fEqFromMuNu','F','U',' Compute Equatorial coordinates from @mu and @nu ',' Compute both ra,dec anmd cx,cy,cz, given @mu,@nu, @node,@incl  all in degrees ','0');
INSERT DBObjects VALUES('fMuNuFromEq','F','U',' Compute stripe coordinates from Equatorial ',' Compute mu, nu from @ra,@dec, @node,@incl ','0');
INSERT DBObjects VALUES('fMuFromEq','F','U',' Returns mu from ra,dec ','','0');
INSERT DBObjects VALUES('fNuFromEq','F','U',' Returns nu from ra,dec ','','0');
INSERT DBObjects VALUES('fCoordsFromEq','F','U',' Returns table of stripe, lambda, eta, mu, nu derived from ra,dec ','','0');
INSERT DBObjects VALUES('fEtaFromEq','F','U',' Returns eta from ra,dec ','','0');
INSERT DBObjects VALUES('fLambdaFromEq','F','U',' Returns lambda from ra,dec ','','0');
INSERT DBObjects VALUES('fEtaToNormal','F','U',' Compute the normal vector from an eta value ','    ','0');
INSERT DBObjects VALUES('fStripeToNormal','F','U',' Compute the normal vector from an eta value ','    ','0');
INSERT DBObjects VALUES('fWedgeV3','F','U',' Compute the wedge product of two vectors ','    ','0');
INSERT DBObjects VALUES('fTokenNext','F','U',' Get token starting at offset @i in string @s ',' Return empty string '''' if none found  <br><samp>  <br>select dbo.fTokenNext(''REGION CONVEX 3 5 7 '',15 )   <br> returns                    ''3''  </samp>  <br> see also fTokenAdvance()   ','0');
INSERT DBObjects VALUES('fTokenAdvance','F','U',' Get offset of next token after offset @i in string @s ',' Return 0 if none found.  <br><samp>  <br>select dbo.fTokenNext(''REGION CONVEX 3 5 7 '',15 )   <br> returns                    ''3''  </samp>  <br> see also fTokenNext()   ','0');
INSERT DBObjects VALUES('fTokenStringToTable','F','U',' Returns a table containing the tokens in the input string ',' Tokens are blank separated.  <samp>select * from dbo.fTokenStringToTable(''A B C D E F G H J'')   <br> returns                    a table containing those tokens  </samp>   ','0');
INSERT DBObjects VALUES('fNormalizeString','F','U',' Returns string upshifted, squeezed blanks, trailing zeros   removed, and blank added on end ',' <br>select dbo.fNormalizeString(''Region Convex   3.0000   5  7'')   <br> returns                    ''REGION CONVEX 3.0 5 7 ''  </samp>   ','0');
INSERT DBObjects VALUES('fRegionFuzz','F','U',' Returns a displacement that expands a circle by the ''buffer'' ',' Buffer is the expansion in arc minutes  Result is range limited to [-1 .. 1]  <br>  The following exampe adds 1 minute fuzz to the hemisphere.  <samp>select dbo.fRegionFuzz(0,1)         </samp>   ','0');
INSERT DBObjects VALUES('fRegionOverlapId','F','U',' Returns the overlap of a given region overlapping another one ',' The parameters  <li>@regionid is the region we want to intersect with  <li>@otherid is the region of interest   <li>@buffer is the amount the regionString is grown in arcmins.</li>  <br>Returns a blob with the overlap region,  <br>NULL if there are no intersections,  <br>NULL if input params are bad.  <samp>  SELECT * from fRegionOverlapId(1049,6078,0.0)  </samp> ','0');
INSERT DBObjects VALUES('spRegionDelete','P','A',' Delete a region and all its convexes and constraints ',' Parameters:  <li> regionID bigint     	ID of the region to be deleted  <br>Sample call to delete a region   <br><samp>   <br> exec spRegionDelete @regionID    </samp>  <br> see also spRegionNew, spRegionDelete,...   ','0');
INSERT DBObjects VALUES('spRegionNew','P','A',' Create a new region, return value is regionID  ',' <br>Parameters:  <li> id      bigint        key of object in its source table (e.g. TileID)  <li> type    varchar(16)   short description of the region (e.g. stripe)  <li> comment varchar(8000) longer description of the region   <li> isMask  int           flag says region is negative (a mask)  <br> returns regionID int  the unique ID of the region.  <br>Sample call get a new region   <br><samp>   <br> exec @regionID = spRegionNew 12345, ''STRIPE'', ''Stripe 12345'', 0    </samp>  <br> see also fRegionPredicate, spRegionDelete,...   ','0');
INSERT DBObjects VALUES('spRegionAnd','P','U',' Create a new region containing intersection (AND) of regions d1 and d2. ',' The new region will contain copies of the intersections of each pair of   convexes in the two original regions.  <br>Parameters:  <li> id bigint        key of object in its source table (e.g. TileID)  <li> d1 bigint        ID of the first region.  <li> d2 bigint        ID of the second region.  <li> type varchar(16)     	short description of the region (e.g. stripe)  <li> comment varchar(8000) longer description of the region    <br> returns regionID int  the unique ID of the new region.  <br>Sample call get intersection of two  regions   <br><samp>   <br> exec @regionID = spRegionAnd @d1, @d2, ''stripe'', ''run 1 2 3''    </samp>  <br> see also spRegionNew, spRegionOr, spRegionNot, spRegionDelete,...   ','0');
INSERT DBObjects VALUES('spRegionIntersect','P','A',' Intersect a base region with a second region   ',' The surviving region contains the intersections of each pair of   convexes in the two regions. The base region is overwritten.  <br>Parameters  <li> @baseID bigint:   regionID of the region to be masked  <li> @interID bigint:  regionID of the masking region.  <br> returns count of convexes in the resulting @baseID  <br>Sample call get intersection of two  regions   <br><samp>   <br> exec @convexes = spRegionIntersect @Tile, @Mask    </samp>  <br> see also spRegionNew, spRegionOr, spRegionNot, spRegionDelete,...   ','0');
INSERT DBObjects VALUES('spRegionSubtract','P','A','  Subtract the areas of one region from a second region, and update first ',' <p> parameters:     <li> @baseID bigint: region to subtract from   <li> @subID bigint:  region to remove from base  <li> returns number of convexes in region.   <br>  Sample call:<br>  <samp>   <br> exec @convexes = spRegionSubtract @RegionID, @maskID  </samp>   <br>   ','0');
INSERT DBObjects VALUES('spRegionCopy','P','A',' Create a new region containing the convexes of region  @regionID    ',' The new region contains a copy of the convexes of the original regions   <br>Parameters:  <li> id  bigint        	key of object in its source table (e.g. TileID)  <li> regionID bigint     	regionID of the  region.  <li> type varchar(16)      short description of the region (e.g. stripe)  <li> comment varchar(8000) longer description of the region    <br> returns regionID int  the unique ID of the new region.  <br>Sample copy of a region regions   <br><samp>   <br> exec @newregionID = spRegionCopy @newID, @oldregionID,  ''stripe'', ''run 1 2 3''     </samp>  <br> see also spRegionNew, spRegionAnd, spRegionNot, spRegionDelete,...   ','0');
INSERT DBObjects VALUES('spRegionSync','P','A',' Will synchronize RegionPatch with the Regions of a certain type ',' Inserts the patches from the regionBinary ','0');
INSERT DBObjects VALUES('fRegionContainsPointXYZ','F','U',' Returns 1 if specified region contains specifed x,y,z   point, else returns zero. ',' There is no limit on the number of objects returned, but   there are about 40 per sq arcmin.    <p> parameters   <li> regionid bigint,     -- Region object identifier  <li> cx float NOT NULL,   -- x,y,z of unit vector to this object  <li> cy float NOT NULL,  <li> cz float NOT NULL,  <br>  Sample call to find if regionID 345 contains the North Pole<br>  <samp>   <br> select dbo.fRegionContainsPointXYZ(7,0,0,1)    </samp>   <br> see also fRegionContainsPointEq   ','0');
INSERT DBObjects VALUES('fRegionContainsPointEq','F','U',' Returns 1 if specified region contains specified ra,dec   point, else returns zero. ',' There is no limit on the number of objects returned,   but there are about 40 per sq arcmin.    <p>  parameters   <li> regionid bigint 	 -- Region object identifier  <li> ra float NOT NULL,     -- Right ascension, --/U degrees  <li> dec float NOT NULL,     -- Declination,     --/U degrees  <br>  Sample call to find if regionID 345 contains the North Pole<br>  <samp>   <br> select dbo.fRegionContainsPointEq(7,0,90)    </samp>   <br> see also fRegionContainsPointXYZ ','0');
INSERT DBObjects VALUES('fRegionGetObjectsFromRegionId','F','U',' Returns various objects within a region given by a regionid ',' <p> returns a table of two columns  <br> objID bigint          -- Object ID from PhotoObjALl,    <br> flag int		-- the flag of the object type<br>  (@flag&1)>0 display specObj<br>  (@flag&2)>0 display photoPrimary<br>  (@flag&4)>0 display Target <br>  (@flag&8)>0 display Mask<br>  (@flag&32)>0 display photoPrimary and secondary<br>  thus: @flag=7 will display all three of specObj, PhotoObj and Target  the returned objects have            flag = (specobj:1, photoobj:2, target:4, mask:8)  <br>Sample call to find all objects in region 75<br>  <samp>   select * from dbo.fRegionGetObjectsFromRegionID(75,15)    </samp>  ','0');
INSERT DBObjects VALUES('fRegionGetObjectsFromString','F','U',' Returns various objects within a region given by a string ',' The parameter @buffer, given in arcmins, corresponds  to an expansion the search region beyond of each   boundary by that amount.  (@flag&1)>0 display specObj ...<br>  (@flag&2)>0 display photoPrimary...<br>  (@flag&4)>0 display Target <br>  (@flag&8)>0 display Mask<br>  (@flag&32)>0 display photoPrimary and secondary<br>  thus: @flag=7 will display all three of specObj, PhotoObj and Target  the returned objects have            flag = (specobj:1, photoobj:2, target:4, mask:8) ','0');
INSERT DBObjects VALUES('fRegionsContainingPointXYZ','F','U',' Returns regions containing a given point  ',' The parameters  <li>@x, @y, @z are unit vector of the point on the J2000 celestial sphere. </li>  <li>@types is a varchar(1000) space-separated string of the desired region types.  <br> Possible types are: SEGMENT STRIPE TIGEOM PLATE CAMCOL RUN STAVE CHUNK TILE TILEBOX SECTOR SECTORLET SKYBOX WEDGE.</li>  <li>@buffer is the ''fuzz'' in arcmins around that poiont.</li>  <br>Returns a table with the coulums  <br>Returns empty table if input params are bad.  <br>RegionID BIGINT NOT NULL PRIMARY KEY  <br>Type     VARCHAR(16) NOT NULL  <samp>  SELECT * from fGetRegionsContainingPointXYZ(0,0,0,''STAVE'',0)  </samp> ','0');
INSERT DBObjects VALUES('fRegionsContainingPointEq','F','U',' Returns regions containing a given point  ',' The parameters  <li>@ra, @dec the equatorial coordinats on the J2000 celestial sphere. </li>  <li>@types is a varchar(1000) space-separated string of the desired region types.  <br> Possible types are: SEGMENT STRIPE TIGEOM PLATE CAMCOL RUN STAVE CHUNK TILE TILEBOX SECTOR SECTORLET SKYBOX WEDGE.</li>  <li>@buffer is the ''fuzz'' in arcmins around that poiont.</li>  <br>Returns a table with the columns  <br>Returns empty table if input params are bad.  <br>regionid bigint NOT NULL PRIMARY KEY  <br>type     varchar(16) NOT NULL  <samp>  SELECT * from dbo.fGetRegionsContainingPointEq(195,2.5,''STAVE'',0)  </samp> ','0');
INSERT DBObjects VALUES('fPolygonsContainingPointXYZ','F','U',' Returns regions containing a given point  ',' The parameters  <li>@x, @y, @z are unit vector of the point on the J2000 celestial sphere. </li>  <li>@buffer_arcmin </li>  <br>Returns empty table if input params are bad.  <br>Returns a table with the columns  <br>RegionID BIGINT NOT NULL PRIMARY KEY  <samp>  SELECT * from fPolygonsContainingPointXYZ(1,0,0)  </samp> ','0');
INSERT DBObjects VALUES('fPolygonsContainingPointEq','F','U',' Returns regions containing a given point  ',' The parameters  <li>@ra, @dec are the J2000 coordinates of the point. </li>  <br>Returns empty table if input params are bad.  <br>Returns a table with the columns  <br>RegionID BIGINT NOT NULL PRIMARY KEY  <samp>  SELECT * from fPolygonsContainingPointEq(180,-2,0)  </samp> ','0');
INSERT DBObjects VALUES('fFootprintEq','F','U',' Determines whether a point is inside the survey footprint ',' Returns regiontype POLYGON if inside (to be backward compatible with earlier releases)  that contain the given point. Empty indicates that the point  is entirely outside the survey footprint. ','0');
INSERT DBObjects VALUES('fRegionsIntersectingBinary','F','U',' Search for regions intersecting a given region,  specified by a regionBinary. ',' Regions are found within the RegionPatch table using the HTM   index. If @rBinary is present, @rString is ignored.  Returns the regionid and the type.  <samp>  select * from dbo.fRegionsIntersectingBinary(''STRIPE, STAVE, TILE'', @bin)  </samp> ','0');
INSERT DBObjects VALUES('fRegionsIntersectingString','F','U',' Search for regions intersecting a given region,  specified by a regionString. ',' Regions are found within the RegionPatch table using the HTM   index. If @rBinary is present, @rString is ignored.  Returns the regionid and the type.  <samp>  select * from dbo.fRegionsIntersectingString(''STRIPE, STAVE, TILE'', @str)  </samp> ','0');
INSERT DBObjects VALUES('fInFootprintEq','F','U',' Indicates whether the given point is in the SDSS footprint or not. ','  Returns ''true'' or ''false'' depending on whether the given circle  (ra,dec,radius) is in the SDSS footprint or not.  The radius is in  arcmin.   <samp>      SELECT dbo.fInFootprintEq( 143.15, -0.7, 2.0 )  </samp>  <br> See also fFootprintEq. ','0');
INSERT DBObjects VALUES('spMakeDiagnostics','P','A',' Creates a full diagnostic view of the database ',' The stored procedure checks in all tables, views, functions  and stored procedures into the Diagnostics table,  and counts the number of rows in each table and view.  <PRE> EXEC spMakeDiagnostics </PRE> ','0');
INSERT DBObjects VALUES('spUpdateSkyServerCrossCheck','P','A',' Update the contents of the SiteDiagnostics table ',' This procedure copies the Diagnostics into the  SiteDiagnostics table, then it update the value of  the DB checksum and timestamp.  It is used to cross-check the patches applied to the database  <PRE>EXEC spUpdateSkyServerCrossCheck</PRE> ','0');
INSERT DBObjects VALUES('spCompareChecksum','P','A',' Compares the checksum in Diagnostics to the one in SiteDiagnostics ',' Run this procedure to verify that no changes occured in the  database since the last regular update.  <PRE> spCompareChecksum</PRE> ','0');
INSERT DBObjects VALUES('fGetDiagChecksum','F','A',' Computes the checksum from the Diagnostics table ',' The checksum should be equal to the checksum value in the  SiteConstants table.  <PRE> SELECT dbo.fGetDiagChecksum() </PRE>  ','0');
INSERT DBObjects VALUES('spUpdateStatistics','P','A',' Update the statistics on user tables ',' Update the statistics on the user tables  no parameters  <samp>  exec spUpdateStatistics </samp> ','0');
INSERT DBObjects VALUES('spCheckDBColumns','P','A',' Check for a mismatch between the db columns and documentation ',' Comapres the columns of tables in syscolumns to  the list stored in DBColumns. Returns the number  of mismatches. It has no parameters.  <samp>  exec spCheckDBColumns</samp> ','0');
INSERT DBObjects VALUES('spCheckDBObjects','P','A',' Check for a mismatch between the db objects and documentation ',' Comapres the all the objects in sysobjects to  the list stored in DBObjects. Returns the number  of mismatches. It has no parameters.  <samp>  exec spCheckDBObjects</samp> ','0');
INSERT DBObjects VALUES('spGrantAccess','P','A','  spGrantAccess grants access to DB objects ',' Grants select/execute authority to all user db objects  and to the HTM routines in master  If ''Admin'' is specified, grants the user access to ALL objects.   <p> parameters:     <li> access char(1),   		-- U: grant access to dbObjects.access = ''U'' objects <br> 					-- A: grant access to all dbObjects  <li> user 	varchar(256),   	-- UserID to grant  <br>  Sample call:<br>  <samp>   <br> exec  spGrantAccess ''U'', ''Test''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spCheckDBIndexes','P','A',' Checks all the mismatches ion indexes between the schema and the DB ',' ','0');
INSERT DBObjects VALUES('spCheckObjects','P','U','','','0');
INSERT DBObjects VALUES('spTestTimeStart','P','A',' Starts the wall, cpu, and IO clocks for performance testing  ','  parameters are: 	  <li> clock (output):		current 64bit wallclock datetime       <li> cpu (output):		 bigint of cpu milliseconds (wraps frequently so gives bogus answers)       <li> physical_Io (output): bigint count of disk reads and writes   <br>   Here is an example that uses spTestTimeStart and spTestTimeEnd to record the cost of    some SQL statements. The example both records the results in the QueryResults table   and also prints out a message summarizing the test (that is what the 1,1 flags are for.)   <samp>   <br>declare @clock datetime, @cpu bigint, @physical_io bigint,  @elapsed bigint;   <br>exec spTestTimeStart  @clock OUTPUT, @cpu OUTPUT, @physical_io OUTPUT   <br>  .... do some SQL work....   <br>exec spTestTimeEnd @clock, @elapsed, @cpu, @physical_io,    <br>                           ''Q10'', ''1GB buffer pool, read committed'', 1, 1, @@RowCount_big   </samp><p>   see also spTestTimeEnd ','0');
INSERT DBObjects VALUES('spTestTimeEnd','P','A',' Stops the clock for performance testing and optionally records stats in QueryResults and in sysOut.  ','  <p>parameters are (inputs should be set with spTestTimeStart as shown in example):        <li> clock datetime (input)       : current 64bit wallclock datetime        <li> elapsed float (output)       : elapsed milliseconds of wall clock time          <li> cpu fkiat (input, output)    : an int of milliseconds of cpu time (wraps frequently so gives bogus answers)        <li> physical_Io bigint (input, output): count of disk reads and writes        <li> query varchar(10) (input)    : short text string describing the query        <li> commment varchar(100) (input) : longer text string describing the experiment        <li> print (input)       	      : flag, if true prints the output statistics on the console (default =no)        <li> table (input)                 : flag, if true inserts the statistics in the QueryResults table (default = no)        <li> row_Count(input)              : passed in RowCount_big for statistics   Here is an example that uses spTestTimeStart and spTestTimeEnd to record the cost of    some SQL statements. The example both records the results in the QueryResults table   and also prints out a message summarizing the test (that is what the 1,1 flags are for.)   <samp>   <br>declare @clock datetime, @cpu bigint, @physical_io bigint,  @elapsed bigint;   <br>exec spTestTimeStart  @clock OUTPUT, @cpu OUTPUT, @physical_io OUTPUT   <br>  .... do some SQL work....   <br>exec spTestTimeEnd @clock, @elapsed, @cpu, @physical_io,    <br>                          ''Q10'', ''1GB buffer pool, read committed'', 1, 1, @@RowCount_big   </samp><p>   see also spTestTimeStart ','0');
INSERT DBObjects VALUES('spTestQueries','P','A',' Runs the standard 37 SDSS queries and records their performance in QueryResults.  ','  parameters are: 	  <li> @n					The number of times to repeat the query run.    <br>   <samp>   run the queries ten times:   <br>exec spTestQueries 10   </samp><p> ','0');
INSERT DBObjects VALUES('fVarBinToHex','F','U',' Returns hexadecimal string of varbinary input ',' The input is scanned converting nibbles to hex characters  <br>   <sample>            select dbo.fVarBinToHex(0x4532ae1245)  </sample>  ','0');
INSERT DBObjects VALUES('fEnum','F','U',' Converts @value in an enum table to a string ',' Takes a binary(8) value, and converts it first  to a type of given length, then to a string.  It is used by the spDocEnum procedure. ','0');
INSERT DBObjects VALUES('fDocColumns','F','U',' Return the list of Columns in a given table or view ',' Used by the auto-doc interface.  For getting   the ''rank'' column in the DBColumns table,   see fDocColumnsWithRank.  <samp>  select * from dbo.fDocColumns(''Star'')  </samp> ','0');
INSERT DBObjects VALUES('fDocColumnsWithRank','F','U',' Return the list of Columns plus ''rank'' ',' Used by the auto-doc interface and query builder tools.  Also returns the ''rank'' column that is used to order   the columns in query tools.  <samp>  select * from dbo.fDocColumnsWithRank(''PhotoObjAll'')  </samp> ','0');
INSERT DBObjects VALUES('fDocFunctionParams','F','U',' Return the parameters of a function ',' Used by the auto-doc interface. <br> <samp>  select * from dbo.fDocFunctionParams(''fGetNearbyObjEq'') </samp> ','0');
INSERT DBObjects VALUES('spDocEnum','P','U',' Display the properly rendered values from DataConstants  ',' The parameter is the name of the enumerated field in DataConstants.  The type and length is taken from the View of corresponding name.  <br><samp>  exec spDocEnum ''PhotoType'' </samp> ','0');
INSERT DBObjects VALUES('spDocKeySearch','P','U',' Search Columns table for @key ',' @option sets the scope of the search:    <li>1 is Columns,   <li>2 is Constants,  <li>4 is SDSSConstants,   <li>8 is DBObjects  <br>   Returns those rows, which had a hit. They will   have a weblink to the parent table.  <br>  <samp>  exec spDocKeySearch ''lupt'', 1  </samp> ','0');
INSERT DBObjects VALUES('fReplace','F','U',' Case-insensitve string replacement ',' Used by the SQL parser stored procedures. ','0');
INSERT DBObjects VALUES('fReplaceMax','F','U',' Case-insensitve string replacement for varchar(max) ',' Used by the SQL parser stored procedures. ','0');
INSERT DBObjects VALUES('fIsNumbers','F','U',' Check that the substring is a valid number. ',' <br>fIsNumbers(string, start, stop) Returns   <LI>  -1: REAL (contains decimal point) ([+|-]digits.digits)  <LI>   0: not a number  <LI>   1: BIGINT    ([+|-] 19 digits)  <br>  <samp>  select dbo.fIsNumbers(''123;'',1,3);   <br>  select dbo.fIsNumbers(''10.11;''1,5);</samp> ','0');
INSERT DBObjects VALUES('spExecuteSQL','P','U',' Procedure to safely execute an SQL select statement  ',' The procedure casts the string to lowercase (this could affect some search statements)   It rejects strings continuing semicolons;   It then discards duplicate blanks, xp_, sp_, fn_, and ms_ substrings.   we are guarding aginst things like ''select dbo.xp_cmdshell(''format c'');''   Then, if the ''limit'' parameter is > 0 (true), we insist that the     statement have a top x in it for x < 1000, or we add a TOP 1000 clause.   Once the SELECT statement is transformed, it is executed   and returns the answer set or an error message.   <br>   All the SQL statements are journaled into WebLog.dbo.SQLlog.   <samp>EXEC dbo.spExecuteSQL(''Select count(*) from PhotoObj'')</samp>  ','0');
INSERT DBObjects VALUES('spExecuteSQL2','P','U',' Procedure to safely execute an SQL select statement ',' The procedure runs and logs a query, but does not parse  it. <br>  See also spExecuteSQL ','0');
INSERT DBObjects VALUES('spLogSqlStatement','P','U',' Procedure to log a SQL query to the statement log.  ',' Log the given query and its start time to the SQL statement log.  Note  that we are logging only the start of the query yet, not a completed query.  All the SQL statements are journaled into WebLog.dbo.SQLStatementlog.   <samp>EXEC dbo.spLogSqlStatement(''Select count(*) from PhotoObj'',getutcdate())</samp>   See also spLogSqlPerformance. ','0');
INSERT DBObjects VALUES('spLogSqlPerformance','P','U',' Procedure to log success (or failure) of a SQL query to the performance log. ',' The caller needs to specify the time the query was started, the number of <br>  seconds (bigint) that the CPU was busy during the query execution, the    <br>  time the query ended, the number of rows the query returned, and an error <br>  message if applicable.  The time fields can be 0 if there is an error.  <samp>EXEC dbo.spLogSQLPerformance(''skyserver.sdss.org'','''',,'''',getutcdate())</samp>   See also spLogSqlStatement. ','0');
INSERT DBObjects VALUES('fGetUrlExpEq','F','U','  Returns the URL for an ra,dec, measured in degrees. ','  <br> returns http://localhost/en/tools/explore/obj.asp?ra=185.000000&dec=0.00000000   <br> where localhost is filled in from SiteConstants.WebServerURL.   <br> sample:<br> <samp>select dbo.fGetUrlExpEq(185,0) </samp>   <br> see also fGetUrlNavEq, fGetUrlNavId, fGetUrlExpId ','0');
INSERT DBObjects VALUES('fGetUrlExpId','F','U',' Returns the URL for an Photo objID. ','  <br> returns http://localhost/en/tools/explore/obj.asp?id=2255029915222048   <br> where localhost is filled in from SiteConstants.WebServerURL.   <br> sample:<br><samp> select dbo.fGetUrlExpId(2255029915222048) </samp>   <br> see also fGetUrlNavEq, fGetUrlNavId, fGetUrlExpEq ','0');
INSERT DBObjects VALUES('fGetUrlFrameImg','F','U','  Returns the URL for a JPG image of the frame ','  <br> returns http://localhost/en/get/frameById.asp?id=568688299147264   <br> where localhost is filled in from SiteConstants.WebServerURL.   <br> @zoom is an integer from (0,10,15,20,30) corresponding to a   rescaling of 2^(0.1*@zoom)   <br> sample:<br> <samp>select dbo.fGetUrlSpecImg(568688299147264,10) </samp>   <br> see also fGetUrlFrame ','0');
INSERT DBObjects VALUES('spGetFiberList','P','U',' Return a list of fibers on a given plate. ','','0');
INSERT DBObjects VALUES('fGetUrlFitsField','F','U',' Given a FieldID returns the URL to the FITS file of that field  ',' Combines the value of the DataServer URL from the  SiteConstants table and builds up the whole URL   <br><samp> select dbo.fGetUrlFitsField(568688299343872)</samp> ','0');
INSERT DBObjects VALUES('fGetUrlFitsCFrame','F','U',' Get the URL to the FITS file of a corrected frame given the fieldID and band ',' Combines the value of the DataServer URL from the  SiteConstants table and builds up the whole URL  from the fieldId (and a u, g, r, i or z filter)  <br><samp> select dbo.fGetUrlFitsCFrame(568688299343872,''r'')</samp> ','0');
INSERT DBObjects VALUES('fGetUrlFitsMask','F','U',' Get the URL to the FITS file of a frame mask given the fieldID and band ',' Combines the value of the DataServer URL from the  SiteConstants table and builds up the whole URL  from the fieldId (and a u, g, r, i or z filter)  <br><samp> select dbo.fGetUrlFitsMask(568688299343872,''r'')</samp> ','0');
INSERT DBObjects VALUES('fGetUrlFitsBin','F','U',' Get the URL to the FITS file of a binned frame given FieldID and band. ',' Combines the value of the DataServer URL from the  SiteConstants table and builds up the whole URL  from the fieldId (and a u, g, r, i or z filter)  <br><samp> select dbo.fGetUrlFitsBin(568688299343872,''r'')</samp> ','0');
INSERT DBObjects VALUES('fGetUrlFitsAtlas','F','U',' Get the URL to the FITS file of all atlas images in a field ',' Combines the value of the DataServer URL from the  SiteConstants table and builds up the whole URL  from the fieldId    <br><samp> select dbo.fGetUrlFitsAtlas(568688299343872)</samp> ','0');
INSERT DBObjects VALUES('fGetUrlFitsPlate','F','U',' Get the URL to the spPlate FITS file containing the spectrum given the SpecObjID ',' Combines the value of the DataServer URL from the  SiteConstants table and builds up the whole URL  from the specObjId.  <br><samp> select dbo.fGetUrlFitsPlate(75094092974915584)</samp> ','0');
INSERT DBObjects VALUES('fGetUrlFitsSpectrum','F','U',' Get the URL to the FITS file of the spectrum given the SpecObjID ',' Combines the value of the DataServer URL from the  SiteConstants table and builds up the whole URL  from the specObjId.  <br><samp> select TOP 10 dbo.fGetUrlFitsSpectrum(specObjID)  <br>FROM SpecObj</samp> ','0');
INSERT DBObjects VALUES('fGetUrlMangaCube','F','U',' Get the URL of the MaNGA data cube of the specified type (LIN/LOG) ',' Combines the value of the DataServer URL from the SiteConstants  table and builds up the whole URL from the plateIFU and data cube  type (''LIN'' or ''LOG''), along with the version string (versdp3 from  the mangaDrpAll entry.  <br><samp> select TOP 10 dbo.fGetUrlMangaCube(plateIFU,''LIN'')              FROM mangaDrpAll </samp> ','0');
INSERT DBObjects VALUES('fGetUrlNavEq','F','U','  Returns the URL for an ra,dec, measured in degrees. ','  <br> gets the URL of the navigator frame containing the given ra,dec (in degrees)   <br> returns http://localhost/en/tools/navi/getFrame.asp?zoom=1&ra=185.000000&dec=0.00000000   <br> where localhost is filled in from SiteConstants.WebServerURL.   <br> sample:<br> <samp>select dbo.fGetUrlNavEq(185,0) </samp>   <br> see also fGetUrlNavId, fGetUrlExpEq, fGetUrlExpId ','0');
INSERT DBObjects VALUES('fGetUrlNavId','F','U',' Returns the Navigator URL for an Photo objID. ','  <br> returns http://localhost/en/tools/navi/getFrame.asp?zoom=1&ra=184.028935&dec=-1.1259095   <br> where localhost is filled in from SiteConstants.WebServerURL.   <br> sample:<br><samp> select dbo.fGetUrlId(2255029915222048) </samp>   <br> see also fGetUrlNavEq, fGetUrlExpEq, fGetUrlExpId ','0');
INSERT DBObjects VALUES('fGetUrlSpecImg','F','U','  Returns the URL for a GIF image of the spectrum given the SpecObjID ','  <br> returns http://localhost/en/get/specById.asp?id=0x011fcb379dc00000   <br> where localhost is filled in from SiteConstants.WebServerURL.   <br> sample:<br> <samp>select dbo.fGetUrlSpecImg(0x011fcb379dc00000) </samp>   <br> see also fGetUrlFrame ','0');
INSERT DBObjects VALUES('spSetWebServerUrl','P','U',' Set the WebServerUrl value in SiteConstants based on the given site name.  ',' The WebServerUrl in the SiteConstants table is set to:            ''http://cas.sdss.org/''+@siteName+''/en/''  e.g.,            ''http://cas.sdss.org/dr5/en/''   when @siteName = ''dr5''. ','0');
INSERT DBObjects VALUES('fMJDToGMT','F','U',' Computes the String of a Modified Julian Date.  ',' From http://serendipity.magnet.ch/hermetic/cal_stud/jdn.htm   String has the format yyyy-mm-dd:hh:mm:ss.sssss   <PRE>select dbo.fMjdToGMT(49987.0)</PRE> ','0');
INSERT DBObjects VALUES('fGetAlpha','F','U',' Compute alpha ''expansion'' of theta for a given declination ',' Declination and theta are in degrees.  ','0');
INSERT DBObjects VALUES('spZoneCreate','P','A',' Organizes PhotoObj objects into the Zone table ',' The table holds ALL primary/secondary objects.   The table contains duplicates of objects which are within @radius distance   of the 0|360 meridian.  <p> Parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> radius float,   		-- radius in arcseconds  <li> zoneHeight float,   	-- zoneHeight in arcsec  <br>  Sample call for a 2 arcseconds radius and a 1/2 arcminute zoneHeight <br>  <samp>   <br> exec  spZoneCreate @taskid , @stepid, 2.0, 30.0;  </samp>   <br>   ','0');
INSERT DBObjects VALUES('spNeighbors','P','A',' Computes PhotoObj Neighbors based on nChild ',' Populate table of nearest neighbor object IDs for quicker   spatial joins. The table holds ALL star/galaxy objects within   1/2 arcmin of each object. Typically each object has 7 such   neighbors in the SDSS data. If the destinationType is RUNS,   TARGET, or TILES, then the radius is 3 arcseconds. This is   the zoned algorithm. When complete, the neighbors and the   ''native'' zone members can be copied to the destination DB.  <p> Parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationType int,   	-- ''best'', ''runs'',''target'', ''tiles''  <li> destinationDB int,   		-- destination database name  <li> radius float,			-- search radius in arcsec  <li> matchMode tinyint		-- if true, include multiple                                     -- observations of same object                                     -- in its neighbors, so the                                     -- Match tables can be built   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call for a 1/2 arcminute radius <br>  <samp>   <br> exec  spNeighbors @taskid , @stepid, ''best'', ''targetDB''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spFillMaskedObject','P','A',' Fills the MaskedObject table  ',' Will loop through the Mask table, and  for each mask with type<4 or seeing>1.7  in the r filter will find all objects in  PhotoObjAll that are inside a mask. These  are inserted into the MaskedObject table. ','0');
INSERT DBObjects VALUES('spSetInsideMask','P','A',' Update the insideMask value in Photo tables ',' @mode=0  -- run on the TaskDB  @mode>0  -- run it on the whole PubDB, also update PhotoTag ','0');
INSERT DBObjects VALUES('spSetPhotoClean','P','A',' Update the clean photometry flag for point sources in PhotoObjAll ',' The PhotoObjAll.clean value is 1 if certain conditions are  met for point source objects.  This signifies our best   judgement of ''clean'' photometry for these objects.  The  same logic is not applicable to extended objects. ','0');
INSERT DBObjects VALUES('spTargetInfoTargetObjID','P','A',' Set TargetInfo.targetObjID ',' Connect TargetInfo to photo objects in Target   Designed to run in the target database.  <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <br>  Sample call   <br>  <br> <samp>   exec spTargetInfoTargetObjID @taskid , @stepid    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spSetLoadVersion','P','A',' Update the loadVersion for various tables ',' Part of the loading process ','0');
INSERT DBObjects VALUES('spSetValues','P','A',' Compute the remaining attributes after bulk insert ',' Part of the loading process: it computes first  the HTMID for the Frame table, then the easy magnitudes  then sets the boundaries for a given chunk. Writes log  into the loadadmin database. ','0');
INSERT DBObjects VALUES('spTestHtm','P','A',' Tests 1000 htms to see if they match the ''local'' algorithm ',' <p> parameters:    <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> table varchar() NOT NULL,   	-- name of source table to test the htm field  <li> errorMsg varchar() NOT NULL,  -- error message if key not unique  <br>   Tests 100 Table(htmID) to match SkyServer function          Returns @error = 0 if almost all keys match   		@error > 0  more than 1% of keys needed fixing.        In the failure case it inserts messages in the load measage log        describing the first 10 failing htmIDs.    Sample call to test photoObjAll.htm <br>  <samp>   <br> exec spTestHtm @taskid , @stepid, ''photoObjAll'',  @error output  </samp>   <br> see also spGenericTest, spTestPrimaryKey,  ','0');
INSERT DBObjects VALUES('fDatediffSec','F','U',' fDatediffSec(start,now) returns the difference in seconds as a float ',' <p> parameters:    <li> start datetime,   		-- start time  <li> now datetime,   		-- end time  <li> returns float 	   	-- elapsed time in seconds.   <br>  sample use: <samp>        declare @start datetime        set @start  = current_timestamp       do something        print ''elapsed time was '' + str(dbo.fDatediffSec(@start, current_timestamp),10,3) + '' seconds''  </samp>  ','0');
INSERT DBObjects VALUES('spGenericTest','P','A',' Tests a generic SQL Statement, gives error if test produces any records ','      tests to see that no values violate the test   	the test must have the syntax:  		select <your key> as badKey 		into test         	from <your tests>      	if the <test> table is not empty, we print out the error message.          Returns @error = 0 if all keys unique    		@error >0  if duplicate keys (in which case it is the count of duplicate keys).        In the failure case it inserts messages in the load measage log        describing the first failing key.   <p> parameters:    <li> taskid int,   		-- task identifier  <li> stepid int,   		-- step identifier  <li> command varchar() NOT NULL,   -- sql command select... into test where....   <li> testType varchar() NOT NULL,  -- what are we testing   <li> errorMsg varchar() NOT NULL,  -- error message if test is not empty  <li> error int NOT NULL,         	-- output: 0 if OK (test is empty), non zero if output is not empty  <br>  Sample call to test that r is not too small <br>  <samp>   <br> exec spGenericTest @taskid, @stepid, ''select objID into test from objID where r < -99999'', ''testing r''  <br> 			''r is too small'', @error output  </samp>   <br> see also spTestUniqueKey, spTestForeignKey,  ','0');
INSERT DBObjects VALUES('spTestUniqueKey','P','A',' Tests a unique key, gives error if test finds non unique key ','     tests to see that sourceTable(key)is a unique key      key can involve multipe fields as in neighbors (objID, neighborObjID)        Returns @error = 0 if all keys unique   	@error >0  if duplicate keys (in which case it is the count of duplicate keys.      In the failure case it inserts messages in the phase table   <p> parameters:    <li> taskid bigint,   		-- task identifier  <li> stepid bigint,   		-- step identifier  <li> table varchar() NOT NULL,   	-- name of table to test   <li> key varchar() NOT NULL,   	-- name of key in table to test  <li> error int NOT NULL,         	-- output: 0 if OK (key is unique), non zero if key not unique  <br>  Sample call to test that photoObjAll.Objid is unique <br>  <samp>   <br> exec spTestUniqueKey @taskid, @stepid, ''photoObjAll'', ''ObjID'', @error output  </samp>   <br> see also spGenericTest, spTestForeignKey,  ','0');
INSERT DBObjects VALUES('spTestForeignKey','P','A',' Tests a foreign key, gives error if test finds an orphan record ',' spTestForeignKey (taskID, stepID, sourceTable, targetTable, key, error output)      tests to see that all values in sourceTable(key) are in targetTable(key)        Returns @error = 0 if foreigh key is OK 		@error >0  if foreign key has a mismatch (in which case it is the count.   In the failure case it inserts messages in the load measage log    describing the first 10 distinct failing keys.    <p> parameters:    <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> SourceTable varchar() NOT NULL, -- name of source table to test  <li> destinationTable varchar() NOT NULL, -- name of destination table to test    <li> key varchar() NOT NULL,   	-- name of foreign key in table to test  <li> error int NOT NULL,         	-- output: 0 if OK (is a foreign key), non zero find orphan  <br>  Sample call to test that PhotoProfile.Objid is a foreign key to photoObjAll <br>  <samp>   <br> exec spTestForeignKey @taskid, @stepID, ''PhotoProfile'', ''photoObjAll'',''ObjID'',  @error output  </samp>   <br> see also spGenericTest, spTestPrimaryKey,  ','0');
INSERT DBObjects VALUES('spTestPhotoParentID','P','A',' Tests that photoObjAll.nChild matches the number of children of each PhotoObj ',' Test that a parent with nChild has in fact n Children  <p> parameters:    <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> returns  0 if OK (nChild is correct), non zero if nChild is wrong    <br>  Sample call   <br>  <samp>   <br> exec @error = spTestPhotoParentID @taskid , @stepid   </samp>   <br> see also spGenericTest, spTestPrimaryKey,  ','0');
INSERT DBObjects VALUES('spComputePhotoParentID','P','A',' Computes photoObjAll.ParentID based on nChild ',' Scans photoObjAll table.     if nChild >0 then the next ''nChild'' nodes are children of this node.        unless one of them has nChild>0 in which case we recurse  <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> returns  0 if OK, non zero if something wrong    <br>  Sample call   <br>  <samp>   <br> exec  spComputePhotoParentID @taskid, @stepid   </samp>   <br> see also spTestPhotoParentID   ','0');
INSERT DBObjects VALUES('spValidatePhoto','P','A','  Validate Photo object of a given type   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> targetType int,   		-- ''best'', ''runs'',''target'', ''tiling''    <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidatePhoto @taskid , @stepid, ''best'', ''targetDB''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidatePlates','P','A','  Validate Spectro object   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidatePlates @taskid , @stepid, ''targetDB''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidateGalSpec','P','A','  Validate GalSpec tables   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidateGalSpec @taskid , @stepid, ''targetDB''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidateGalProd','P','A','  Validate galaxy product tables   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidateGalProd @taskid , @stepid, ''targetDB''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidateTiles','P','A','  Validate Tiles   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidateTiles @taskid , @stepid, ''targetDB''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidateWindow','P','A','  Validate Window tables   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidateWindow @taskid , @stepid, ''targetDB''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidateSspp','P','A','  Validate sspp tables   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidateSspp @taskid , @stepid, ''targetDB''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidatePm','P','A','  Validate pm tables   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidatePm @taskid , @stepid, ''targetDB''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidateMask','P','A','  Validate Mask tables   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidateMask @taskid , @stepid, ''targetDB''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidateManga','P','A','  Validate MaNGA tables   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidateManga @taskid , @stepid, ''targetDB''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidateNSA','P','A','  Validate NSA tables   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidateNSA @taskid , @stepid, ''targetDB''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidateMastar','P','A','  Validate Mastar tables   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidateMastar @taskid , @stepid, ''targetDB''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidateResolve','P','A','  Validate resolve tables   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidateResolve @taskid , @stepid, ''targetDB''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidateApogee','P','A','  Validate resolve tables   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidateApogee @taskid , @stepid, ''targetDB''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidateWise','P','A','  Validate resolve tables   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidateWise @taskid , @stepid, ''BestDR8''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidateEboss','P','A','  Validate eBOSS tables   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidateEboss @taskid , @stepid, ''BestDR18''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidateAstra','P','A','  Validate Astra tables   ',' <p> parameters:     <li> taskid int,   		-- Task identifie  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidateAstra @taskid , @stepid, ''BestDR18''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidateDR19VACs','P','A','  Validate DR19 VAC tables   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidateDR19VACs @taskid , @stepid, ''targetDB''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidateAllspec','P','A','  Validate allspec tables   ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> destinationDB int,   		-- Name of destination DB   <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spValidateAllspec @taskid , @stepid, ''BestDR18''    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spValidateStep','P','A',' Validation step, checks and augments Photo or Spectro data before publication ',' <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  The data has been placed in the local DB.  Most of the step parameters are extracted from the task table (see code)  It is destined for task.dbName  It is a task.type dataload (type in (target|best|runs|plates|galspec|sspp|tiling|window))  The validation step writes many messages in the Phase table.  It returns stepid and either:   	0 on success (no serious problems found)     1 on failure (serious problems found). ','0');
INSERT DBObjects VALUES('spBackupStep','P','A',' Backup step, shrinks, backs-up, and then detaches the database ',' <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  The data is in the local DB.  Most of the step parameters are extracted from the task table (see code)  It is a task.type dataload (type in (target|best|runs|plates|tiling))  The backup step writes  messages in the Phase table.  It returns stepid and either:   	0 on success (no serious problems found)     1 on failure (serious problems found). ','0');
INSERT DBObjects VALUES('spCleanupStep','P','A',' Cleanup step, deletes the database ',' <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  The data is in the local DB.  Most of the step parameters are extracted from the task table (see code)  It is a task.type dataload (type in (target|best|runs|plates|tiling))  The backup step writes  messages in the Phase table.  It returns stepid and either:   	0 on success (no serious problems found)     1 on failure (serious problems found). ','0');
INSERT DBObjects VALUES('spShrinkDB','P','A',' RShrinks each of the database files to minimum size ','  Jim Gray, Oct 2004  Largely copied from the DBCC books online ','0');
INSERT DBObjects VALUES('spReorg','P','A',' Reorganize and defragment database tables ','  Jim Gray, Nov 2002  Largely copied from the DBCC books online  Reorganize a database, reclustering tables and indices.  Fist collect a list of statistics about each table and index  then reindex anything with more than 30% extent fragmentation  Largely copied from the DBCC books online ','0');
INSERT DBObjects VALUES('spCopyATable','P','A',' Copies a table from one db to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <br><samp> exec spCopyATable 1,1,''SkyServerV4'', ''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishPhoto','P','A',' Publishes the Photo tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <samp> spPublishPhoto 1,1,''SkyServerV4'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishMask','P','A',' Publishes the Mask tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <samp> spPublishMask 1,1,''SkyServerV4'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishManga','P','A',' Publishes the MaNGA tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <samp> spPublishManga 1,1,''SkyServerV4'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishNSA','P','A',' Publishes the nsatlas (NASA-Sloan Atlas) table of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <samp> spPublishNSA 1,1,''SkyServerV4'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishMastar','P','A',' Publishes the Mastar tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <samp> spPublishMastar 1,1,''SkyServerV4'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishPlates','P','A',' Publishes the Plates tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.plates)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <br><samp> spPublishPlates 1,1,''SkyServerV4'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishGalProd','P','A',' Publishes the GalProd tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.plates)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <br><samp> spPublishGalProd 1,1,''SkyServerV4'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishTiling','P','A',' Publishes the Tiling tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <samp> spPublishTiling 1,1,''SkyServerV4'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishWindow','P','A',' Publishes the Window Function tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <samp> spPublishWindow 1,1,''BestDR7'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishGalSpec','P','A',' Publishes the galspec tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <samp> spPublishGalSpec 1,1,''BestDR7'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishSspp','P','A',' Publishes the sspp Function tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <samp> spPublishSspp 1,1,''BestDR7'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishPm','P','A',' Publishes the proper motion tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <samp> spPublishPm 1,1,''BestDR7'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishResolve','P','A',' Publishes the resolve tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <samp> spPublishResolve 1,1,''BestDR7'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishApogee','P','A',' Publishes the APOGEE tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <samp> spPublishApogee 1,1,''BestDR7'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishEboss','P','A',' Publishes the eBOSS tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <samp> spPublishEboss 1,1,''SkyServerV4'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishAstra','P','A',' Publishes the Astra tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <samp> spPublishAstra 1,1,''SkyServerV4'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishDR19VACs','P','A',' Publishes the Mastar tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <samp> spPublishMastar 1,1,''SkyServerV4'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishWise','P','A',' Publishes the WISE tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <samp> spPublishWise 1,1,''BestDR8'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishAllspec','P','A',' Publishes the Allspec tables of one DB to another  ',' <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> fromDB varchar(100),   	-- source DB (e.g. verify.photo)  <li> toDB varchar(100),   		-- destination DB (e.g. dr1.best)  <li> firstTime int 		-- if 1, creates target table.  <li> returns  0 if OK, non zero if something wrong    <samp> spPublishAllspec 1,1,''SkyServerV4'',''tempDB'', 1 </samp> ','0');
INSERT DBObjects VALUES('spPublishStep','P','A',' Publish step, publishes validated Photo or Spectro data   ',' <li> taskid int,                   -- Task identifier   The data has been imported to a DB, verified and backed up    This task attaches the database, and then pulls its data into the local database.  Most of the step parameters are extracted from the task table (see code)   Data is copied to the ''local'' database tables   It is a task.type dataload (type in (target|best|runs|plates|tiling))   The publish step writes many messages in the Phase table.   It returns either:      0 on success (no serious problems found)      1 on failure (serious problems found).   <br><samp> spPublish @taskId </samp> ','0');
INSERT DBObjects VALUES('spFixDetectionIndex','P','A',' Adds isPrimary column to detectionIndex table and sets its value. ',' Adds the new TINYINT column isPrimary to the detectionIndex table   and sets its value depending on whether the detection is the primary  detection of the object or not. ','0');
INSERT DBObjects VALUES('spRunSQLScript','P','A',' Executes an SQL script and logs the output string ',' Returns the status of the error, and inserts   error message into the Phase table ','0');
INSERT DBObjects VALUES('spLoadScienceTables','P','A',' Loads the data needed for science with the SDSS. ',' Insert data into RC3, Stetson, QSOCatalog  and other science data tables. ','0');
INSERT DBObjects VALUES('spSetVersion','P','A',' Update the checksum and set the version info for this DB. ','        ','0');
INSERT DBObjects VALUES('spSyncSchema','P','A',' Synchronizes the on-disk schema with the one in the pub db. ',' Reload the metadata tables and the schema files so that  the schema in the pub db is synchronized with the version  on disk (sqlLoader/schema/sql).  This is mainly needed  for incremental loading. ','0');
INSERT DBObjects VALUES('spRunPatch','P','A',' Run the patch contained in the given patch file. ',' Execute the patch from the given file and update the DB  diagnostics and version information accordingly.  The  @versionUpdate parameter allows selection of ''major'' or  ''minor'' (default) update type so that the version number  is incremented accordingly.  Hence a major update will   increase version 3.1 to 3.2, whereas minor update will   increase version 3.1 to 3.1.1. ','0');
INSERT DBObjects VALUES('spLoadMetaData','P','A',' Loads the Metadata about the schema ',' Insert metadata into the database, where it is  located in the UNC path @metadir. Only log if  @taskid>0. Returns >0, if errors occurred.  It will drop and rebuild the indices on the   META index group.  <samp>exec spLoadMetaData 0,0, ''\\SDSSDB\c$\sqlLoader\schema\csv\'' </samp> ','0');
INSERT DBObjects VALUES('spRemoveTaskFromTable','P','A',' Removes rows from table linked to PhotoObj corresponding to a given   task (as specified by a value of the loadversion). ',' Assumes that there is a table called ObjIds, which   contains the bigint PKs of all objects to be removed.  Parameters:  <li> @tableName: the name of the table to be cleaned  <li> @pk: the name of the primary key link  <li> @reinsert: 1 if objects need to be reinserted,    0 if just to be removed.  Default is 0  <li> @countsOnly: 1 if only counts, no actual deletion desired;    0 if deletion to go ahead.  Default is 1 (non-destructive).  <samp>  	exec spRemoveTaskFromTable ''Rosat'', ''objID''  </samp> ','0');
INSERT DBObjects VALUES('spRemoveTaskPhoto','P','A',' Remove objects related to a given @loadversion (i.e. taskID). ',' This script only works on a database without the FINISH step.  Parameters:  <li> @loadversion: the loadversion of the Task to be removed  <li> @reinsert: 1 if objects need to be reinserted,    0 if just to be removed. Default is 0.  <li> @countsOnly: 1 if we only want counts of objects that will    be deleted without actually deleting them; 0 if objects are    to be deleted.  Default is 1 (only return counts for checking). ','0');
INSERT DBObjects VALUES('spRemovePlate','P','A',' Remove spectro objects corresponding to a given plate or plates. ',' This script only works on a database without the FINISH step.  Parameters:  <li> @plate: the plate number of the plate to be deleted              if 0, then multiple plates are to be deleted              and the plate list is assumed to be in PlateIds              table, and specobj list in SpecObjIds table.  <li> @mjd: MJD of plate to be removed  <li> @countsOnly: 1 if we only want counts of objects that will    be deleted without actually deleting them; 0 if objects are    to be deleted.  Default is 1 (only return counts for checking). ','0');
INSERT DBObjects VALUES('spRemoveTaskSpectro','P','A',' Remove spectro objects related to a given @loadversion (i.e. taskID). ',' This script only works on a database without the FINISH step.  Parameters:  <li> @loadversion: the loadversion of the Task to be removed  <li> @countsOnly: 1 if we only want counts of objects that will    be deleted without actually deleting them; 0 if objects are    to be deleted.  Default is 1 (only return counts for checking). ','0');
INSERT DBObjects VALUES('spRemovePlateList','P','A',' Remove spectro objects related to the plate list in the given file. ',' This script only works on a database without the FINISH step.  Parameters:  <li> @fileName: name of file on disk containing list of plate#s     and MJDs  <li> @countsOnly: 1 if we only want counts of objects that will    be deleted without actually deleting them; 0 if objects are    to be deleted.  Default is 1 (only return counts for checking). ','0');
INSERT DBObjects VALUES('spTableCopy','P','A',' Incremental copies @source to @target table based on ObjID range ',' <br>Copies about 100,000 rows at a time in a transaction.   <br>This avoids log overflow and is restartable.  <br>The two tables should exist and have the same schema.  <br>Both tables should have a primary clustring key on ObjID  <br>If the max objID in the target table is not null (not an empty table)  <br> then it is assumed that all source records less than that ObjID are already in the target.  <p> parameters:    <li> @sourceTable 	nvarchar(1000), -- Source table: e.g. BestDr1.dbo.PhotoObj  <li> @targetTable 	nvarchar(1000), -- Target table: e.g. temp.dbo.PhotoObj  <br>  Sample call to copy PhotoObj from BestDr1 to Temp  <samp>   <br> exec spTableCopy N''bestDr1.dbo.PhotoObj'',N''Temp.dbo.PhotoObj''  </samp>     ','0');
INSERT DBObjects VALUES('spBuildSpecPhotoAll','P','A',' Collect the combined spectro and photo parameters of an object in SpecObjAll ',' This is a precomputed join between the PhotoObjAll and SpecObjAll tables.  The photo attibutes included cover about the same as PhotoTag.  The table also includes certain attributes from Tiles. ','0');
INSERT DBObjects VALUES('spSegue2SpectroPhotoMatch','P','A',' Computes PhotoObj corresponding to new SEGUE2 spectra ',' Connect SEGUE2 spectra to photo objects in Best   Designed to run in the Best database.  <p> parameters:     <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  <li> returns  0 if OK, non zero if something wrong    <br>  Sample call   <br>  <br> <samp>   exec spSegue2SpectroPhotoMatch @taskid , @stepid    </samp>   <br>   ','0');
INSERT DBObjects VALUES('fGetNearbyTiledTargetsEq','F','A',' Returns table of tiled targets within @r arcmins of an Equatorial point (@ra,@dec) ',' <br> ra, dec are in degrees, r is in arc minutes.   <p> returned table:    <li> tile smallint,               -- tile number  <li> targetid bigint,             -- id of target  <li> ra float,                    -- ra (degrees)  <li> dec float,                   -- dec (degrees)  <li> sourceType int               -- type of object fiber  <br> ','0');
INSERT DBObjects VALUES('spTiledTargetDuplicates','P','A','  procedure to mark duplicate tiled targets ','   ','0');
INSERT DBObjects VALUES('spSynchronize','P','A','  Finish Spectro object (do photo Spectro matchup) ',' <p> parameters:     <li> taskid int,   	-- Task identifier  <li> stepid int	   	-- Step identifier  <li> buildSpecPhotoAll     -- 0 to omit SpecPhotoAll rebuild  <li> returns  0 if OK, non zero if something wrong    <br>  Sample call:<br>  <samp>   <br> exec  spSynchronize @taskid , @stepid , 0  </samp>   <br>   ','0');
INSERT DBObjects VALUES('spFixTargetVersion','P','A',' Fixes targetVersion in TilingGeometry before running sectors. ',' <li> returns  0 if OK, non zero if something wrong    <br>  Sample call   <br>  <br> <samp>   exec spFixTargetVersion @taskid , @stepid    </samp>   <br>   ','0');
INSERT DBObjects VALUES('spSdssPolygonRegions','P','A',' Create regions of a type ''POLYGON'' during FINISH stage ',' Create the polygon regions for main survey and set the areas  using regionBinary. ','0');
INSERT DBObjects VALUES('spLoadPhotoTag','P','A',' Create the PhotoTag index in PhotoObjAll ',' This index contains the popular fields from the PhotoObjAll table. ','0');
INSERT DBObjects VALUES('spLoadPatches','P','A',' Run any patches that may have accumulated during the loading  process. ',' Run the patches recorded in the nextReleasePatches.sql file  in the patches directory. ','0');
INSERT DBObjects VALUES('spCreateWeblogDB','P','A',' Run any patches that may have accumulated during the loading  process. ',' Run the patches recorded in the nextReleasePatches.sql file  in the patches directory. ','0');
INSERT DBObjects VALUES('spFinishDropIndices','P','A',' Drops the F and I indices in the Finish step, and also the  K indices if the FINISH task comment field contains the   string ''DROP_PK_INDICES''. ',' A wrapper with logging to be called by spFinishStep ','0');
INSERT DBObjects VALUES('spFinishStep','P','A',' Finish step, polishes published Photo or Spectro   ',' <li> taskid int,   		-- Task identifier  <li> stepid int,   		-- Step identifier  The data has been placed in the destination DB.  Neighbors are computed for the photo data  Best PhotoObjects are computed for sciencPrimary Spectro objects   	0 on success (no serious problems found)     1 on failure (serious problems found). ','0');
INSERT DBObjects VALUES('spCopyDbSimpleTable','P','U','','','0');
INSERT DBObjects VALUES('spCopyDbSubset','P','U','','','0');
INSERT DBObjects VALUES('fCosmoZfromDl','F','U',' Returns the redshift at a given luminosity distance.<br> ',' Parameters:<br>  <li> @LuminosityDistance float: luminosity distance in Mpc.  <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns redshift float  <br><samp> select dbo.fCosmoZfromDl(460.365188862815,0.27891507,0.721,8.493e-5,-1,0.701);select dbo.fCosmoZfromDl(460.365188862815,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT) </samp>  <br> return 0.1 and 0.1  <br> see also fCosmoDl ','0');
INSERT DBObjects VALUES('fCosmoZfromDa','F','U',' Returns a row with the first and second solution for the redshift, given an angular diameter distance.<br> ',' Parameters:<br>  <li> @AngularDiamDist float: angular diameter distance in Mpc.  <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns table (z1 float, z2 float): one row table where z1 and z2 are the first and second solutions, and z1<=z2.  <br><samp> select * from dbo.fCosmoZfromDa(380.467098233731,0.27891507,0.721,8.493e-5,-1,0.701); select * from dbo.fCosmoZfromDa(380.467098233731,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT) </samp>  <br> return the rows 0.0999999999999999	29.5344556200345 and 0.0999999999999999	29.5344556200345  <br> see also fCosmoDa ','0');
INSERT DBObjects VALUES('fCosmoZfromDm','F','U',' Returns the redshift for a given transverse comoving distance.<br> ',' Parameters:<br>  <li> @ComovDistTransverse float: transverse comoving distance in Mpc.  <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns redshift float  <br><samp> select dbo.fCosmoZfromDm(418.513808057105,0.27891507,0.721,8.493e-5,-1,0.701); select dbo.fCosmoZfromDm(418.513808057105,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT) </samp>  <br> return 0.1 and 0.1  <br> see also fCosmoDm ','0');
INSERT DBObjects VALUES('fCosmoZfromDc','F','U',' Returns the redshift at a given line of sight comoving distance.<br> ',' Parameters:<br>  <li> @ComovDistLineOfSight float: line of sight comoving distance in MPc.  <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns redshift float  <br><samp> select dbo.fCosmoZfromDc(418.513808057105,0.27891507,0.721,8.493e-5,-1,0.701); select dbo.fCosmoZfromDc(418.513808057105,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT) </samp>  <br> return 0.1 and 0.1  <br> see also fCosmoDc ','0');
INSERT DBObjects VALUES('fCosmoZfromAgeOfUniverse','F','U',' Returns the redshift at a given age of the universe.<br> ',' Parameters:<br>  <li> @AgeOfUniverse float: Age of the universe in Gyr.  <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns redshift float  <br><samp> select dbo.fCosmoZfromAgeOfUniverse(12.4160780396264,0.27891507,0.721,8.493e-5,-1,0.701); select dbo.fCosmoZfromAgeOfUniverse(12.4160780396264,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT) </samp>  <br> return 0.0999999999999961 and 0.0999999999999961  <br> see also fCosmoZfromLookBackTime,fCosmoAgeOfUniverse ','0');
INSERT DBObjects VALUES('fCosmoZfromLookBackTime','F','U',' Returns the redshift at a given look back time.<br> ',' Parameters:<br>  <li> @LookBackTime float: look back time in Gyr.  <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns redshift float  <br><samp> select dbo.fCosmoZfromLookBackTime(1.30147821902424,0.27891507,0.721,8.493e-5,-1,0.701); select dbo.fCosmoZfromLookBackTime(1.30147821902424,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT) </samp>  <br> return 0.100000000000001 and 0.100000000000001  <br> see also fCosmoZfromAgeOfUniverse,fCosmoLookBackTime ','0');
INSERT DBObjects VALUES('fCosmoLookBackTime','F','U',' Returns the time interval between the present time and a particular redshift.<br> ',' Parameters:<br>  <li> @z float: redshift   <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns LookBackTime float: look back time in GYr.  <br><samp> select dbo.fCosmoLookBackTime(0.1,0.27891507,0.721,8.493e-5,-1,0.701); select dbo.fCosmoLookBackTime(0.1,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT)  </samp>  <br> return 1.30147821902424 and 1.30147821902424  <br> see also fCosmoAgeOfUniverse and fCosmoTimeInterval ','0');
INSERT DBObjects VALUES('fCosmoAgeOfUniverse','F','U',' Returns the time interval between a particular redshift and the beginning of the universe.<br> ',' Parameters:<br>  <li> @z float: redshift   <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns AgeOfUniverse float: age of the universe in GYr.  <br><samp> select dbo.fCosmoAgeOfUniverse(0.1,0.27891507,0.721,8.493e-5,-1,0.701); select dbo.fCosmoAgeOfUniverse(0.1,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT)  </samp>  <br> return 12.4160780396264 and 12.4160780396264  <br> see also fCosmoLookBackTime and fCosmoTimeInterval ','0');
INSERT DBObjects VALUES('fCosmoTimeInterval','F','U',' Returns the time interval between redshifts zMin and zMax.<br> ',' Parameters:<br>  <li> @zMin float: redshift  <li> @zMax float: redshift  <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> Returns TimeInterval float: time interval in GYr.  <br><samp> select dbo.fCosmoTimeInterval(0.1,5,0.27891507,0.721,8.493e-5,-1,0.701);select dbo.fCosmoTimeInterval(0.1,5,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT) </samp>  <br> return 11.2234721194364 and 11.2234721194364  <br> see also fCosmoLookBackTime and fCosmoAgeOfUniverse ','0');
INSERT DBObjects VALUES('fCosmoHubbleDistance','F','U',' Returns the Hubble Distance.<br> ',' Parameters:<br>  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc])  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> Returns HubbleDistance float: hubble distance in Mpc.  <br><samp> select dbo.fCosmoHubbleDistance(0.701); select dbo.fCosmoHubbleDistance(DEFAULT) </samp>  <br> return 4276.63991440799 and 4276.63991440799 ','0');
INSERT DBObjects VALUES('fCosmoDl','F','U',' Returns the luminosity distance at a given redshift.<br> ',' Parameters:<br>  <li> @z float: redshift  <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns Dl float: luminosity distance in MPc.  <br><samp> select dbo.fCosmoDl(0.1,0.27891507,0.721,8.493e-5,-1,0.701); select dbo.fCosmoDl(0.1,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT) </samp>  <br> return 460.365188862815 and 460.365188862815  <br> see also fCosmoZfromDl ','0');
INSERT DBObjects VALUES('fCosmoDc','F','U',' Returns the line of sight comoving distance at a given redshift.<br> ',' Parameters:<br>  <li> @z float: redshift  <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns Dc float: line of sight comoving distance in MPc.  <br><samp> select dbo.fCosmoDc(0.1,0.27891507,0.721,8.493e-5,-1,0.701);select dbo.fCosmoDc(0.1,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT) </samp>  <br> return 418.513808057104 and 418.513808057104  <br> see also fCosmoZfromDc ','0');
INSERT DBObjects VALUES('fCosmoComovDist2ObjectsRADEC','F','U',' Returns the comoving distance between 2 objects at different redshifts and locations in the sphere.<br> ',' Parameters:<br>  <li> @Redshift1 float: redshift of object 1.  <li> @Ra1 float: right asension of object 1 in degrees.  <li> @Dec1 float: declination of object 1 in degrees.  <li> @Redshift2 float: redshift of object 2.  <li> @Ra2 float: right asension of object 2 in degrees.  <li> @Dec2 float: declination of object 2 in degrees.  <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns ComovDist float: comoving distance between the two objects.  <br><samp> select dbo.fCosmoComovDist2ObjectsRADEC(0.1,0,90,0.1,0,-90,0.27891507,0.721,8.493e-5,-1,0.701);select dbo.fCosmoComovDist2ObjectsRADEC(0.1,0,90,0.1,0,-90,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT) </samp>  <br> return 837.027616114209 and 837.027616114209  <br> see also fCosmoZfromDc ','0');
INSERT DBObjects VALUES('fCosmoComovDist2ObjectsXYZ','F','U',' Returns the comoving distance between 2 objects at different redshifts locations in the sphere.<br> ',' Parameters:<br>  <li> @Redshift1 float: redshift of object 1.  <li> @x1 float: x-coordinate of object 1.  <li> @y1 float: y-coordinate of object 1.  <li> @z1 float: z-coordinate of object 1.  <li> @Redshift2 float: redshift of object 2.  <li> @x2 float: x-coordinate of object 2.  <li> @y2 float: y-coordinate of object 2.  <li> @z2 float: z-coordinate of object 2.  <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns ComovDist float: comoving distance between the two objects.  <br><samp> select dbo.fCosmoComovDist2ObjectsXYZ(0.1,0,0,1,0.1,0,0,-1,0.27891507,0.721,8.493e-5,-1,0.701);select dbo.fCosmoComovDist2ObjectsXYZ(0.1,0,0,1,0.1,0,0,-1,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT) </samp>  <br> return 837.027616114209 and 837.027616114209   <br> see also fCosmoZfromDc ','0');
INSERT DBObjects VALUES('fCosmoDa','F','U',' Returns the angular diameter distance at a given redshift.<br> ',' Parameters:<br>  <li> @z float: redshift  <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns Da float: angular diameter distance in MPc.  <br><samp> select dbo.fCosmoDa(0.1,0.27891507,0.721,8.493e-5,-1,0.701);select dbo.fCosmoDa(0.1,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT);select dbo.fCosmoDa(29.5344556200345,0.27891507,0.721,8.493e-5,-1,0.701);select dbo.fCosmoDa(29.5344556200345,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT) </samp>  <br> return 380.467098233731 and 380.467098233731 and 380.467098233731 and 380.467098233731  <br> see also fCosmoZfromDa ','0');
INSERT DBObjects VALUES('fCosmoDm','F','U',' Returns the transverse comoving distance at a given redshift.<br> ',' Parameters:<br>  <li> @z float: redshift  <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns Dm float: transverse comoving distance in MPc.  <br><samp> select dbo.fCosmoDm(0.1,0.27891507,0.721,8.493e-5,-1,0.701);select dbo.fCosmoDm(0.1,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT) </samp>  <br> return 418.513808057104 and 418.513808057104  <br> see also fCosmoZfromDm ','0');
INSERT DBObjects VALUES('fCosmoComovingVolume','F','U',' Returns the comoving volume between here and a given redshift.<br> ',' Parameters:<br>  <li> @z float: redshift  <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns ComoVingVolume float: Comoving Volume in GPc^3.  <br><samp> select dbo.fCosmoComovingVolume(0.1,0.27891507,0.721,8.493e-5,-1,0.701);select dbo.fCosmoComovingVolume(0.1,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT) </samp>  <br> return 0.307056279299776 and 0.307056279299776  <br> see also fCosmoComovVolumeFromDl ','0');
INSERT DBObjects VALUES('fCosmoAbsMag','F','U',' Returns the absolute magnitude of a galaxy at a particular redshift.<br> ',' Parameters:<br>  <li> @m float: aparent magnitude of the object  <li> @z float: redshift  <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns AbsMag: absolute magnitude  <br><samp> select dbo.fCosmoAbsMag(17.5,0.1,0.27891507,0.721,8.493e-5,-1,0.701);select dbo.fCosmoAbsMag(17.5,0.1,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT) </samp>  <br> return -20.8155123821697 and -20.8155123821697  <br> see also fCosmoDistanceModulus ','0');
INSERT DBObjects VALUES('fCosmoDistanceModulus','F','U',' Returns the distance modulus at a particular redshift.<br> ',' Parameters:<br>  <li> @z float: redshift  <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns DistanceModulus: distance modulus   <br><samp> select dbo.fCosmoDistanceModulus(0.1,0.27891507,0.721,8.493e-5,-1,0.701);select dbo.fCosmoDistanceModulus(0.1,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT) </samp>  <br> return 38.3155123821697 and 38.3155123821697  <br> see also fCosmoAbsMag ','0');
INSERT DBObjects VALUES('fCosmoQuantities','F','U',' Returns a table of redshifts and the corresponding values of the cosmological distances,comoving volume and time intervals.<br> ',' Parameters:<br>  <li> @zMin float: redshift lower bound  <li> @zMax float: redshift upper bound  <li> @NumBin int: number of bins, at whose boundaries all the values are evaluated. Number of rows returned = @NUmBin + 1.  <li> @OmegaM float: matter density. If set as DEFAULT, then 0.27891507  <li> @OmegaL float: dark energy density. If set as DEFAULT, then 0.721  <li> @OmegaR float: radiation density. If set as DEFAULT, then 8.493e-5  <li> @omega0 float: dark energy state equation. If set as DEFAULT, then -1  <li> @h_0 float: (hubble constant[Km/s/MPc])/(100[Km/s/MPc]). If set as DEFAULT, then 0.701  Reference:  http://lambda.gsfc.nasa.gov/product/map/dr3/pub_papers/fiveyear/cosmology/wmap_5yr_cosmo.pdf <br>  <li> returns table (z float, Dc float, Dm float, Da float, Dl float, Dh float, ComVol float, LookBackTime float, AgeOfUniverse float) where  <li> z: redshift   <li> Dc: line of sight comoving distance in MPc.  <li> Dm: transverse comoving distance in MPc.   <li> Da: angular diameter distance in MPc.  <li> Dl: luminosity distance in MPc.  <li> Dh: hubble distance in MPc.  <li> ComVol: comoving volume in GPc^3.  <li> LookBackTime: look back time at z in GYr.  <li> AgeOfUniverse: age of the universe at z in GYr.  <br><samp> select * from fCosmoQuantities(0,5,1000,0.27891507,0.721,8.493e-5,-1,0.701);select * from fCosmoQuantities(0,5,1000,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT) </samp> ','0');
INSERT DBObjects VALUES('fMathGetBin','F','U',' Returns the value at the center of the bin where @x falls in, given a grid of @NumBin bins in the interval @x1 to @x2.<br> ',' Parameters:<br>  <li> @x float: value of the variable.  <li> @x1 float: lower bound of the interval.  <li> @x2 float: upper bound of the interval.  <li> @NumBin int: number of bins in which the inteval is partitioned.  <li> @HasOpenUpperBound bit: true if the bins have open upper bounds (and closed lower bounds); false if the bins have open lower bounds (and closed upper bounds).  <li> returns BinCenter float: the center of the bin, where @x falls in.   <br><samp> select dbo.fMathGetBin( s.z,0.1,0.7,24,0) as BinCenter, count(*) as Counts from SpecPhoto as s where primtarget&(0x04000020)!=0 and primtarget&(64|128|256)=0 and z between 0.1 and 0.7 group by dbo.fMathGetBin(s.z,0.1,0.7,24,0) order by dbo.fMathGetBin(s.z,0.1,0.7,24,0) </samp>  <br> see also spMathHistogramNDim ','0');

GO
----------------------------- 
PRINT '830 lines inserted into DBObjects '
----------------------------- 

